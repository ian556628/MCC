

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 15 14:43:15 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F46K22 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  0016B6                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _D
    90  0016B6  04                 	db	4
    91                           
    92                           	psect	idataBANK0
    93  001646                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _Seg
    97  001646  C0                 	db	192
    98  001647  F9                 	db	249
    99  001648  A4                 	db	164
   100  001649  B0                 	db	176
   101  00164A  99                 	db	153
   102  00164B  92                 	db	146
   103  00164C  82                 	db	130
   104  00164D  F8                 	db	248
   105  00164E  80                 	db	128
   106  00164F  90                 	db	144
   107  001650  88                 	db	136
   108  001651  83                 	db	131
   109  001652  C6                 	db	198
   110  001653  A1                 	db	161
   111  001654  86                 	db	134
   112  001655  8E                 	db	142
   113                           
   114                           	psect	nvCOMRAM
   115  000041                     __pnvCOMRAM:
   116                           	opt stack 0
   117  000041                     _EUSART1_ErrorHandler:
   118                           	opt stack 0
   119  000041                     	ds	2
   120  000043                     _EUSART1_OverrunErrorHandler:
   121                           	opt stack 0
   122  000043                     	ds	2
   123  000045                     _EUSART1_FramingErrorHandler:
   124                           	opt stack 0
   125  000045                     	ds	2
   126  000047                     _EUSART1_RxDefaultInterruptHandler:
   127                           	opt stack 0
   128  000047                     	ds	2
   129  000049                     _EUSART1_TxDefaultInterruptHandler:
   130                           	opt stack 0
   131  000049                     	ds	2
   132  00004B                     _eusart1TxBufferRemaining:
   133                           	opt stack 0
   134  00004B                     	ds	1
   135  0000                     _ANSELA	set	3896
   136  0000                     _ANSELE	set	3900
   137  0000                     _ANSELB	set	3897
   138  0000                     _ANSELC	set	3898
   139  0000                     _ANSELD	set	3899
   140  0000                     _INTCON2bits	set	4081
   141  0000                     _WPUB	set	3937
   142  0000                     _TRISD	set	3989
   143  0000                     _TRISC	set	3988
   144  0000                     _TRISB	set	3987
   145  0000                     _TRISA	set	3986
   146  0000                     _TRISE	set	3990
   147  0000                     _LATC	set	3979
   148  0000                     _LATB	set	3978
   149  0000                     _LATA	set	3977
   150  0000                     _LATD	set	3980
   151  0000                     _LATE	set	3981
   152  0000                     _OSCTUNE	set	3995
   153  0000                     _OSCCON2	set	4050
   154  0000                     _OSCCON	set	4051
   155  0000                     _PIR1bits	set	3998
   156  0000                     _INTCONbits	set	4082
   157  0000                     _RCONbits	set	4048
   158  0000                     _RCREG1	set	4014
   159  0000                     _RCSTA1bits	set	4011
   160  0000                     _TXREG1	set	4013
   161  0000                     _TXSTA1bits	set	4012
   162  0000                     _SPBRGH1	set	4016
   163  0000                     _SPBRG1	set	4015
   164  0000                     _TXSTA1	set	4012
   165  0000                     _RCSTA1	set	4011
   166  0000                     _BAUDCON1	set	4024
   167  0000                     _PIE1bits	set	3997
   168                           
   169                           	psect	smallconst
   170  001000                     __psmallconst:
   171                           	opt stack 0
   172  001000  00                 	db	0
   173  001001                     STR_1:
   174  001001  37                 	db	55	;'7'
   175  001002  00                 	db	0
   176                           
   177                           ; #config settings
   178  001003  00                 	db	0	; dummy byte at the end
   179  0000                     
   180                           	psect	cinit
   181  0013BE                     __pcinit:
   182                           	opt stack 0
   183  0013BE                     start_initialization:
   184                           	opt stack 0
   185  0013BE                     __initialization:
   186                           	opt stack 0
   187                           
   188                           ; Initialize objects allocated to BANK0 (16 bytes)
   189                           ; load TBLPTR registers with __pidataBANK0
   190  0013BE  0E46               	movlw	low __pidataBANK0
   191  0013C0  6EF6               	movwf	tblptrl,c
   192  0013C2  0E16               	movlw	high __pidataBANK0
   193  0013C4  6EF7               	movwf	tblptrh,c
   194  0013C6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   195  0013C8  6EF8               	movwf	tblptru,c
   196  0013CA  EE00  F080         	lfsr	0,__pdataBANK0
   197  0013CE  EE10 F010          	lfsr	1,16
   198  0013D2                     copy_data0:
   199  0013D2  0009               	tblrd		*+
   200  0013D4  CFF5 FFEE          	movff	tablat,postinc0
   201  0013D8  50E5               	movf	postdec1,w,c
   202  0013DA  50E1               	movf	fsr1l,w,c
   203  0013DC  E1FA               	bnz	copy_data0
   204                           
   205                           ; Initialize objects allocated to COMRAM (1 bytes)
   206                           ; load TBLPTR registers with __pidataCOMRAM
   207  0013DE  0EB6               	movlw	low __pidataCOMRAM
   208  0013E0  6EF6               	movwf	tblptrl,c
   209  0013E2  0E16               	movlw	high __pidataCOMRAM
   210  0013E4  6EF7               	movwf	tblptrh,c
   211  0013E6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   212  0013E8  6EF8               	movwf	tblptru,c
   213  0013EA  0009               	tblrd		*+	;fetch initializer
   214  0013EC  CFF5 F04C          	movff	tablat,__pdataCOMRAM
   215                           
   216                           ; Clear objects allocated to BANK0 (32 bytes)
   217  0013F0  EE00  F060         	lfsr	0,__pbssBANK0
   218  0013F4  0E20               	movlw	32
   219  0013F6                     clear_0:
   220  0013F6  6AEE               	clrf	postinc0,c
   221  0013F8  06E8               	decf	wreg,f,c
   222  0013FA  E1FD               	bnz	clear_0
   223                           
   224                           ; Clear objects allocated to COMRAM (39 bytes)
   225  0013FC  EE00  F001         	lfsr	0,__pbssCOMRAM
   226  001400  0E27               	movlw	39
   227  001402                     clear_1:
   228  001402  6AEE               	clrf	postinc0,c
   229  001404  06E8               	decf	wreg,f,c
   230  001406  E1FD               	bnz	clear_1
   231  001408                     end_of_initialization:
   232                           	opt stack 0
   233  001408                     __end_of__initialization:
   234                           	opt stack 0
   235  001408  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   236  00140A  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   237  00140C  0100               	movlb	0
   238  00140E  EF55  F00A         	goto	_main	;jump to C main() function
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           tblptrl	equ	0xFF6
   242                           tablat	equ	0xFF5
   243                           postinc0	equ	0xFEE
   244                           wreg	equ	0xFE8
   245                           postdec1	equ	0xFE5
   246                           fsr1l	equ	0xFE1
   247                           
   248                           	psect	bssCOMRAM
   249  000001                     __pbssCOMRAM:
   250                           	opt stack 0
   251  000001                     _eusart1RxStatusBuffer:
   252                           	opt stack 0
   253  000001                     	ds	16
   254  000011                     _d:
   255                           	opt stack 0
   256  000011                     	ds	2
   257  000013                     _i:
   258                           	opt stack 0
   259  000013                     	ds	2
   260  000015                     _a:
   261                           	opt stack 0
   262  000015                     	ds	2
   263  000017                     _c_scan:
   264                           	opt stack 0
   265  000017                     	ds	1
   266  000018                     _segg22:
   267                           	opt stack 0
   268  000018                     	ds	1
   269  000019                     _segg222:
   270                           	opt stack 0
   271  000019                     	ds	1
   272  00001A                     _segg21:
   273                           	opt stack 0
   274  00001A                     	ds	1
   275  00001B                     _segg12:
   276                           	opt stack 0
   277  00001B                     	ds	1
   278  00001C                     _segg122:
   279                           	opt stack 0
   280  00001C                     	ds	1
   281  00001D                     _segg11:
   282                           	opt stack 0
   283  00001D                     	ds	1
   284  00001E                     _seg_value2:
   285                           	opt stack 0
   286  00001E                     	ds	1
   287  00001F                     _seg_value1:
   288                           	opt stack 0
   289  00001F                     	ds	1
   290  000020                     _rxData:
   291                           	opt stack 0
   292  000020                     	ds	1
   293  000021                     _led_value:
   294                           	opt stack 0
   295  000021                     	ds	1
   296  000022                     _eusart1RxLastError:
   297                           	opt stack 0
   298  000022                     	ds	1
   299  000023                     _eusart1RxCount:
   300                           	opt stack 0
   301  000023                     	ds	1
   302  000024                     _eusart1RxTail:
   303                           	opt stack 0
   304  000024                     	ds	1
   305  000025                     _eusart1RxHead:
   306                           	opt stack 0
   307  000025                     	ds	1
   308  000026                     _eusart1TxTail:
   309                           	opt stack 0
   310  000026                     	ds	1
   311  000027                     _eusart1TxHead:
   312                           	opt stack 0
   313  000027                     	ds	1
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           postdec1	equ	0xFE5
   321                           fsr1l	equ	0xFE1
   322                           
   323                           	psect	dataCOMRAM
   324  00004C                     __pdataCOMRAM:
   325                           	opt stack 0
   326  00004C                     _D:
   327                           	opt stack 0
   328  00004C                     	ds	1
   329                           tblptru	equ	0xFF8
   330                           tblptrh	equ	0xFF7
   331                           tblptrl	equ	0xFF6
   332                           tablat	equ	0xFF5
   333                           postinc0	equ	0xFEE
   334                           wreg	equ	0xFE8
   335                           postdec1	equ	0xFE5
   336                           fsr1l	equ	0xFE1
   337                           
   338                           	psect	bssBANK0
   339  000060                     __pbssBANK0:
   340                           	opt stack 0
   341  000060                     _eusart1RxBuffer:
   342                           	opt stack 0
   343  000060                     	ds	16
   344  000070                     _eusart1TxBuffer:
   345                           	opt stack 0
   346  000070                     	ds	16
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           postdec1	equ	0xFE5
   354                           fsr1l	equ	0xFE1
   355                           
   356                           	psect	dataBANK0
   357  000080                     __pdataBANK0:
   358                           	opt stack 0
   359  000080                     _Seg:
   360                           	opt stack 0
   361  000080                     	ds	16
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	cstackBANK0
   372  000090                     __pcstackBANK0:
   373                           	opt stack 0
   374  000090                     ?_atoi:
   375                           	opt stack 0
   376  000090                     atoi@s:
   377                           	opt stack 0
   378                           
   379                           ; 3 bytes @ 0x0
   380  000090                     	ds	3
   381  000093                     ??_atoi:
   382                           
   383                           ; 1 bytes @ 0x3
   384  000093                     	ds	2
   385  000095                     atoi@sign:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x5
   389  000095                     	ds	1
   390  000096                     atoi@a:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x6
   394  000096                     	ds	2
   395  000098                     ??_wait_leddata:
   396                           
   397                           ; 1 bytes @ 0x8
   398  000098                     	ds	3
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           postdec1	equ	0xFE5
   406                           fsr1l	equ	0xFE1
   407                           
   408                           	psect	cstackCOMRAM
   409  000028                     __pcstackCOMRAM:
   410                           	opt stack 0
   411  000028                     ??_INTERRUPT_InterruptManager:
   412  000028                     
   413                           ; 1 bytes @ 0x0
   414  000028                     	ds	18
   415  00003A                     ??_isdigit:
   416  00003A                     ?___wmul:
   417                           	opt stack 0
   418  00003A                     EUSART1_Read@readValue:
   419                           	opt stack 0
   420  00003A                     EUSART1_Write@txData:
   421                           	opt stack 0
   422  00003A                     EUSART1_SetFramingErrorHandler@interruptHandler:
   423                           	opt stack 0
   424  00003A                     EUSART1_SetOverrunErrorHandler@interruptHandler:
   425                           	opt stack 0
   426  00003A                     EUSART1_SetErrorHandler@interruptHandler:
   427                           	opt stack 0
   428  00003A                     EUSART1_SetTxInterruptHandler@interruptHandler:
   429                           	opt stack 0
   430  00003A                     EUSART1_SetRxInterruptHandler@interruptHandler:
   431                           	opt stack 0
   432  00003A                     ___wmul@multiplier:
   433                           	opt stack 0
   434  00003A                     strcpy@to:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x12
   438  00003A                     	ds	1
   439  00003B                     ??_wait_segdata1:
   440  00003B                     ??_wait_segdata2:
   441  00003B                     _isdigit$946:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x13
   445  00003B                     	ds	1
   446  00003C                     isdigit@c:
   447                           	opt stack 0
   448  00003C                     ___wmul@multiplicand:
   449                           	opt stack 0
   450  00003C                     strcpy@from:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x14
   454  00003C                     	ds	2
   455  00003E                     ___wmul@product:
   456                           	opt stack 0
   457  00003E                     strcpy@cp:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x16
   461  00003E                     	ds	2
   462  000040                     wait_leddata@led_char:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x18
   466  000040                     	ds	1
   467  000041                     tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           ; 1 bytes @ 0x19
   477 ;;
   478 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   479 ;;
   480 ;; *************** function _main *****************
   481 ;; Defined at:
   482 ;;		line 136 in file "main.c"
   483 ;; Parameters:    Size  Location     Type
   484 ;;		None
   485 ;; Auto vars:     Size  Location     Type
   486 ;;		None
   487 ;; Return value:  Size  Location     Type
   488 ;;                  1    wreg      void 
   489 ;; Registers used:
   490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   491 ;; Tracked objects:
   492 ;;		On entry : 0/0
   493 ;;		On exit  : 0/0
   494 ;;		Unchanged: 0/0
   495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   500 ;;Total ram usage:        0 bytes
   501 ;; Hardware stack levels required when called:    7
   502 ;; This function calls:
   503 ;;		_EUSART1_Read
   504 ;;		_EUSART1_Write
   505 ;;		_EUSART1_is_rx_ready
   506 ;;		_SYSTEM_Initialize
   507 ;;		_show_seg
   508 ;;		_wait_leddata
   509 ;;		_wait_segdata1
   510 ;;		_wait_segdata2
   511 ;; This function is called by:
   512 ;;		Startup code after reset
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           	psect	text0
   517  0014AA                     __ptext0:
   518                           	opt stack 0
   519  0014AA                     _main:
   520                           	opt stack 24
   521                           
   522                           ;main.c: 139: SYSTEM_Initialize();
   523                           
   524                           ;incstack = 0
   525  0014AA  EC1A  F00B         	call	_SYSTEM_Initialize	;wreg free
   526                           
   527                           ;main.c: 146: (INTCONbits.GIE = 1);
   528  0014AE  8EF2               	bsf	intcon,7,c	;volatile
   529                           
   530                           ;main.c: 152: (INTCONbits.PEIE = 1);
   531  0014B0  8CF2               	bsf	intcon,6,c	;volatile
   532  0014B2                     
   533                           ;main.c: 158: {
   534                           ;main.c: 159: if(EUSART1_is_rx_ready())
   535  0014B2  EC2B  F00B         	call	_EUSART1_is_rx_ready	;wreg free
   536  0014B6  0900               	iorlw	0
   537  0014B8  B4D8               	btfsc	status,2,c
   538  0014BA  D017               	goto	l326
   539                           
   540                           ;main.c: 160: {
   541                           ;main.c: 161: rxData = EUSART1_Read();
   542  0014BC  EC31  F00A         	call	_EUSART1_Read	;wreg free
   543  0014C0  6E20               	movwf	_rxData,c	;volatile
   544                           
   545                           ;main.c: 162: if(rxData==0x3F)
   546  0014C2  0E3F               	movlw	63
   547  0014C4  1820               	xorwf	_rxData,w,c	;volatile
   548  0014C6  A4D8               	btfss	status,2,c
   549  0014C8  D005               	goto	l325
   550                           
   551                           ;main.c: 163: {
   552                           ;main.c: 164: EUSART1_Write(0x4C);
   553  0014CA  0E4C               	movlw	76
   554  0014CC  EC99  F00A         	call	_EUSART1_Write
   555                           
   556                           ;main.c: 165: wait_leddata();
   557  0014D0  EC36  F009         	call	_wait_leddata	;wreg free
   558  0014D4                     l325:
   559                           
   560                           ;main.c: 166: }
   561                           ;main.c: 167: if(rxData==0x3A)
   562  0014D4  0E3A               	movlw	58
   563  0014D6  1820               	xorwf	_rxData,w,c	;volatile
   564  0014D8  A4D8               	btfss	status,2,c
   565  0014DA  D007               	goto	l326
   566                           
   567                           ;main.c: 168: {
   568                           ;main.c: 169: EUSART1_Write(0x53);
   569  0014DC  0E53               	movlw	83
   570  0014DE  EC99  F00A         	call	_EUSART1_Write
   571                           
   572                           ;main.c: 170: wait_segdata1();
   573  0014E2  EC09  F00A         	call	_wait_segdata1	;wreg free
   574                           
   575                           ;main.c: 171: wait_segdata2();
   576  0014E6  ECB3  F009         	call	_wait_segdata2	;wreg free
   577  0014EA                     l326:
   578                           
   579                           ;main.c: 172: }
   580                           ;main.c: 173: }
   581                           ;main.c: 174: show_seg();
   582  0014EA  EC87  F008         	call	_show_seg	;wreg free
   583  0014EE  D7E1               	goto	l323
   584  0014F0                     __end_of_main:
   585                           	opt stack 0
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           intcon	equ	0xFF2
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           status	equ	0xFD8
   596                           
   597 ;; *************** function _wait_segdata2 *****************
   598 ;; Defined at:
   599 ;;		line 72 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   616 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   617 ;;Total ram usage:        3 bytes
   618 ;; Hardware stack levels used:    1
   619 ;; Hardware stack levels required when called:    5
   620 ;; This function calls:
   621 ;;		_EUSART1_Read
   622 ;;		_EUSART1_Write
   623 ;;		_EUSART1_is_rx_ready
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text1
   630  001366                     __ptext1:
   631                           	opt stack 0
   632  001366                     _wait_segdata2:
   633                           	opt stack 25
   634                           
   635                           ;main.c: 75: {
   636                           ;main.c: 76: if(EUSART1_is_rx_ready())
   637                           
   638                           ;incstack = 0
   639                           ;main.c: 74: while(1)
   640  001366  EC2B  F00B         	call	_EUSART1_is_rx_ready	;wreg free
   641  00136A  0900               	iorlw	0
   642  00136C  B4D8               	btfsc	status,2,c
   643  00136E  D7FB               	goto	_wait_segdata2
   644                           
   645                           ;main.c: 77: {
   646                           ;main.c: 78: rxData = EUSART1_Read();
   647  001370  EC31  F00A         	call	_EUSART1_Read	;wreg free
   648  001374  6E20               	movwf	_rxData,c	;volatile
   649                           
   650                           ;main.c: 79: if(rxData!=0x3A)
   651  001376  0E3A               	movlw	58
   652  001378  1820               	xorwf	_rxData,w,c	;volatile
   653  00137A  B4D8               	btfsc	status,2,c
   654  00137C  D7F4               	goto	_wait_segdata2
   655                           
   656                           ;main.c: 80: {
   657                           ;main.c: 81: seg_value2=rxData;
   658  00137E  C020  F01E         	movff	_rxData,_seg_value2	;volatile
   659                           
   660                           ;main.c: 82: EUSART1_Write(0x32);
   661  001382  0E32               	movlw	50
   662  001384  EC99  F00A         	call	_EUSART1_Write
   663                           
   664                           ;main.c: 83: segg22=seg_value2<<4;
   665  001388  381E               	swapf	_seg_value2,w,c	;volatile
   666  00138A  0BF0               	andlw	240
   667  00138C  6E18               	movwf	_segg22,c
   668                           
   669                           ;main.c: 84: segg222=segg22>>4;
   670  00138E  3818               	swapf	_segg22,w,c
   671  001390  0B0F               	andlw	15
   672  001392  6E19               	movwf	_segg222,c
   673                           
   674                           ;main.c: 85: segg21=(seg_value2|0x0F)>>4;
   675  001394  501E               	movf	_seg_value2,w,c	;volatile
   676  001396  6E3B               	movwf	??_wait_segdata2& (0+255),c
   677  001398  6A3C               	clrf	(??_wait_segdata2+1)& (0+255),c
   678  00139A  0E0F               	movlw	15
   679  00139C  123B               	iorwf	??_wait_segdata2,f,c
   680  00139E  0E00               	movlw	0
   681  0013A0  123C               	iorwf	??_wait_segdata2+1,f,c
   682  0013A2  0E04               	movlw	4
   683  0013A4  6E3D               	movwf	(??_wait_segdata2+2)& (0+255),c
   684  0013A6                     u805:
   685  0013A6  343C               	rlcf	??_wait_segdata2+1,w,c
   686  0013A8  323C               	rrcf	??_wait_segdata2+1,f,c
   687  0013AA  323B               	rrcf	??_wait_segdata2,f,c
   688  0013AC  2E3D               	decfsz	(??_wait_segdata2+2)& (0+255),f,c
   689  0013AE  D7FB               	goto	u805
   690  0013B0  503B               	movf	??_wait_segdata2,w,c
   691  0013B2  6E1A               	movwf	_segg21,c
   692                           
   693                           ;main.c: 86: _delay((unsigned long)((1)*(1000000/4000.0)));
   694  0013B4  0E53               	movlw	83
   695  0013B6                     u1097:
   696  0013B6  2EE8               	decfsz	wreg,f,c
   697  0013B8  D7FE               	bra	u1097
   698  0013BA  F000               	nop	
   699                           
   700                           ;main.c: 87: break;
   701  0013BC  0012               	return	
   702  0013BE                     __end_of_wait_segdata2:
   703                           	opt stack 0
   704                           tblptru	equ	0xFF8
   705                           tblptrh	equ	0xFF7
   706                           tblptrl	equ	0xFF6
   707                           tablat	equ	0xFF5
   708                           intcon	equ	0xFF2
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           postdec1	equ	0xFE5
   712                           fsr1l	equ	0xFE1
   713                           status	equ	0xFD8
   714                           
   715 ;; *************** function _wait_segdata1 *****************
   716 ;; Defined at:
   717 ;;		line 50 in file "main.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;		None
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   733 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   734 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   735 ;;Total ram usage:        3 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; Hardware stack levels required when called:    5
   738 ;; This function calls:
   739 ;;		_EUSART1_Read
   740 ;;		_EUSART1_Write
   741 ;;		_EUSART1_is_rx_ready
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text2
   748  001412                     __ptext2:
   749                           	opt stack 0
   750  001412                     _wait_segdata1:
   751                           	opt stack 25
   752                           
   753                           ;main.c: 53: {
   754                           ;main.c: 54: if(EUSART1_is_rx_ready())
   755                           
   756                           ;incstack = 0
   757                           ;main.c: 52: while(1)
   758  001412  EC2B  F00B         	call	_EUSART1_is_rx_ready	;wreg free
   759  001416  0900               	iorlw	0
   760  001418  B4D8               	btfsc	status,2,c
   761  00141A  D7FB               	goto	_wait_segdata1
   762                           
   763                           ;main.c: 55: {
   764                           ;main.c: 56: rxData = EUSART1_Read();
   765  00141C  EC31  F00A         	call	_EUSART1_Read	;wreg free
   766  001420  6E20               	movwf	_rxData,c	;volatile
   767                           
   768                           ;main.c: 57: if(rxData!=0x3A)
   769  001422  0E3A               	movlw	58
   770  001424  1820               	xorwf	_rxData,w,c	;volatile
   771  001426  B4D8               	btfsc	status,2,c
   772  001428  D7F4               	goto	_wait_segdata1
   773                           
   774                           ;main.c: 58: {
   775                           ;main.c: 61: seg_value1=rxData;
   776  00142A  C020  F01F         	movff	_rxData,_seg_value1	;volatile
   777                           
   778                           ;main.c: 62: EUSART1_Write(0x31);
   779  00142E  0E31               	movlw	49
   780  001430  EC99  F00A         	call	_EUSART1_Write
   781                           
   782                           ;main.c: 63: segg12=seg_value1<<4;
   783  001434  381F               	swapf	_seg_value1,w,c	;volatile
   784  001436  0BF0               	andlw	240
   785  001438  6E1B               	movwf	_segg12,c
   786                           
   787                           ;main.c: 64: segg122=segg12>>4;
   788  00143A  381B               	swapf	_segg12,w,c
   789  00143C  0B0F               	andlw	15
   790  00143E  6E1C               	movwf	_segg122,c
   791                           
   792                           ;main.c: 65: segg11=(seg_value1|0x0F)>>4;
   793  001440  501F               	movf	_seg_value1,w,c	;volatile
   794  001442  6E3B               	movwf	??_wait_segdata1& (0+255),c
   795  001444  6A3C               	clrf	(??_wait_segdata1+1)& (0+255),c
   796  001446  0E0F               	movlw	15
   797  001448  123B               	iorwf	??_wait_segdata1,f,c
   798  00144A  0E00               	movlw	0
   799  00144C  123C               	iorwf	??_wait_segdata1+1,f,c
   800  00144E  0E04               	movlw	4
   801  001450  6E3D               	movwf	(??_wait_segdata1+2)& (0+255),c
   802  001452                     u775:
   803  001452  343C               	rlcf	??_wait_segdata1+1,w,c
   804  001454  323C               	rrcf	??_wait_segdata1+1,f,c
   805  001456  323B               	rrcf	??_wait_segdata1,f,c
   806  001458  2E3D               	decfsz	(??_wait_segdata1+2)& (0+255),f,c
   807  00145A  D7FB               	goto	u775
   808  00145C  503B               	movf	??_wait_segdata1,w,c
   809  00145E  6E1D               	movwf	_segg11,c
   810                           
   811                           ;main.c: 66: break;
   812  001460  0012               	return	
   813  001462                     __end_of_wait_segdata1:
   814                           	opt stack 0
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           intcon	equ	0xFF2
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           postdec1	equ	0xFE5
   823                           fsr1l	equ	0xFE1
   824                           status	equ	0xFD8
   825                           
   826 ;; *************** function _EUSART1_Write *****************
   827 ;; Defined at:
   828 ;;		line 173 in file "mcc_generated_files/eusart1.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  txData          1    wreg     unsigned char 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  txData          1   18[COMRAM] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;Total ram usage:        1 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    4
   849 ;; This function calls:
   850 ;;		Nothing
   851 ;; This function is called by:
   852 ;;		_wait_segdata1
   853 ;;		_wait_segdata2
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text3
   859  001532                     __ptext3:
   860                           	opt stack 0
   861  001532                     _EUSART1_Write:
   862                           	opt stack 25
   863                           
   864                           ;incstack = 0
   865                           ;EUSART1_Write@txData stored from wreg
   866  001532  6E3A               	movwf	EUSART1_Write@txData,c
   867  001534                     
   868                           ;eusart1.c: 176: {
   869                           
   870                           ;eusart1.c: 175: while(0 == eusart1TxBufferRemaining)
   871  001534  504B               	movf	_eusart1TxBufferRemaining,w,c	;volatile
   872  001536  B4D8               	btfsc	status,2,c
   873  001538  D7FD               	goto	l1401
   874                           
   875                           ;eusart1.c: 177: }
   876                           ;eusart1.c: 179: if(0 == PIE1bits.TX1IE)
   877  00153A  B89D               	btfsc	3997,4,c	;volatile
   878  00153C  D003               	goto	l100
   879                           
   880                           ;eusart1.c: 180: {
   881                           ;eusart1.c: 181: TXREG1 = txData;
   882  00153E  C03A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
   883                           
   884                           ;eusart1.c: 182: }
   885  001542  D012               	goto	l101
   886  001544                     l100:
   887                           
   888                           ;eusart1.c: 183: else
   889                           ;eusart1.c: 184: {
   890                           ;eusart1.c: 185: PIE1bits.TX1IE = 0;
   891  001544  989D               	bcf	3997,4,c	;volatile
   892                           
   893                           ;eusart1.c: 186: eusart1TxBuffer[eusart1TxHead++] = txData;
   894  001546  5027               	movf	_eusart1TxHead,w,c	;volatile
   895  001548  0D01               	mullw	1
   896  00154A  0E70               	movlw	low _eusart1TxBuffer
   897  00154C  24F3               	addwf	prodl,w,c
   898  00154E  6ED9               	movwf	fsr2l,c
   899  001550  0E00               	movlw	high _eusart1TxBuffer
   900  001552  20F4               	addwfc	prodh,w,c
   901  001554  6EDA               	movwf	fsr2h,c
   902  001556  C03A  FFDF         	movff	EUSART1_Write@txData,indf2
   903  00155A  2A27               	incf	_eusart1TxHead,f,c	;volatile
   904                           
   905                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
   906  00155C  0E0F               	movlw	15
   907  00155E  6427               	cpfsgt	_eusart1TxHead,c	;volatile
   908  001560  D002               	goto	l102
   909                           
   910                           ;eusart1.c: 188: {
   911                           ;eusart1.c: 189: eusart1TxHead = 0;
   912  001562  0E00               	movlw	0
   913  001564  6E27               	movwf	_eusart1TxHead,c	;volatile
   914  001566                     l102:
   915                           
   916                           ;eusart1.c: 190: }
   917                           ;eusart1.c: 191: eusart1TxBufferRemaining--;
   918  001566  064B               	decf	_eusart1TxBufferRemaining,f,c	;volatile
   919  001568                     l101:
   920                           
   921                           ;eusart1.c: 192: }
   922                           ;eusart1.c: 193: PIE1bits.TX1IE = 1;
   923  001568  889D               	bsf	3997,4,c	;volatile
   924  00156A  0012               	return		;funcret
   925  00156C                     __end_of_EUSART1_Write:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           prodh	equ	0xFF4
   932                           prodl	equ	0xFF3
   933                           intcon	equ	0xFF2
   934                           postinc0	equ	0xFEE
   935                           wreg	equ	0xFE8
   936                           postdec1	equ	0xFE5
   937                           fsr1l	equ	0xFE1
   938                           indf2	equ	0xFDF
   939                           fsr2h	equ	0xFDA
   940                           fsr2l	equ	0xFD9
   941                           status	equ	0xFD8
   942                           
   943 ;; *************** function _wait_leddata *****************
   944 ;; Defined at:
   945 ;;		line 23 in file "main.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;		None
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  led_char        1   24[COMRAM] unsigned char 
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   962 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   963 ;;Total ram usage:        4 bytes
   964 ;; Hardware stack levels used:    1
   965 ;; Hardware stack levels required when called:    6
   966 ;; This function calls:
   967 ;;		_EUSART1_Read
   968 ;;		_EUSART1_is_rx_ready
   969 ;;		_atoi
   970 ;;		_strcpy
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text4
   977  00126C                     __ptext4:
   978                           	opt stack 0
   979  00126C                     _wait_leddata:
   980                           	opt stack 24
   981                           
   982                           ;main.c: 25: char led_char=0;
   983                           
   984                           ;incstack = 0
   985  00126C  0E00               	movlw	0
   986  00126E  6E40               	movwf	wait_leddata@led_char,c
   987  001270                     
   988                           ;main.c: 27: {
   989                           ;main.c: 28: if(EUSART1_is_rx_ready())
   990  001270  EC2B  F00B         	call	_EUSART1_is_rx_ready	;wreg free
   991  001274  0900               	iorlw	0
   992  001276  B4D8               	btfsc	status,2,c
   993  001278  D7FB               	goto	l289
   994                           
   995                           ;main.c: 29: {
   996                           ;main.c: 30: rxData = EUSART1_Read();
   997  00127A  EC31  F00A         	call	_EUSART1_Read	;wreg free
   998  00127E  6E20               	movwf	_rxData,c	;volatile
   999                           
  1000                           ;main.c: 31: if(rxData!=0x3f)
  1001  001280  0E3F               	movlw	63
  1002  001282  1820               	xorwf	_rxData,w,c	;volatile
  1003  001284  B4D8               	btfsc	status,2,c
  1004  001286  D7F4               	goto	l289
  1005                           
  1006                           ;main.c: 32: {
  1007                           ;main.c: 35: led_value=rxData;
  1008  001288  C020  F021         	movff	_rxData,_led_value	;volatile
  1009                           
  1010                           ;main.c: 36: LATA=led_value;
  1011  00128C  C021  FF89         	movff	_led_value,3977	;volatile
  1012                           
  1013                           ;main.c: 37: if(led_value==0x37)
  1014  001290  0E37               	movlw	55
  1015  001292  1821               	xorwf	_led_value,w,c	;volatile
  1016  001294  A4D8               	btfss	status,2,c
  1017  001296  D00E               	goto	l292
  1018                           
  1019                           ;main.c: 38: strcpy(led_char, "7");
  1020  001298  5040               	movf	wait_leddata@led_char,w,c
  1021  00129A  0100               	movlb	0	; () banked
  1022  00129C  6F98               	movwf	??_wait_leddata& (0+255),b
  1023  00129E  6B99               	clrf	(??_wait_leddata+1)& (0+255),b
  1024  0012A0  C098  F03A         	movff	??_wait_leddata,strcpy@to
  1025  0012A4  C099  F03B         	movff	??_wait_leddata+1,strcpy@to+1
  1026  0012A8  0E01               	movlw	low STR_1
  1027  0012AA  6E3C               	movwf	strcpy@from,c
  1028  0012AC  0E10               	movlw	high STR_1
  1029  0012AE  6E3D               	movwf	strcpy@from+1,c
  1030  0012B0  ECB6  F00A         	call	_strcpy	;wreg free
  1031  0012B4                     l292:
  1032                           
  1033                           ;main.c: 40: i=atoi(led_char);
  1034  0012B4  5040               	movf	wait_leddata@led_char,w,c
  1035  0012B6  0100               	movlb	0	; () banked
  1036  0012B8  6F98               	movwf	??_wait_leddata& (0+255),b
  1037  0012BA  6B99               	clrf	(??_wait_leddata+1)& (0+255),b
  1038  0012BC  6B9A               	clrf	(??_wait_leddata+2)& (0+255),b
  1039  0012BE  C098  F090         	movff	??_wait_leddata,atoi@s
  1040  0012C2  C099  F091         	movff	??_wait_leddata+1,atoi@s+1
  1041  0012C6  C09A  F092         	movff	??_wait_leddata+2,atoi@s+2
  1042  0012CA  EC02  F008         	call	_atoi	;wreg free
  1043  0012CE  C090  F013         	movff	?_atoi,_i
  1044  0012D2  C091  F014         	movff	?_atoi+1,_i+1
  1045                           
  1046                           ;main.c: 41: _delay((unsigned long)((5000)*(1000000/4000.0)));
  1047  0012D6  0E07               	movlw	7
  1048  0012D8  0100               	movlb	0	; () banked
  1049  0012DA  6F99               	movwf	(??_wait_leddata+1)& (0+255),b
  1050  0012DC  0E58               	movlw	88
  1051  0012DE  6F98               	movwf	??_wait_leddata& (0+255),b
  1052  0012E0  0E59               	movlw	89
  1053  0012E2                     u1107:
  1054  0012E2  2EE8               	decfsz	wreg,f,c
  1055  0012E4  D7FE               	bra	u1107
  1056  0012E6  2F98               	decfsz	??_wait_leddata& (0+255),f,b
  1057  0012E8  D7FC               	bra	u1107
  1058  0012EA  2F99               	decfsz	(??_wait_leddata+1)& (0+255),f,b
  1059  0012EC  D7FA               	bra	u1107
  1060  0012EE  D000               	nop2	
  1061                           
  1062                           ;main.c: 42: break;
  1063  0012F0  0012               	return	
  1064  0012F2                     __end_of_wait_leddata:
  1065                           	opt stack 0
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           prodh	equ	0xFF4
  1071                           prodl	equ	0xFF3
  1072                           intcon	equ	0xFF2
  1073                           postinc0	equ	0xFEE
  1074                           wreg	equ	0xFE8
  1075                           postdec1	equ	0xFE5
  1076                           fsr1l	equ	0xFE1
  1077                           indf2	equ	0xFDF
  1078                           fsr2h	equ	0xFDA
  1079                           fsr2l	equ	0xFD9
  1080                           status	equ	0xFD8
  1081                           
  1082 ;; *************** function _strcpy *****************
  1083 ;; Defined at:
  1084 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;  to              2   18[COMRAM] PTR unsigned char 
  1087 ;;		 -> RAM(3895), 
  1088 ;;  from            2   20[COMRAM] PTR const unsigned char 
  1089 ;;		 -> STR_1(2), 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  cp              2   22[COMRAM] PTR unsigned char 
  1092 ;;		 -> RAM(3895), 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  2   18[COMRAM] PTR unsigned char 
  1095 ;; Registers used:
  1096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1103 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1105 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1106 ;;Total ram usage:        6 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; Hardware stack levels required when called:    4
  1109 ;; This function calls:
  1110 ;;		Nothing
  1111 ;; This function is called by:
  1112 ;;		_wait_leddata
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text5
  1117  00156C                     __ptext5:
  1118                           	opt stack 0
  1119  00156C                     _strcpy:
  1120                           	opt stack 25
  1121                           
  1122                           ;incstack = 0
  1123  00156C  C03A  F03E         	movff	strcpy@to,strcpy@cp
  1124  001570  C03B  F03F         	movff	strcpy@to+1,strcpy@cp+1
  1125  001574  D004               	goto	l897
  1126  001576  4A3E               	infsnz	strcpy@cp,f,c
  1127  001578  2A3F               	incf	strcpy@cp+1,f,c
  1128  00157A  4A3C               	infsnz	strcpy@from,f,c
  1129  00157C  2A3D               	incf	strcpy@from+1,f,c
  1130  00157E                     l897:
  1131  00157E  C03C  FFF6         	movff	strcpy@from,tblptrl
  1132  001582  C03D  FFF7         	movff	strcpy@from+1,tblptrh
  1133  001586                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1134  001586  6AF8               	clrf	tblptru,c
  1135  001588                     	endif
  1136  001588                     	if	0	;tblptru may be non-zero
  1137  001588                     	endif
  1138  001588  C03E  FFD9         	movff	strcpy@cp,fsr2l
  1139  00158C  C03F  FFDA         	movff	strcpy@cp+1,fsr2h
  1140  001590  0008               	tblrd		*
  1141  001592  CFF5 FFDF          	movff	tablat,indf2
  1142  001596  50DF               	movf	indf2,w,c
  1143  001598  B4D8               	btfsc	status,2,c
  1144  00159A  0012               	return	
  1145  00159C  D7EC               	goto	l898
  1146  00159E                     __end_of_strcpy:
  1147                           	opt stack 0
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           prodh	equ	0xFF4
  1153                           prodl	equ	0xFF3
  1154                           intcon	equ	0xFF2
  1155                           postinc0	equ	0xFEE
  1156                           wreg	equ	0xFE8
  1157                           postdec1	equ	0xFE5
  1158                           fsr1l	equ	0xFE1
  1159                           indf2	equ	0xFDF
  1160                           fsr2h	equ	0xFDA
  1161                           fsr2l	equ	0xFD9
  1162                           status	equ	0xFD8
  1163                           
  1164 ;; *************** function _atoi *****************
  1165 ;; Defined at:
  1166 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;  s               3    0[BANK0 ] PTR const unsigned char 
  1169 ;;		 -> ROM(65535), 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  a               2    6[BANK0 ] int 
  1172 ;;  sign            1    5[BANK0 ] unsigned char 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  2    0[BANK0 ] int 
  1175 ;; Registers used:
  1176 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1182 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1183 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;Total ram usage:        8 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; Hardware stack levels required when called:    5
  1189 ;; This function calls:
  1190 ;;		___wmul
  1191 ;;		_isdigit
  1192 ;; This function is called by:
  1193 ;;		_wait_leddata
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text6
  1198  001004                     __ptext6:
  1199                           	opt stack 0
  1200  001004                     _atoi:
  1201                           	opt stack 24
  1202                           
  1203                           ;incstack = 0
  1204  001004  D007               	goto	l493
  1205  001006  0100               	movlb	0	; () banked
  1206  001008  0E01               	movlw	1
  1207  00100A  2790               	addwf	atoi@s& (0+255),f,b
  1208  00100C  0E00               	movlw	0
  1209  00100E  2391               	addwfc	(atoi@s+1)& (0+255),f,b
  1210  001010  0E00               	movlw	0
  1211  001012  2392               	addwfc	(atoi@s+2)& (0+255),f,b
  1212  001014                     l493:
  1213                           
  1214                           ; BSR set to: 0
  1215  001014  C090  FFF6         	movff	atoi@s,tblptrl
  1216  001018  C091  FFF7         	movff	atoi@s+1,tblptrh
  1217  00101C  C092  FFF8         	movff	atoi@s+2,tblptru
  1218  001020  0008               	tblrd		*
  1219  001022  50F5               	movf	tablat,w,c
  1220  001024  0A20               	xorlw	32
  1221  001026  B4D8               	btfsc	status,2,c
  1222  001028  D7EE               	goto	l494
  1223  00102A  C090  FFF6         	movff	atoi@s,tblptrl
  1224  00102E  C091  FFF7         	movff	atoi@s+1,tblptrh
  1225  001032  C092  FFF8         	movff	atoi@s+2,tblptru
  1226  001036  0008               	tblrd		*
  1227  001038  50F5               	movf	tablat,w,c
  1228  00103A  0A09               	xorlw	9
  1229  00103C  B4D8               	btfsc	status,2,c
  1230  00103E  D7E3               	goto	l494
  1231  001040  0E00               	movlw	0
  1232  001042  0100               	movlb	0	; () banked
  1233  001044  6F97               	movwf	(atoi@a+1)& (0+255),b
  1234  001046  0E00               	movlw	0
  1235  001048  6F96               	movwf	atoi@a& (0+255),b
  1236  00104A  0E00               	movlw	0
  1237  00104C  6F95               	movwf	atoi@sign& (0+255),b
  1238                           
  1239                           ; BSR set to: 0
  1240  00104E  C090  FFF6         	movff	atoi@s,tblptrl
  1241  001052  C091  FFF7         	movff	atoi@s+1,tblptrh
  1242  001056  C092  FFF8         	movff	atoi@s+2,tblptru
  1243  00105A  0008               	tblrd		*
  1244  00105C  50F5               	movf	tablat,w,c
  1245  00105E  0A2D               	xorlw	45
  1246  001060  A4D8               	btfss	status,2,c
  1247  001062  D002               	goto	l496
  1248                           
  1249                           ; BSR set to: 0
  1250  001064  2B95               	incf	atoi@sign& (0+255),f,b
  1251  001066  D02B               	goto	l1669
  1252  001068                     l496:
  1253                           
  1254                           ; BSR set to: 0
  1255                           
  1256                           ; BSR set to: 0
  1257  001068  C090  FFF6         	movff	atoi@s,tblptrl
  1258  00106C  C091  FFF7         	movff	atoi@s+1,tblptrh
  1259  001070  C092  FFF8         	movff	atoi@s+2,tblptru
  1260  001074  0008               	tblrd		*
  1261  001076  50F5               	movf	tablat,w,c
  1262  001078  0A2B               	xorlw	43
  1263  00107A  A4D8               	btfss	status,2,c
  1264  00107C  D026               	goto	l499
  1265  00107E  D01F               	goto	l1669
  1266  001080                     
  1267                           ; BSR set to: 0
  1268  001080  C096  F03A         	movff	atoi@a,___wmul@multiplier
  1269  001084  C097  F03B         	movff	atoi@a+1,___wmul@multiplier+1
  1270  001088  0E00               	movlw	0
  1271  00108A  6E3D               	movwf	___wmul@multiplicand+1,c
  1272  00108C  0E0A               	movlw	10
  1273  00108E  6E3C               	movwf	___wmul@multiplicand,c
  1274  001090  ECE6  F00A         	call	___wmul	;wreg free
  1275  001094  C090  FFF6         	movff	atoi@s,tblptrl
  1276  001098  C091  FFF7         	movff	atoi@s+1,tblptrh
  1277  00109C  C092  FFF8         	movff	atoi@s+2,tblptru
  1278  0010A0  0008               	tblrd		*
  1279  0010A2  50F5               	movf	tablat,w,c
  1280  0010A4  0100               	movlb	0	; () banked
  1281  0010A6  6F93               	movwf	??_atoi& (0+255),b
  1282  0010A8  6B94               	clrf	(??_atoi+1)& (0+255),b
  1283  0010AA  503A               	movf	?___wmul,w,c
  1284  0010AC  2793               	addwf	??_atoi& (0+255),f,b
  1285  0010AE  503B               	movf	?___wmul+1,w,c
  1286  0010B0  2394               	addwfc	(??_atoi+1)& (0+255),f,b
  1287  0010B2  0ED0               	movlw	208
  1288  0010B4  2593               	addwf	??_atoi& (0+255),w,b
  1289  0010B6  6F96               	movwf	atoi@a& (0+255),b
  1290  0010B8  0EFF               	movlw	255
  1291  0010BA  2194               	addwfc	(??_atoi+1)& (0+255),w,b
  1292  0010BC  6F97               	movwf	(atoi@a+1)& (0+255),b
  1293  0010BE                     l1669:
  1294                           
  1295                           ; BSR set to: 0
  1296  0010BE  0E01               	movlw	1
  1297  0010C0  2790               	addwf	atoi@s& (0+255),f,b
  1298  0010C2  0E00               	movlw	0
  1299  0010C4  2391               	addwfc	(atoi@s+1)& (0+255),f,b
  1300  0010C6  0E00               	movlw	0
  1301  0010C8  2392               	addwfc	(atoi@s+2)& (0+255),f,b
  1302  0010CA                     l499:
  1303                           
  1304                           ; BSR set to: 0
  1305                           
  1306                           ; BSR set to: 0
  1307  0010CA  C090  FFF6         	movff	atoi@s,tblptrl
  1308  0010CE  C091  FFF7         	movff	atoi@s+1,tblptrh
  1309  0010D2  C092  FFF8         	movff	atoi@s+2,tblptru
  1310  0010D6  0008               	tblrd		*
  1311  0010D8  50F5               	movf	tablat,w,c
  1312  0010DA  EC0B  F00B         	call	_isdigit
  1313  0010DE  B0D8               	btfsc	status,0,c
  1314  0010E0  D7CF               	goto	l500
  1315  0010E2  0100               	movlb	0	; () banked
  1316  0010E4  5195               	movf	atoi@sign& (0+255),w,b
  1317  0010E6  B4D8               	btfsc	status,2,c
  1318  0010E8  D00D               	goto	l502
  1319                           
  1320                           ; BSR set to: 0
  1321  0010EA  C096  F093         	movff	atoi@a,??_atoi
  1322  0010EE  C097  F094         	movff	atoi@a+1,??_atoi+1
  1323  0010F2  1F93               	comf	??_atoi& (0+255),f,b
  1324  0010F4  1F94               	comf	(??_atoi+1)& (0+255),f,b
  1325  0010F6  4B93               	infsnz	??_atoi& (0+255),f,b
  1326  0010F8  2B94               	incf	(??_atoi+1)& (0+255),f,b
  1327  0010FA  C093  F090         	movff	??_atoi,?_atoi
  1328  0010FE  C094  F091         	movff	??_atoi+1,?_atoi+1
  1329  001102  0012               	return	
  1330  001104                     l502:
  1331                           
  1332                           ; BSR set to: 0
  1333  001104  C096  F090         	movff	atoi@a,?_atoi
  1334  001108  C097  F091         	movff	atoi@a+1,?_atoi+1
  1335                           
  1336                           ; BSR set to: 0
  1337  00110C  0012               	return		;funcret
  1338  00110E                     __end_of_atoi:
  1339                           	opt stack 0
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           prodh	equ	0xFF4
  1345                           prodl	equ	0xFF3
  1346                           intcon	equ	0xFF2
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           postdec1	equ	0xFE5
  1350                           fsr1l	equ	0xFE1
  1351                           indf2	equ	0xFDF
  1352                           fsr2h	equ	0xFDA
  1353                           fsr2l	equ	0xFD9
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _isdigit *****************
  1357 ;; Defined at:
  1358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;  c               1    wreg     unsigned char 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;  c               1   20[COMRAM] unsigned char 
  1363 ;; Return value:  Size  Location     Type
  1364 ;;		None               void
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, status,0
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;Total ram usage:        3 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    4
  1379 ;; This function calls:
  1380 ;;		Nothing
  1381 ;; This function is called by:
  1382 ;;		_atoi
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text7
  1387  001616                     __ptext7:
  1388                           	opt stack 0
  1389  001616                     _isdigit:
  1390                           	opt stack 24
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;incstack = 0
  1394                           ;isdigit@c stored from wreg
  1395  001616  6E3C               	movwf	isdigit@c,c
  1396  001618  0E00               	movlw	0
  1397  00161A  6E3B               	movwf	_isdigit$946,c
  1398  00161C  0E3A               	movlw	58
  1399  00161E  603C               	cpfslt	isdigit@c,c
  1400  001620  D005               	goto	l674
  1401  001622  0E2F               	movlw	47
  1402  001624  643C               	cpfsgt	isdigit@c,c
  1403  001626  D002               	goto	l674
  1404  001628  0E01               	movlw	1
  1405  00162A  6E3B               	movwf	_isdigit$946,c
  1406  00162C                     l674:
  1407  00162C  C03B  F03A         	movff	_isdigit$946,??_isdigit
  1408  001630  303A               	rrcf	??_isdigit,w,c
  1409  001632  0012               	return	
  1410  001634                     __end_of_isdigit:
  1411                           	opt stack 0
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           prodh	equ	0xFF4
  1417                           prodl	equ	0xFF3
  1418                           intcon	equ	0xFF2
  1419                           postinc0	equ	0xFEE
  1420                           wreg	equ	0xFE8
  1421                           postdec1	equ	0xFE5
  1422                           fsr1l	equ	0xFE1
  1423                           indf2	equ	0xFDF
  1424                           fsr2h	equ	0xFDA
  1425                           fsr2l	equ	0xFD9
  1426                           status	equ	0xFD8
  1427                           
  1428 ;; *************** function ___wmul *****************
  1429 ;; Defined at:
  1430 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;  multiplier      2   18[COMRAM] unsigned int 
  1433 ;;  multiplicand    2   20[COMRAM] unsigned int 
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;  product         2   22[COMRAM] unsigned int 
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  2   18[COMRAM] unsigned int 
  1438 ;; Registers used:
  1439 ;;		wreg, status,2, status,0, prodl, prodh
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1449 ;;Total ram usage:        6 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    4
  1452 ;; This function calls:
  1453 ;;		Nothing
  1454 ;; This function is called by:
  1455 ;;		_atoi
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text8
  1460  0015CC                     __ptext8:
  1461                           	opt stack 0
  1462  0015CC                     ___wmul:
  1463                           	opt stack 24
  1464                           
  1465                           ;incstack = 0
  1466  0015CC  503A               	movf	___wmul@multiplier,w,c
  1467  0015CE  023C               	mulwf	___wmul@multiplicand,c
  1468  0015D0  CFF3 F03E          	movff	prodl,___wmul@product
  1469  0015D4  CFF4 F03F          	movff	prodh,___wmul@product+1
  1470  0015D8  503A               	movf	___wmul@multiplier,w,c
  1471  0015DA  023D               	mulwf	___wmul@multiplicand+1,c
  1472  0015DC  50F3               	movf	prodl,w,c
  1473  0015DE  263F               	addwf	___wmul@product+1,f,c
  1474  0015E0  503B               	movf	___wmul@multiplier+1,w,c
  1475  0015E2  023C               	mulwf	___wmul@multiplicand,c
  1476  0015E4  50F3               	movf	prodl,w,c
  1477  0015E6  263F               	addwf	___wmul@product+1,f,c
  1478  0015E8  C03E  F03A         	movff	___wmul@product,?___wmul
  1479  0015EC  C03F  F03B         	movff	___wmul@product+1,?___wmul+1
  1480  0015F0  0012               	return	
  1481  0015F2                     __end_of___wmul:
  1482                           	opt stack 0
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           prodh	equ	0xFF4
  1488                           prodl	equ	0xFF3
  1489                           intcon	equ	0xFF2
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           postdec1	equ	0xFE5
  1493                           fsr1l	equ	0xFE1
  1494                           indf2	equ	0xFDF
  1495                           fsr2h	equ	0xFDA
  1496                           fsr2l	equ	0xFD9
  1497                           status	equ	0xFD8
  1498                           
  1499 ;; *************** function _EUSART1_is_rx_ready *****************
  1500 ;; Defined at:
  1501 ;;		line 137 in file "mcc_generated_files/eusart1.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      unsigned char 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1519 ;;Total ram usage:        0 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; Hardware stack levels required when called:    4
  1522 ;; This function calls:
  1523 ;;		Nothing
  1524 ;; This function is called by:
  1525 ;;		_wait_leddata
  1526 ;;		_wait_segdata1
  1527 ;;		_wait_segdata2
  1528 ;;		_main
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text9
  1533  001656                     __ptext9:
  1534                           	opt stack 0
  1535  001656                     _EUSART1_is_rx_ready:
  1536                           	opt stack 25
  1537                           
  1538                           ;eusart1.c: 139: return (eusart1RxCount ? 1 : 0);
  1539                           
  1540                           ;incstack = 0
  1541  001656  5023               	movf	_eusart1RxCount,w,c	;volatile
  1542  001658  B4D8               	btfsc	status,2,c
  1543  00165A  D002               	goto	u40
  1544  00165C  0E01               	movlw	1
  1545  00165E  0012               	return	
  1546  001660                     u40:
  1547  001660  0E00               	movlw	0
  1548  001662  0012               	return	
  1549  001664                     __end_of_EUSART1_is_rx_ready:
  1550                           	opt stack 0
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           prodh	equ	0xFF4
  1556                           prodl	equ	0xFF3
  1557                           intcon	equ	0xFF2
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1l	equ	0xFE1
  1562                           indf2	equ	0xFDF
  1563                           fsr2h	equ	0xFDA
  1564                           fsr2l	equ	0xFD9
  1565                           status	equ	0xFD8
  1566                           
  1567 ;; *************** function _EUSART1_Read *****************
  1568 ;; Defined at:
  1569 ;;		line 151 in file "mcc_generated_files/eusart1.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;		None
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;  readValue       1   18[COMRAM] unsigned char 
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      unsigned char 
  1576 ;; Registers used:
  1577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;Total ram usage:        1 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    4
  1590 ;; This function calls:
  1591 ;;		Nothing
  1592 ;; This function is called by:
  1593 ;;		_wait_leddata
  1594 ;;		_wait_segdata1
  1595 ;;		_wait_segdata2
  1596 ;;		_main
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           	psect	text10
  1601  001462                     __ptext10:
  1602                           	opt stack 0
  1603  001462                     _EUSART1_Read:
  1604                           	opt stack 25
  1605                           
  1606                           ;eusart1.c: 153: uint8_t readValue = 0;
  1607                           
  1608                           ;incstack = 0
  1609  001462  0E00               	movlw	0
  1610  001464  6E3A               	movwf	EUSART1_Read@readValue,c
  1611  001466                     
  1612                           ;eusart1.c: 156: {
  1613  001466  5023               	movf	_eusart1RxCount,w,c	;volatile
  1614  001468  B4D8               	btfsc	status,2,c
  1615  00146A  D7FD               	goto	l91
  1616                           
  1617                           ;eusart1.c: 157: }
  1618                           ;eusart1.c: 159: eusart1RxLastError = eusart1RxStatusBuffer[eusart1RxTail];
  1619  00146C  5024               	movf	_eusart1RxTail,w,c	;volatile
  1620  00146E  0D01               	mullw	1
  1621  001470  0E01               	movlw	low _eusart1RxStatusBuffer
  1622  001472  24F3               	addwf	prodl,w,c
  1623  001474  6ED9               	movwf	fsr2l,c
  1624  001476  0E00               	movlw	high _eusart1RxStatusBuffer
  1625  001478  20F4               	addwfc	prodh,w,c
  1626  00147A  6EDA               	movwf	fsr2h,c
  1627  00147C  50DF               	movf	indf2,w,c
  1628  00147E  6E22               	movwf	_eusart1RxLastError,c	;volatile
  1629                           
  1630                           ;eusart1.c: 161: readValue = eusart1RxBuffer[eusart1RxTail++];
  1631  001480  5024               	movf	_eusart1RxTail,w,c	;volatile
  1632  001482  0D01               	mullw	1
  1633  001484  0E60               	movlw	low _eusart1RxBuffer
  1634  001486  24F3               	addwf	prodl,w,c
  1635  001488  6ED9               	movwf	fsr2l,c
  1636  00148A  0E00               	movlw	high _eusart1RxBuffer
  1637  00148C  20F4               	addwfc	prodh,w,c
  1638  00148E  6EDA               	movwf	fsr2h,c
  1639  001490  50DF               	movf	indf2,w,c
  1640  001492  6E3A               	movwf	EUSART1_Read@readValue,c
  1641  001494  2A24               	incf	_eusart1RxTail,f,c	;volatile
  1642                           
  1643                           ;eusart1.c: 162: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  1644  001496  0E0F               	movlw	15
  1645  001498  6424               	cpfsgt	_eusart1RxTail,c	;volatile
  1646  00149A  D002               	goto	l93
  1647                           
  1648                           ;eusart1.c: 163: {
  1649                           ;eusart1.c: 164: eusart1RxTail = 0;
  1650  00149C  0E00               	movlw	0
  1651  00149E  6E24               	movwf	_eusart1RxTail,c	;volatile
  1652  0014A0                     l93:
  1653                           
  1654                           ;eusart1.c: 165: }
  1655                           ;eusart1.c: 166: PIE1bits.RC1IE = 0;
  1656  0014A0  9A9D               	bcf	3997,5,c	;volatile
  1657                           
  1658                           ;eusart1.c: 167: eusart1RxCount--;
  1659  0014A2  0623               	decf	_eusart1RxCount,f,c	;volatile
  1660                           
  1661                           ;eusart1.c: 168: PIE1bits.RC1IE = 1;
  1662  0014A4  8A9D               	bsf	3997,5,c	;volatile
  1663                           
  1664                           ;eusart1.c: 170: return readValue;
  1665  0014A6  503A               	movf	EUSART1_Read@readValue,w,c
  1666  0014A8  0012               	return	
  1667  0014AA                     __end_of_EUSART1_Read:
  1668                           	opt stack 0
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           prodh	equ	0xFF4
  1674                           prodl	equ	0xFF3
  1675                           intcon	equ	0xFF2
  1676                           postinc0	equ	0xFEE
  1677                           wreg	equ	0xFE8
  1678                           postdec1	equ	0xFE5
  1679                           fsr1l	equ	0xFE1
  1680                           indf2	equ	0xFDF
  1681                           fsr2h	equ	0xFDA
  1682                           fsr2l	equ	0xFD9
  1683                           status	equ	0xFD8
  1684                           
  1685 ;; *************** function _show_seg *****************
  1686 ;; Defined at:
  1687 ;;		line 94 in file "main.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;		None
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;		None
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      void 
  1694 ;; Registers used:
  1695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1705 ;;Total ram usage:        0 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    4
  1708 ;; This function calls:
  1709 ;;		Nothing
  1710 ;; This function is called by:
  1711 ;;		_main
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text11
  1716  00110E                     __ptext11:
  1717                           	opt stack 0
  1718  00110E                     _show_seg:
  1719                           	opt stack 26
  1720                           
  1721                           ;main.c: 96: if (c_scan==0)
  1722                           
  1723                           ;incstack = 0
  1724  00110E  5017               	movf	_c_scan,w,c	;volatile
  1725  001110  A4D8               	btfss	status,2,c
  1726  001112  D014               	goto	l314
  1727                           
  1728                           ;main.c: 97: {
  1729                           ;main.c: 98: LATD=0xff;
  1730  001114  688C               	setf	3980,c	;volatile
  1731                           
  1732                           ;main.c: 99: LATC=0x00;
  1733  001116  0E00               	movlw	0
  1734  001118  6E8B               	movwf	3979,c	;volatile
  1735                           
  1736                           ;main.c: 100: LATC=0x08;
  1737  00111A  0E08               	movlw	8
  1738  00111C  6E8B               	movwf	3979,c	;volatile
  1739                           
  1740                           ;main.c: 101: LATD=Seg[segg11];
  1741  00111E  501D               	movf	_segg11,w,c
  1742  001120  0D01               	mullw	1
  1743  001122  0E80               	movlw	low _Seg
  1744  001124  24F3               	addwf	prodl,w,c
  1745  001126  6ED9               	movwf	fsr2l,c
  1746  001128  0E00               	movlw	high _Seg
  1747  00112A  20F4               	addwfc	prodh,w,c
  1748  00112C  6EDA               	movwf	fsr2h,c
  1749  00112E  50DF               	movf	indf2,w,c
  1750  001130  6E8C               	movwf	3980,c	;volatile
  1751                           
  1752                           ;main.c: 102: _delay((unsigned long)((2)*(1000000/4000.0)));
  1753  001132  0EA6               	movlw	166
  1754  001134                     u1117:
  1755  001134  2EE8               	decfsz	wreg,f,c
  1756  001136  D7FE               	bra	u1117
  1757  001138  D000               	nop2	
  1758                           
  1759                           ;main.c: 103: c_scan++;
  1760  00113A  2A17               	incf	_c_scan,f,c	;volatile
  1761  00113C                     l314:
  1762                           
  1763                           ;main.c: 104: }
  1764                           ;main.c: 105: if (c_scan==1)
  1765  00113C  0417               	decf	_c_scan,w,c	;volatile
  1766  00113E  A4D8               	btfss	status,2,c
  1767  001140  D014               	goto	l315
  1768                           
  1769                           ;main.c: 106: {
  1770                           ;main.c: 107: LATD=0xff;
  1771  001142  688C               	setf	3980,c	;volatile
  1772                           
  1773                           ;main.c: 108: LATC=0x00;
  1774  001144  0E00               	movlw	0
  1775  001146  6E8B               	movwf	3979,c	;volatile
  1776                           
  1777                           ;main.c: 109: LATC=0x04;
  1778  001148  0E04               	movlw	4
  1779  00114A  6E8B               	movwf	3979,c	;volatile
  1780                           
  1781                           ;main.c: 110: LATD=Seg[segg122];
  1782  00114C  501C               	movf	_segg122,w,c
  1783  00114E  0D01               	mullw	1
  1784  001150  0E80               	movlw	low _Seg
  1785  001152  24F3               	addwf	prodl,w,c
  1786  001154  6ED9               	movwf	fsr2l,c
  1787  001156  0E00               	movlw	high _Seg
  1788  001158  20F4               	addwfc	prodh,w,c
  1789  00115A  6EDA               	movwf	fsr2h,c
  1790  00115C  50DF               	movf	indf2,w,c
  1791  00115E  6E8C               	movwf	3980,c	;volatile
  1792                           
  1793                           ;main.c: 111: _delay((unsigned long)((2)*(1000000/4000.0)));
  1794  001160  0EA6               	movlw	166
  1795  001162                     u1127:
  1796  001162  2EE8               	decfsz	wreg,f,c
  1797  001164  D7FE               	bra	u1127
  1798  001166  D000               	nop2	
  1799                           
  1800                           ;main.c: 112: c_scan++;
  1801  001168  2A17               	incf	_c_scan,f,c	;volatile
  1802  00116A                     l315:
  1803                           
  1804                           ;main.c: 113: }
  1805                           ;main.c: 114: if (c_scan==2)
  1806  00116A  0E02               	movlw	2
  1807  00116C  1817               	xorwf	_c_scan,w,c	;volatile
  1808  00116E  A4D8               	btfss	status,2,c
  1809  001170  D014               	goto	l316
  1810                           
  1811                           ;main.c: 115: {
  1812                           ;main.c: 116: LATD=0xff;
  1813  001172  688C               	setf	3980,c	;volatile
  1814                           
  1815                           ;main.c: 117: LATC=0x00;
  1816  001174  0E00               	movlw	0
  1817  001176  6E8B               	movwf	3979,c	;volatile
  1818                           
  1819                           ;main.c: 118: LATC=0x02;
  1820  001178  0E02               	movlw	2
  1821  00117A  6E8B               	movwf	3979,c	;volatile
  1822                           
  1823                           ;main.c: 119: LATD=Seg[segg21];
  1824  00117C  501A               	movf	_segg21,w,c
  1825  00117E  0D01               	mullw	1
  1826  001180  0E80               	movlw	low _Seg
  1827  001182  24F3               	addwf	prodl,w,c
  1828  001184  6ED9               	movwf	fsr2l,c
  1829  001186  0E00               	movlw	high _Seg
  1830  001188  20F4               	addwfc	prodh,w,c
  1831  00118A  6EDA               	movwf	fsr2h,c
  1832  00118C  50DF               	movf	indf2,w,c
  1833  00118E  6E8C               	movwf	3980,c	;volatile
  1834                           
  1835                           ;main.c: 120: _delay((unsigned long)((2)*(1000000/4000.0)));
  1836  001190  0EA6               	movlw	166
  1837  001192                     u1137:
  1838  001192  2EE8               	decfsz	wreg,f,c
  1839  001194  D7FE               	bra	u1137
  1840  001196  D000               	nop2	
  1841                           
  1842                           ;main.c: 121: c_scan++;
  1843  001198  2A17               	incf	_c_scan,f,c	;volatile
  1844  00119A                     l316:
  1845                           
  1846                           ;main.c: 122: }
  1847                           ;main.c: 123: if (c_scan==3)
  1848  00119A  0E03               	movlw	3
  1849  00119C  1817               	xorwf	_c_scan,w,c	;volatile
  1850  00119E  A4D8               	btfss	status,2,c
  1851  0011A0  0012               	return	
  1852                           
  1853                           ;main.c: 124: {
  1854                           ;main.c: 125: LATD=0xff;
  1855  0011A2  688C               	setf	3980,c	;volatile
  1856                           
  1857                           ;main.c: 126: LATC=0x00;
  1858  0011A4  0E00               	movlw	0
  1859  0011A6  6E8B               	movwf	3979,c	;volatile
  1860                           
  1861                           ;main.c: 127: LATC=0x01;
  1862  0011A8  0E01               	movlw	1
  1863  0011AA  6E8B               	movwf	3979,c	;volatile
  1864                           
  1865                           ;main.c: 128: LATD=Seg[segg222];
  1866  0011AC  5019               	movf	_segg222,w,c
  1867  0011AE  0D01               	mullw	1
  1868  0011B0  0E80               	movlw	low _Seg
  1869  0011B2  24F3               	addwf	prodl,w,c
  1870  0011B4  6ED9               	movwf	fsr2l,c
  1871  0011B6  0E00               	movlw	high _Seg
  1872  0011B8  20F4               	addwfc	prodh,w,c
  1873  0011BA  6EDA               	movwf	fsr2h,c
  1874  0011BC  50DF               	movf	indf2,w,c
  1875  0011BE  6E8C               	movwf	3980,c	;volatile
  1876                           
  1877                           ;main.c: 129: _delay((unsigned long)((2)*(1000000/4000.0)));
  1878  0011C0  0EA6               	movlw	166
  1879  0011C2                     u1147:
  1880  0011C2  2EE8               	decfsz	wreg,f,c
  1881  0011C4  D7FE               	bra	u1147
  1882  0011C6  D000               	nop2	
  1883                           
  1884                           ;main.c: 130: c_scan=0;
  1885  0011C8  0E00               	movlw	0
  1886  0011CA  6E17               	movwf	_c_scan,c	;volatile
  1887  0011CC  0012               	return	
  1888  0011CE                     __end_of_show_seg:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           prodh	equ	0xFF4
  1895                           prodl	equ	0xFF3
  1896                           intcon	equ	0xFF2
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           indf2	equ	0xFDF
  1902                           fsr2h	equ	0xFDA
  1903                           fsr2l	equ	0xFD9
  1904                           status	equ	0xFD8
  1905                           
  1906 ;; *************** function _SYSTEM_Initialize *****************
  1907 ;; Defined at:
  1908 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2, status,0, cstack
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;Total ram usage:        0 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    6
  1929 ;; This function calls:
  1930 ;;		_EUSART1_Initialize
  1931 ;;		_INTERRUPT_Initialize
  1932 ;;		_OSCILLATOR_Initialize
  1933 ;;		_PIN_MANAGER_Initialize
  1934 ;; This function is called by:
  1935 ;;		_main
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text12
  1940  001634                     __ptext12:
  1941                           	opt stack 0
  1942  001634                     _SYSTEM_Initialize:
  1943                           	opt stack 24
  1944                           
  1945                           ;mcc.c: 53: INTERRUPT_Initialize();
  1946                           
  1947                           ;incstack = 0
  1948  001634  EC58  F00B         	call	_INTERRUPT_Initialize	;wreg free
  1949                           
  1950                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  1951  001638  EC78  F00A         	call	_PIN_MANAGER_Initialize	;wreg free
  1952                           
  1953                           ;mcc.c: 55: OSCILLATOR_Initialize();
  1954  00163C  EC32  F00B         	call	_OSCILLATOR_Initialize	;wreg free
  1955                           
  1956                           ;mcc.c: 56: EUSART1_Initialize();
  1957  001640  EC79  F009         	call	_EUSART1_Initialize	;wreg free
  1958  001644  0012               	return		;funcret
  1959  001646                     __end_of_SYSTEM_Initialize:
  1960                           	opt stack 0
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           prodh	equ	0xFF4
  1966                           prodl	equ	0xFF3
  1967                           intcon	equ	0xFF2
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postdec1	equ	0xFE5
  1971                           fsr1l	equ	0xFE1
  1972                           indf2	equ	0xFDF
  1973                           fsr2h	equ	0xFDA
  1974                           fsr2l	equ	0xFD9
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _PIN_MANAGER_Initialize *****************
  1978 ;; Defined at:
  1979 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;		None
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;Total ram usage:        0 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    4
  2000 ;; This function calls:
  2001 ;;		Nothing
  2002 ;; This function is called by:
  2003 ;;		_SYSTEM_Initialize
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text13
  2008  0014F0                     __ptext13:
  2009                           	opt stack 0
  2010  0014F0                     _PIN_MANAGER_Initialize:
  2011                           	opt stack 25
  2012                           
  2013                           ;pin_manager.c: 60: LATE = 0x00;
  2014                           
  2015                           ;incstack = 0
  2016  0014F0  0E00               	movlw	0
  2017  0014F2  6E8D               	movwf	3981,c	;volatile
  2018                           
  2019                           ;pin_manager.c: 61: LATD = 0x00;
  2020  0014F4  0E00               	movlw	0
  2021  0014F6  6E8C               	movwf	3980,c	;volatile
  2022                           
  2023                           ;pin_manager.c: 62: LATA = 0x00;
  2024  0014F8  0E00               	movlw	0
  2025  0014FA  6E89               	movwf	3977,c	;volatile
  2026                           
  2027                           ;pin_manager.c: 63: LATB = 0x00;
  2028  0014FC  0E00               	movlw	0
  2029  0014FE  6E8A               	movwf	3978,c	;volatile
  2030                           
  2031                           ;pin_manager.c: 64: LATC = 0x00;
  2032  001500  0E00               	movlw	0
  2033  001502  6E8B               	movwf	3979,c	;volatile
  2034                           
  2035                           ;pin_manager.c: 69: TRISE = 0x07;
  2036  001504  0E07               	movlw	7
  2037  001506  6E96               	movwf	3990,c	;volatile
  2038                           
  2039                           ;pin_manager.c: 70: TRISA = 0x00;
  2040  001508  0E00               	movlw	0
  2041  00150A  6E92               	movwf	3986,c	;volatile
  2042                           
  2043                           ;pin_manager.c: 71: TRISB = 0xFF;
  2044  00150C  6893               	setf	3987,c	;volatile
  2045                           
  2046                           ;pin_manager.c: 72: TRISC = 0xB0;
  2047  00150E  0EB0               	movlw	176
  2048  001510  6E94               	movwf	3988,c	;volatile
  2049                           
  2050                           ;pin_manager.c: 73: TRISD = 0x00;
  2051  001512  0E00               	movlw	0
  2052  001514  6E95               	movwf	3989,c	;volatile
  2053                           
  2054                           ;pin_manager.c: 78: ANSELD = 0xFF;
  2055  001516  010F               	movlb	15	; () banked
  2056  001518  693B               	setf	59,b	;volatile
  2057                           
  2058                           ;pin_manager.c: 79: ANSELC = 0x3C;
  2059  00151A  0E3C               	movlw	60
  2060  00151C  6F3A               	movwf	58,b	;volatile
  2061                           
  2062                           ;pin_manager.c: 80: ANSELB = 0x3F;
  2063  00151E  0E3F               	movlw	63
  2064  001520  6F39               	movwf	57,b	;volatile
  2065                           
  2066                           ;pin_manager.c: 81: ANSELE = 0x07;
  2067  001522  0E07               	movlw	7
  2068  001524  6F3C               	movwf	60,b	;volatile
  2069                           
  2070                           ;pin_manager.c: 82: ANSELA = 0x2F;
  2071  001526  0E2F               	movlw	47
  2072  001528  6F38               	movwf	56,b	;volatile
  2073                           
  2074                           ;pin_manager.c: 87: WPUB = 0x00;
  2075  00152A  0E00               	movlw	0
  2076  00152C  6E61               	movwf	3937,c	;volatile
  2077                           
  2078                           ; BSR set to: 15
  2079                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 1;
  2080  00152E  8EF1               	bsf	intcon2,7,c	;volatile
  2081                           
  2082                           ; BSR set to: 15
  2083  001530  0012               	return		;funcret
  2084  001532                     __end_of_PIN_MANAGER_Initialize:
  2085                           	opt stack 0
  2086                           tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           prodh	equ	0xFF4
  2091                           prodl	equ	0xFF3
  2092                           intcon	equ	0xFF2
  2093                           intcon2	equ	0xFF1
  2094                           postinc0	equ	0xFEE
  2095                           wreg	equ	0xFE8
  2096                           postdec1	equ	0xFE5
  2097                           fsr1l	equ	0xFE1
  2098                           indf2	equ	0xFDF
  2099                           fsr2h	equ	0xFDA
  2100                           fsr2l	equ	0xFD9
  2101                           status	equ	0xFD8
  2102                           
  2103 ;; *************** function _OSCILLATOR_Initialize *****************
  2104 ;; Defined at:
  2105 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;Total ram usage:        0 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    4
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_SYSTEM_Initialize
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text14
  2134  001664                     __ptext14:
  2135                           	opt stack 0
  2136  001664                     _OSCILLATOR_Initialize:
  2137                           	opt stack 25
  2138                           
  2139                           ;mcc.c: 62: OSCCON = 0x30;
  2140                           
  2141                           ; BSR set to: 15
  2142                           ;incstack = 0
  2143  001664  0E30               	movlw	48
  2144  001666  6ED3               	movwf	4051,c	;volatile
  2145                           
  2146                           ;mcc.c: 64: OSCCON2 = 0x04;
  2147  001668  0E04               	movlw	4
  2148  00166A  6ED2               	movwf	4050,c	;volatile
  2149                           
  2150                           ;mcc.c: 66: OSCTUNE = 0x00;
  2151  00166C  0E00               	movlw	0
  2152  00166E  6E9B               	movwf	3995,c	;volatile
  2153  001670  0012               	return		;funcret
  2154  001672                     __end_of_OSCILLATOR_Initialize:
  2155                           	opt stack 0
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           prodh	equ	0xFF4
  2161                           prodl	equ	0xFF3
  2162                           intcon	equ	0xFF2
  2163                           intcon2	equ	0xFF1
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           postdec1	equ	0xFE5
  2167                           fsr1l	equ	0xFE1
  2168                           indf2	equ	0xFDF
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _INTERRUPT_Initialize *****************
  2174 ;; Defined at:
  2175 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		None
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    4
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_SYSTEM_Initialize
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text15
  2204  0016B0                     __ptext15:
  2205                           	opt stack 0
  2206  0016B0                     _INTERRUPT_Initialize:
  2207                           	opt stack 25
  2208                           
  2209                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  2210                           
  2211                           ;incstack = 0
  2212  0016B0  9ED0               	bcf	4048,7,c	;volatile
  2213  0016B2  0012               	return		;funcret
  2214  0016B4                     __end_of_INTERRUPT_Initialize:
  2215                           	opt stack 0
  2216                           tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           prodh	equ	0xFF4
  2221                           prodl	equ	0xFF3
  2222                           intcon	equ	0xFF2
  2223                           intcon2	equ	0xFF1
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           postdec1	equ	0xFE5
  2227                           fsr1l	equ	0xFE1
  2228                           indf2	equ	0xFDF
  2229                           fsr2h	equ	0xFDA
  2230                           fsr2l	equ	0xFD9
  2231                           status	equ	0xFD8
  2232                           
  2233 ;; *************** function _EUSART1_Initialize *****************
  2234 ;; Defined at:
  2235 ;;		line 88 in file "mcc_generated_files/eusart1.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, status,2, status,0, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;Total ram usage:        0 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    5
  2256 ;; This function calls:
  2257 ;;		_EUSART1_SetErrorHandler
  2258 ;;		_EUSART1_SetFramingErrorHandler
  2259 ;;		_EUSART1_SetOverrunErrorHandler
  2260 ;;		_EUSART1_SetRxInterruptHandler
  2261 ;;		_EUSART1_SetTxInterruptHandler
  2262 ;; This function is called by:
  2263 ;;		_SYSTEM_Initialize
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text16
  2268  0012F2                     __ptext16:
  2269                           	opt stack 0
  2270  0012F2                     _EUSART1_Initialize:
  2271                           	opt stack 24
  2272                           
  2273                           ;eusart1.c: 91: PIE1bits.RC1IE = 0;
  2274                           
  2275                           ;incstack = 0
  2276  0012F2  9A9D               	bcf	3997,5,c	;volatile
  2277                           
  2278                           ;eusart1.c: 92: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  2279  0012F4  0ECE               	movlw	low _EUSART1_Receive_ISR
  2280  0012F6  6E3A               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler,c
  2281  0012F8  0E11               	movlw	high _EUSART1_Receive_ISR
  2282  0012FA  6E3B               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1,c
  2283  0012FC  EC3E  F00B         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  2284                           
  2285                           ;eusart1.c: 93: PIE1bits.TX1IE = 0;
  2286  001300  989D               	bcf	3997,4,c	;volatile
  2287                           
  2288                           ;eusart1.c: 94: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  2289  001302  0E9E               	movlw	low _EUSART1_Transmit_ISR
  2290  001304  6E3A               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler,c
  2291  001306  0E15               	movlw	high _EUSART1_Transmit_ISR
  2292  001308  6E3B               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler+1,c
  2293  00130A  EC39  F00B         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  2294                           
  2295                           ;eusart1.c: 98: BAUDCON1 = 0x08;
  2296  00130E  0E08               	movlw	8
  2297  001310  6EB8               	movwf	4024,c	;volatile
  2298                           
  2299                           ;eusart1.c: 101: RCSTA1 = 0x90;
  2300  001312  0E90               	movlw	144
  2301  001314  6EAB               	movwf	4011,c	;volatile
  2302                           
  2303                           ;eusart1.c: 104: TXSTA1 = 0x24;
  2304  001316  0E24               	movlw	36
  2305  001318  6EAC               	movwf	4012,c	;volatile
  2306                           
  2307                           ;eusart1.c: 107: SPBRG1 = 0x19;
  2308  00131A  0E19               	movlw	25
  2309  00131C  6EAF               	movwf	4015,c	;volatile
  2310                           
  2311                           ;eusart1.c: 110: SPBRGH1 = 0x00;
  2312  00131E  0E00               	movlw	0
  2313  001320  6EB0               	movwf	4016,c	;volatile
  2314                           
  2315                           ;eusart1.c: 113: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
  2316  001322  0EB4               	movlw	low _EUSART1_DefaultFramingErrorHandler
  2317  001324  6E3A               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler,c
  2318  001326  0E16               	movlw	high _EUSART1_DefaultFramingErrorHandler
  2319  001328  6E3B               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler+1,c
  2320  00132A  EC48  F00B         	call	_EUSART1_SetFramingErrorHandler	;wreg free
  2321                           
  2322                           ;eusart1.c: 114: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
  2323  00132E  0EA4               	movlw	low _EUSART1_DefaultOverrunErrorHandler
  2324  001330  6E3A               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler,c
  2325  001332  0E16               	movlw	high _EUSART1_DefaultOverrunErrorHandler
  2326  001334  6E3B               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler+1,c
  2327  001336  EC43  F00B         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
  2328                           
  2329                           ;eusart1.c: 115: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
  2330  00133A  0EAA               	movlw	low _EUSART1_DefaultErrorHandler
  2331  00133C  6E3A               	movwf	EUSART1_SetErrorHandler@interruptHandler,c
  2332  00133E  0E16               	movlw	high _EUSART1_DefaultErrorHandler
  2333  001340  6E3B               	movwf	EUSART1_SetErrorHandler@interruptHandler+1,c
  2334  001342  EC4D  F00B         	call	_EUSART1_SetErrorHandler	;wreg free
  2335                           
  2336                           ;eusart1.c: 117: eusart1RxLastError.status = 0;
  2337  001346  0E00               	movlw	0
  2338  001348  6E22               	movwf	_eusart1RxLastError,c	;volatile
  2339                           
  2340                           ;eusart1.c: 120: eusart1TxHead = 0;
  2341  00134A  0E00               	movlw	0
  2342  00134C  6E27               	movwf	_eusart1TxHead,c	;volatile
  2343                           
  2344                           ;eusart1.c: 121: eusart1TxTail = 0;
  2345  00134E  0E00               	movlw	0
  2346  001350  6E26               	movwf	_eusart1TxTail,c	;volatile
  2347                           
  2348                           ;eusart1.c: 122: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2349  001352  0E10               	movlw	16
  2350  001354  6E4B               	movwf	_eusart1TxBufferRemaining,c	;volatile
  2351                           
  2352                           ;eusart1.c: 124: eusart1RxHead = 0;
  2353  001356  0E00               	movlw	0
  2354  001358  6E25               	movwf	_eusart1RxHead,c	;volatile
  2355                           
  2356                           ;eusart1.c: 125: eusart1RxTail = 0;
  2357  00135A  0E00               	movlw	0
  2358  00135C  6E24               	movwf	_eusart1RxTail,c	;volatile
  2359                           
  2360                           ;eusart1.c: 126: eusart1RxCount = 0;
  2361  00135E  0E00               	movlw	0
  2362  001360  6E23               	movwf	_eusart1RxCount,c	;volatile
  2363                           
  2364                           ;eusart1.c: 129: PIE1bits.RC1IE = 1;
  2365  001362  8A9D               	bsf	3997,5,c	;volatile
  2366  001364  0012               	return		;funcret
  2367  001366                     __end_of_EUSART1_Initialize:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           intcon2	equ	0xFF1
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           postdec1	equ	0xFE5
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  2387 ;; Defined at:
  2388 ;;		line 276 in file "mcc_generated_files/eusart1.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  2391 ;;		 -> EUSART1_Transmit_ISR(1), 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2403 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;Total ram usage:        2 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    4
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_EUSART1_Initialize
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text17
  2418  001672                     __ptext17:
  2419                           	opt stack 0
  2420  001672                     _EUSART1_SetTxInterruptHandler:
  2421                           	opt stack 24
  2422                           
  2423                           ;eusart1.c: 277: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  2424                           
  2425                           ;incstack = 0
  2426  001672  C03A  F049         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  2427  001676  C03B  F04A         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  2428  00167A  0012               	return		;funcret
  2429  00167C                     __end_of_EUSART1_SetTxInterruptHandler:
  2430                           	opt stack 0
  2431                           tblptru	equ	0xFF8
  2432                           tblptrh	equ	0xFF7
  2433                           tblptrl	equ	0xFF6
  2434                           tablat	equ	0xFF5
  2435                           prodh	equ	0xFF4
  2436                           prodl	equ	0xFF3
  2437                           intcon	equ	0xFF2
  2438                           intcon2	equ	0xFF1
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           postdec1	equ	0xFE5
  2442                           fsr1l	equ	0xFE1
  2443                           indf2	equ	0xFDF
  2444                           fsr2h	equ	0xFDA
  2445                           fsr2l	equ	0xFD9
  2446                           status	equ	0xFD8
  2447                           
  2448 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  2449 ;; Defined at:
  2450 ;;		line 280 in file "mcc_generated_files/eusart1.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  2453 ;;		 -> EUSART1_Receive_ISR(1), 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2, status,0
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;Total ram usage:        2 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    4
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_EUSART1_Initialize
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text18
  2480  00167C                     __ptext18:
  2481                           	opt stack 0
  2482  00167C                     _EUSART1_SetRxInterruptHandler:
  2483                           	opt stack 24
  2484                           
  2485                           ;eusart1.c: 281: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  2486                           
  2487                           ;incstack = 0
  2488  00167C  C03A  F047         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  2489  001680  C03B  F048         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  2490  001684  0012               	return		;funcret
  2491  001686                     __end_of_EUSART1_SetRxInterruptHandler:
  2492                           	opt stack 0
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           prodh	equ	0xFF4
  2498                           prodl	equ	0xFF3
  2499                           intcon	equ	0xFF2
  2500                           intcon2	equ	0xFF1
  2501                           postinc0	equ	0xFEE
  2502                           wreg	equ	0xFE8
  2503                           postdec1	equ	0xFE5
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           fsr2h	equ	0xFDA
  2507                           fsr2l	equ	0xFD9
  2508                           status	equ	0xFD8
  2509                           
  2510 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
  2511 ;; Defined at:
  2512 ;;		line 268 in file "mcc_generated_files/eusart1.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  2515 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;		None
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, status,2, status,0
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;Total ram usage:        2 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    4
  2534 ;; This function calls:
  2535 ;;		Nothing
  2536 ;; This function is called by:
  2537 ;;		_EUSART1_Initialize
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           	psect	text19
  2542  001686                     __ptext19:
  2543                           	opt stack 0
  2544  001686                     _EUSART1_SetOverrunErrorHandler:
  2545                           	opt stack 24
  2546                           
  2547                           ;eusart1.c: 269: EUSART1_OverrunErrorHandler = interruptHandler;
  2548                           
  2549                           ;incstack = 0
  2550  001686  C03A  F043         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
  2551  00168A  C03B  F044         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
  2552  00168E  0012               	return		;funcret
  2553  001690                     __end_of_EUSART1_SetOverrunErrorHandler:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           prodh	equ	0xFF4
  2560                           prodl	equ	0xFF3
  2561                           intcon	equ	0xFF2
  2562                           intcon2	equ	0xFF1
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           postdec1	equ	0xFE5
  2566                           fsr1l	equ	0xFE1
  2567                           indf2	equ	0xFDF
  2568                           fsr2h	equ	0xFDA
  2569                           fsr2l	equ	0xFD9
  2570                           status	equ	0xFD8
  2571                           
  2572 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
  2573 ;; Defined at:
  2574 ;;		line 264 in file "mcc_generated_files/eusart1.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  2577 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  1    wreg      void 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;Total ram usage:        2 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    4
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_EUSART1_Initialize
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text20
  2604  001690                     __ptext20:
  2605                           	opt stack 0
  2606  001690                     _EUSART1_SetFramingErrorHandler:
  2607                           	opt stack 24
  2608                           
  2609                           ;eusart1.c: 265: EUSART1_FramingErrorHandler = interruptHandler;
  2610                           
  2611                           ;incstack = 0
  2612  001690  C03A  F045         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
  2613  001694  C03B  F046         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
  2614  001698  0012               	return		;funcret
  2615  00169A                     __end_of_EUSART1_SetFramingErrorHandler:
  2616                           	opt stack 0
  2617                           tblptru	equ	0xFF8
  2618                           tblptrh	equ	0xFF7
  2619                           tblptrl	equ	0xFF6
  2620                           tablat	equ	0xFF5
  2621                           prodh	equ	0xFF4
  2622                           prodl	equ	0xFF3
  2623                           intcon	equ	0xFF2
  2624                           intcon2	equ	0xFF1
  2625                           postinc0	equ	0xFEE
  2626                           wreg	equ	0xFE8
  2627                           postdec1	equ	0xFE5
  2628                           fsr1l	equ	0xFE1
  2629                           indf2	equ	0xFDF
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _EUSART1_SetErrorHandler *****************
  2635 ;; Defined at:
  2636 ;;		line 272 in file "mcc_generated_files/eusart1.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  2639 ;;		 -> EUSART1_DefaultErrorHandler(1), 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;Total ram usage:        2 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    4
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_EUSART1_Initialize
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text21
  2666  00169A                     __ptext21:
  2667                           	opt stack 0
  2668  00169A                     _EUSART1_SetErrorHandler:
  2669                           	opt stack 24
  2670                           
  2671                           ;eusart1.c: 273: EUSART1_ErrorHandler = interruptHandler;
  2672                           
  2673                           ;incstack = 0
  2674  00169A  C03A  F041         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
  2675  00169E  C03B  F042         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
  2676  0016A2  0012               	return		;funcret
  2677  0016A4                     __end_of_EUSART1_SetErrorHandler:
  2678                           	opt stack 0
  2679                           tblptru	equ	0xFF8
  2680                           tblptrh	equ	0xFF7
  2681                           tblptrl	equ	0xFF6
  2682                           tablat	equ	0xFF5
  2683                           prodh	equ	0xFF4
  2684                           prodl	equ	0xFF3
  2685                           intcon	equ	0xFF2
  2686                           intcon2	equ	0xFF1
  2687                           postinc0	equ	0xFEE
  2688                           wreg	equ	0xFE8
  2689                           postdec1	equ	0xFE5
  2690                           fsr1l	equ	0xFE1
  2691                           indf2	equ	0xFDF
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function _INTERRUPT_InterruptManager *****************
  2697 ;; Defined at:
  2698 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;		None
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;		None
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;Total ram usage:       18 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    3
  2719 ;; This function calls:
  2720 ;;		Absolute function
  2721 ;;		_EUSART1_Receive_ISR
  2722 ;;		_EUSART1_Transmit_ISR
  2723 ;; This function is called by:
  2724 ;;		Interrupt level 2
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	intcode
  2729  000008                     __pintcode:
  2730                           	opt stack 0
  2731  000008                     _INTERRUPT_InterruptManager:
  2732                           	opt stack 24
  2733                           
  2734                           ;incstack = 0
  2735  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2736  00000A  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
  2737  00000E  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2738  000012  CFE9 F02A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2739  000016  CFEA F02B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2740  00001A  CFE1 F02C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2741  00001E  CFE2 F02D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2742  000022  CFD9 F02E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2743  000026  CFDA F02F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2744  00002A  CFF3 F030          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2745  00002E  CFF4 F031          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2746  000032  CFF6 F032          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2747  000036  CFF7 F033          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2748  00003A  CFF8 F034          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2749  00003E  CFF5 F035          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2750  000042  C04D  F036         	movff	btemp,??_INTERRUPT_InterruptManager+14
  2751  000046  C04E  F037         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  2752  00004A  C04F  F038         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  2753  00004E  C050  F039         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  2754                           
  2755                           ;interrupt_manager.c: 61: if(INTCONbits.PEIE == 1)
  2756  000052  ACF2               	btfss	intcon,6,c	;volatile
  2757  000054  D019               	goto	i2u91_49
  2758                           
  2759                           ;interrupt_manager.c: 62: {
  2760                           ;interrupt_manager.c: 63: if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  2761  000056  B89D               	btfsc	3997,4,c	;volatile
  2762  000058  A89E               	btfss	3998,4,c	;volatile
  2763  00005A  D008               	goto	i2l165
  2764                           
  2765                           ;interrupt_manager.c: 64: {
  2766                           ;interrupt_manager.c: 65: EUSART1_TxDefaultInterruptHandler();
  2767  00005C  D801               	call	i2u88_48
  2768  00005E  D014               	goto	i2u91_49
  2769  000060                     i2u88_48:
  2770  000060  0005               	push	
  2771  000062  6EFA               	movwf	pclath,c
  2772  000064  5049               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  2773  000066  6EFD               	movwf	tosl,c
  2774  000068  504A               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  2775  00006A  D00A               	goto	L1
  2776  00006C                     i2l165:
  2777                           
  2778                           ;interrupt_manager.c: 67: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  2779  00006C  BA9D               	btfsc	3997,5,c	;volatile
  2780  00006E  AA9E               	btfss	3998,5,c	;volatile
  2781  000070  D00B               	goto	i2u91_49
  2782                           
  2783                           ;interrupt_manager.c: 68: {
  2784                           ;interrupt_manager.c: 69: EUSART1_RxDefaultInterruptHandler();
  2785  000072  D801               	call	i2u91_48
  2786  000074  D009               	goto	i2u91_49
  2787  000076                     i2u91_48:
  2788  000076  0005               	push	
  2789  000078  6EFA               	movwf	pclath,c
  2790  00007A  5047               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  2791  00007C  6EFD               	movwf	tosl,c
  2792  00007E  5048               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  2793  000080                     L1:
  2794  000080  6EFE               	movwf	tosh,c
  2795  000082  6AFF               	clrf	tosu,c
  2796  000084  50FA               	movf	pclath,w,c
  2797  000086  0012               	return		;indir
  2798  000088                     i2u91_49:
  2799                           
  2800                           ;interrupt_manager.c: 76: else
  2801                           ;interrupt_manager.c: 77: {
  2802                           
  2803                           ;interrupt_manager.c: 74: }
  2804                           ;interrupt_manager.c: 75: }
  2805                           
  2806                           ;interrupt_manager.c: 71: else
  2807                           ;interrupt_manager.c: 72: {
  2808                           
  2809                           ;interrupt_manager.c: 70: }
  2810  000088  C039  F050         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  2811  00008C  C038  F04F         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  2812  000090  C037  F04E         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  2813  000094  C036  F04D         	movff	??_INTERRUPT_InterruptManager+14,btemp
  2814  000098  C035  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2815  00009C  C034  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2816  0000A0  C033  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2817  0000A4  C032  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2818  0000A8  C031  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2819  0000AC  C030  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2820  0000B0  C02F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2821  0000B4  C02E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2822  0000B8  C02D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2823  0000BC  C02C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2824  0000C0  C02B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2825  0000C4  C02A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2826  0000C8  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2827  0000CC  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2828  0000D0  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2829  0000D2  0011               	retfie		f
  2830  0000D4                     __end_of_INTERRUPT_InterruptManager:
  2831                           	opt stack 0
  2832                           tosu	equ	0xFFF
  2833                           tosh	equ	0xFFE
  2834                           tosl	equ	0xFFD
  2835                           pclatu	equ	0xFFB
  2836                           pclath	equ	0xFFA
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           intcon2	equ	0xFF1
  2845                           postinc0	equ	0xFEE
  2846                           fsr0h	equ	0xFEA
  2847                           fsr0l	equ	0xFE9
  2848                           wreg	equ	0xFE8
  2849                           postdec1	equ	0xFE5
  2850                           fsr1h	equ	0xFE2
  2851                           fsr1l	equ	0xFE1
  2852                           indf2	equ	0xFDF
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _EUSART1_Transmit_ISR *****************
  2858 ;; Defined at:
  2859 ;;		line 197 in file "mcc_generated_files/eusart1.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_EUSART1_Initialize
  2883 ;;		_INTERRUPT_InterruptManager
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text23
  2888  00159E                     __ptext23:
  2889                           	opt stack 0
  2890  00159E                     _EUSART1_Transmit_ISR:
  2891                           	opt stack 26
  2892                           
  2893                           ;eusart1.c: 201: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  2894                           
  2895                           ;incstack = 0
  2896  00159E  0E10               	movlw	16
  2897  0015A0  604B               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  2898  0015A2  D012               	goto	i2l106
  2899                           
  2900                           ;eusart1.c: 202: {
  2901                           ;eusart1.c: 203: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  2902  0015A4  5026               	movf	_eusart1TxTail,w,c	;volatile
  2903  0015A6  0D01               	mullw	1
  2904  0015A8  0E70               	movlw	low _eusart1TxBuffer
  2905  0015AA  24F3               	addwf	prodl,w,c
  2906  0015AC  6ED9               	movwf	fsr2l,c
  2907  0015AE  0E00               	movlw	high _eusart1TxBuffer
  2908  0015B0  20F4               	addwfc	prodh,w,c
  2909  0015B2  6EDA               	movwf	fsr2h,c
  2910  0015B4  50DF               	movf	indf2,w,c
  2911  0015B6  6EAD               	movwf	4013,c	;volatile
  2912  0015B8  2A26               	incf	_eusart1TxTail,f,c	;volatile
  2913                           
  2914                           ;eusart1.c: 204: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  2915  0015BA  0E0F               	movlw	15
  2916  0015BC  6426               	cpfsgt	_eusart1TxTail,c	;volatile
  2917  0015BE  D002               	goto	i2l107
  2918                           
  2919                           ;eusart1.c: 205: {
  2920                           ;eusart1.c: 206: eusart1TxTail = 0;
  2921  0015C0  0E00               	movlw	0
  2922  0015C2  6E26               	movwf	_eusart1TxTail,c	;volatile
  2923  0015C4                     i2l107:
  2924                           
  2925                           ;eusart1.c: 207: }
  2926                           ;eusart1.c: 208: eusart1TxBufferRemaining++;
  2927  0015C4  2A4B               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  2928                           
  2929                           ;eusart1.c: 209: }
  2930  0015C6  0012               	return	
  2931  0015C8                     i2l106:
  2932                           
  2933                           ;eusart1.c: 210: else
  2934                           ;eusart1.c: 211: {
  2935                           ;eusart1.c: 212: PIE1bits.TX1IE = 0;
  2936  0015C8  989D               	bcf	3997,4,c	;volatile
  2937  0015CA  0012               	return	
  2938  0015CC                     __end_of_EUSART1_Transmit_ISR:
  2939                           	opt stack 0
  2940                           tosu	equ	0xFFF
  2941                           tosh	equ	0xFFE
  2942                           tosl	equ	0xFFD
  2943                           pclatu	equ	0xFFB
  2944                           pclath	equ	0xFFA
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           intcon	equ	0xFF2
  2952                           intcon2	equ	0xFF1
  2953                           postinc0	equ	0xFEE
  2954                           fsr0h	equ	0xFEA
  2955                           fsr0l	equ	0xFE9
  2956                           wreg	equ	0xFE8
  2957                           postdec1	equ	0xFE5
  2958                           fsr1h	equ	0xFE2
  2959                           fsr1l	equ	0xFE1
  2960                           indf2	equ	0xFDF
  2961                           fsr2h	equ	0xFDA
  2962                           fsr2l	equ	0xFD9
  2963                           status	equ	0xFD8
  2964                           
  2965 ;; *************** function _EUSART1_Receive_ISR *****************
  2966 ;; Defined at:
  2967 ;;		line 216 in file "mcc_generated_files/eusart1.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;Total ram usage:        0 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    2
  2988 ;; This function calls:
  2989 ;;		Absolute function
  2990 ;;		_EUSART1_DefaultErrorHandler
  2991 ;;		_EUSART1_DefaultFramingErrorHandler
  2992 ;;		_EUSART1_DefaultOverrunErrorHandler
  2993 ;;		_EUSART1_RxDataHandler
  2994 ;; This function is called by:
  2995 ;;		_EUSART1_Initialize
  2996 ;;		_INTERRUPT_InterruptManager
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text24
  3001  0011CE                     __ptext24:
  3002                           	opt stack 0
  3003  0011CE                     _EUSART1_Receive_ISR:
  3004                           	opt stack 24
  3005                           
  3006                           ;eusart1.c: 219: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
  3007                           
  3008                           ;incstack = 0
  3009  0011CE  5025               	movf	_eusart1RxHead,w,c	;volatile
  3010  0011D0  0D01               	mullw	1
  3011  0011D2  0E01               	movlw	low _eusart1RxStatusBuffer
  3012  0011D4  24F3               	addwf	prodl,w,c
  3013  0011D6  6ED9               	movwf	fsr2l,c
  3014  0011D8  0E00               	movlw	high _eusart1RxStatusBuffer
  3015  0011DA  20F4               	addwfc	prodh,w,c
  3016  0011DC  6EDA               	movwf	fsr2h,c
  3017  0011DE  0E00               	movlw	0
  3018  0011E0  6EDF               	movwf	indf2,c
  3019                           
  3020                           ;eusart1.c: 221: if(RCSTA1bits.FERR){
  3021  0011E2  A4AB               	btfss	4011,2,c	;volatile
  3022  0011E4  D014               	goto	i2u67_49
  3023                           
  3024                           ;eusart1.c: 222: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
  3025  0011E6  5025               	movf	_eusart1RxHead,w,c	;volatile
  3026  0011E8  0D01               	mullw	1
  3027  0011EA  0E01               	movlw	low _eusart1RxStatusBuffer
  3028  0011EC  24F3               	addwf	prodl,w,c
  3029  0011EE  6ED9               	movwf	fsr2l,c
  3030  0011F0  0E00               	movlw	high _eusart1RxStatusBuffer
  3031  0011F2  20F4               	addwfc	prodh,w,c
  3032  0011F4  6EDA               	movwf	fsr2h,c
  3033  0011F6  82DF               	bsf	indf2,1,c
  3034                           
  3035                           ;eusart1.c: 223: EUSART1_FramingErrorHandler();
  3036  0011F8  D801               	call	i2u67_48
  3037  0011FA  D009               	goto	i2u67_49
  3038  0011FC                     i2u67_48:
  3039  0011FC  0005               	push	
  3040  0011FE  6EFA               	movwf	pclath,c
  3041  001200  5045               	movf	_EUSART1_FramingErrorHandler,w,c
  3042  001202  6EFD               	movwf	tosl,c
  3043  001204  5046               	movf	_EUSART1_FramingErrorHandler+1,w,c
  3044  001206  6EFE               	movwf	tosh,c
  3045  001208  6AFF               	clrf	tosu,c
  3046  00120A  50FA               	movf	pclath,w,c
  3047  00120C  0012               	return		;indir
  3048  00120E                     i2u67_49:
  3049                           
  3050                           ;eusart1.c: 224: }
  3051                           ;eusart1.c: 226: if(RCSTA1bits.OERR){
  3052  00120E  A2AB               	btfss	4011,1,c	;volatile
  3053  001210  D014               	goto	i2u69_49
  3054                           
  3055                           ;eusart1.c: 227: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
  3056  001212  5025               	movf	_eusart1RxHead,w,c	;volatile
  3057  001214  0D01               	mullw	1
  3058  001216  0E01               	movlw	low _eusart1RxStatusBuffer
  3059  001218  24F3               	addwf	prodl,w,c
  3060  00121A  6ED9               	movwf	fsr2l,c
  3061  00121C  0E00               	movlw	high _eusart1RxStatusBuffer
  3062  00121E  20F4               	addwfc	prodh,w,c
  3063  001220  6EDA               	movwf	fsr2h,c
  3064  001222  84DF               	bsf	indf2,2,c
  3065                           
  3066                           ;eusart1.c: 228: EUSART1_OverrunErrorHandler();
  3067  001224  D801               	call	i2u69_48
  3068  001226  D009               	goto	i2u69_49
  3069  001228                     i2u69_48:
  3070  001228  0005               	push	
  3071  00122A  6EFA               	movwf	pclath,c
  3072  00122C  5043               	movf	_EUSART1_OverrunErrorHandler,w,c
  3073  00122E  6EFD               	movwf	tosl,c
  3074  001230  5044               	movf	_EUSART1_OverrunErrorHandler+1,w,c
  3075  001232  6EFE               	movwf	tosh,c
  3076  001234  6AFF               	clrf	tosu,c
  3077  001236  50FA               	movf	pclath,w,c
  3078  001238  0012               	return		;indir
  3079  00123A                     i2u69_49:
  3080                           
  3081                           ;eusart1.c: 229: }
  3082                           ;eusart1.c: 231: if(eusart1RxStatusBuffer[eusart1RxHead].status){
  3083  00123A  5025               	movf	_eusart1RxHead,w,c	;volatile
  3084  00123C  0D01               	mullw	1
  3085  00123E  0E01               	movlw	low _eusart1RxStatusBuffer
  3086  001240  24F3               	addwf	prodl,w,c
  3087  001242  6ED9               	movwf	fsr2l,c
  3088  001244  0E00               	movlw	high _eusart1RxStatusBuffer
  3089  001246  20F4               	addwfc	prodh,w,c
  3090  001248  6EDA               	movwf	fsr2h,c
  3091  00124A  50DF               	movf	indf2,w,c
  3092  00124C  B4D8               	btfsc	status,2,c
  3093  00124E  D00B               	goto	i2l114
  3094                           
  3095                           ;eusart1.c: 232: EUSART1_ErrorHandler();
  3096  001250  D801               	call	i2u71_48
  3097  001252  0012               	return	
  3098  001254                     i2u71_48:
  3099  001254  0005               	push	
  3100  001256  6EFA               	movwf	pclath,c
  3101  001258  5041               	movf	_EUSART1_ErrorHandler,w,c
  3102  00125A  6EFD               	movwf	tosl,c
  3103  00125C  5042               	movf	_EUSART1_ErrorHandler+1,w,c
  3104  00125E  6EFE               	movwf	tosh,c
  3105  001260  6AFF               	clrf	tosu,c
  3106  001262  50FA               	movf	pclath,w,c
  3107  001264  0012               	return		;indir
  3108  001266                     i2l114:
  3109                           
  3110                           ;eusart1.c: 234: EUSART1_RxDataHandler();
  3111  001266  ECF9  F00A         	call	_EUSART1_RxDataHandler	;wreg free
  3112  00126A  0012               	return	
  3113  00126C                     __end_of_EUSART1_Receive_ISR:
  3114                           	opt stack 0
  3115                           tosu	equ	0xFFF
  3116                           tosh	equ	0xFFE
  3117                           tosl	equ	0xFFD
  3118                           pclatu	equ	0xFFB
  3119                           pclath	equ	0xFFA
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           intcon2	equ	0xFF1
  3128                           postinc0	equ	0xFEE
  3129                           fsr0h	equ	0xFEA
  3130                           fsr0l	equ	0xFE9
  3131                           wreg	equ	0xFE8
  3132                           postdec1	equ	0xFE5
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
  3141 ;; Defined at:
  3142 ;;		line 252 in file "mcc_generated_files/eusart1.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;		None
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;		None
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		None
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;Total ram usage:        0 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; This function calls:
  3163 ;;		Nothing
  3164 ;; This function is called by:
  3165 ;;		_EUSART1_Initialize
  3166 ;;		_EUSART1_Receive_ISR
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text25
  3171  0016A4                     __ptext25:
  3172                           	opt stack 0
  3173  0016A4                     _EUSART1_DefaultOverrunErrorHandler:
  3174                           	opt stack 25
  3175                           
  3176                           ;eusart1.c: 255: RCSTA1bits.CREN = 0;
  3177                           
  3178                           ;incstack = 0
  3179  0016A4  98AB               	bcf	4011,4,c	;volatile
  3180                           
  3181                           ;eusart1.c: 256: RCSTA1bits.CREN = 1;
  3182  0016A6  88AB               	bsf	4011,4,c	;volatile
  3183  0016A8  0012               	return		;funcret
  3184  0016AA                     __end_of_EUSART1_DefaultOverrunErrorHandler:
  3185                           	opt stack 0
  3186                           tosu	equ	0xFFF
  3187                           tosh	equ	0xFFE
  3188                           tosl	equ	0xFFD
  3189                           pclatu	equ	0xFFB
  3190                           pclath	equ	0xFFA
  3191                           tblptru	equ	0xFF8
  3192                           tblptrh	equ	0xFF7
  3193                           tblptrl	equ	0xFF6
  3194                           tablat	equ	0xFF5
  3195                           prodh	equ	0xFF4
  3196                           prodl	equ	0xFF3
  3197                           intcon	equ	0xFF2
  3198                           intcon2	equ	0xFF1
  3199                           postinc0	equ	0xFEE
  3200                           fsr0h	equ	0xFEA
  3201                           fsr0l	equ	0xFE9
  3202                           wreg	equ	0xFE8
  3203                           postdec1	equ	0xFE5
  3204                           fsr1h	equ	0xFE2
  3205                           fsr1l	equ	0xFE1
  3206                           indf2	equ	0xFDF
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
  3212 ;; Defined at:
  3213 ;;		line 250 in file "mcc_generated_files/eusart1.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;		None
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;		None
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		None
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;Total ram usage:        0 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; This function calls:
  3234 ;;		Nothing
  3235 ;; This function is called by:
  3236 ;;		_EUSART1_Initialize
  3237 ;;		_EUSART1_Receive_ISR
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	text26
  3242  0016B4                     __ptext26:
  3243                           	opt stack 0
  3244  0016B4                     _EUSART1_DefaultFramingErrorHandler:
  3245                           	opt stack 25
  3246                           
  3247                           ;incstack = 0
  3248  0016B4  0012               	return		;funcret
  3249  0016B6                     __end_of_EUSART1_DefaultFramingErrorHandler:
  3250                           	opt stack 0
  3251                           tosu	equ	0xFFF
  3252                           tosh	equ	0xFFE
  3253                           tosl	equ	0xFFD
  3254                           pclatu	equ	0xFFB
  3255                           pclath	equ	0xFFA
  3256                           tblptru	equ	0xFF8
  3257                           tblptrh	equ	0xFF7
  3258                           tblptrl	equ	0xFF6
  3259                           tablat	equ	0xFF5
  3260                           prodh	equ	0xFF4
  3261                           prodl	equ	0xFF3
  3262                           intcon	equ	0xFF2
  3263                           intcon2	equ	0xFF1
  3264                           postinc0	equ	0xFEE
  3265                           fsr0h	equ	0xFEA
  3266                           fsr0l	equ	0xFE9
  3267                           wreg	equ	0xFE8
  3268                           postdec1	equ	0xFE5
  3269                           fsr1h	equ	0xFE2
  3270                           fsr1l	equ	0xFE1
  3271                           indf2	equ	0xFDF
  3272                           fsr2h	equ	0xFDA
  3273                           fsr2l	equ	0xFD9
  3274                           status	equ	0xFD8
  3275                           
  3276 ;; *************** function _EUSART1_DefaultErrorHandler *****************
  3277 ;; Defined at:
  3278 ;;		line 260 in file "mcc_generated_files/eusart1.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;		None
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;Total ram usage:        0 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    1
  3299 ;; This function calls:
  3300 ;;		_EUSART1_RxDataHandler
  3301 ;; This function is called by:
  3302 ;;		_EUSART1_Initialize
  3303 ;;		_EUSART1_Receive_ISR
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text27
  3308  0016AA                     __ptext27:
  3309                           	opt stack 0
  3310  0016AA                     _EUSART1_DefaultErrorHandler:
  3311                           	opt stack 24
  3312                           
  3313                           ;eusart1.c: 261: EUSART1_RxDataHandler();
  3314                           
  3315                           ;incstack = 0
  3316  0016AA  ECF9  F00A         	call	_EUSART1_RxDataHandler	;wreg free
  3317  0016AE  0012               	return		;funcret
  3318  0016B0                     __end_of_EUSART1_DefaultErrorHandler:
  3319                           	opt stack 0
  3320                           tosu	equ	0xFFF
  3321                           tosh	equ	0xFFE
  3322                           tosl	equ	0xFFD
  3323                           pclatu	equ	0xFFB
  3324                           pclath	equ	0xFFA
  3325                           tblptru	equ	0xFF8
  3326                           tblptrh	equ	0xFF7
  3327                           tblptrl	equ	0xFF6
  3328                           tablat	equ	0xFF5
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           intcon	equ	0xFF2
  3332                           intcon2	equ	0xFF1
  3333                           postinc0	equ	0xFEE
  3334                           fsr0h	equ	0xFEA
  3335                           fsr0l	equ	0xFE9
  3336                           wreg	equ	0xFE8
  3337                           postdec1	equ	0xFE5
  3338                           fsr1h	equ	0xFE2
  3339                           fsr1l	equ	0xFE1
  3340                           indf2	equ	0xFDF
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function _EUSART1_RxDataHandler *****************
  3346 ;; Defined at:
  3347 ;;		line 240 in file "mcc_generated_files/eusart1.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;Total ram usage:        0 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_EUSART1_Receive_ISR
  3371 ;;		_EUSART1_DefaultErrorHandler
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text28
  3376  0015F2                     __ptext28:
  3377                           	opt stack 0
  3378  0015F2                     _EUSART1_RxDataHandler:
  3379                           	opt stack 25
  3380                           
  3381                           ;eusart1.c: 242: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  3382                           
  3383                           ;incstack = 0
  3384  0015F2  5025               	movf	_eusart1RxHead,w,c	;volatile
  3385  0015F4  0D01               	mullw	1
  3386  0015F6  0E60               	movlw	low _eusart1RxBuffer
  3387  0015F8  24F3               	addwf	prodl,w,c
  3388  0015FA  6ED9               	movwf	fsr2l,c
  3389  0015FC  0E00               	movlw	high _eusart1RxBuffer
  3390  0015FE  20F4               	addwfc	prodh,w,c
  3391  001600  6EDA               	movwf	fsr2h,c
  3392  001602  CFAE FFDF          	movff	4014,indf2	;volatile
  3393  001606  2A25               	incf	_eusart1RxHead,f,c	;volatile
  3394                           
  3395                           ;eusart1.c: 243: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  3396  001608  0E0F               	movlw	15
  3397  00160A  6425               	cpfsgt	_eusart1RxHead,c	;volatile
  3398  00160C  D002               	goto	i2l119
  3399                           
  3400                           ;eusart1.c: 244: {
  3401                           ;eusart1.c: 245: eusart1RxHead = 0;
  3402  00160E  0E00               	movlw	0
  3403  001610  6E25               	movwf	_eusart1RxHead,c	;volatile
  3404  001612                     i2l119:
  3405                           
  3406                           ;eusart1.c: 246: }
  3407                           ;eusart1.c: 247: eusart1RxCount++;
  3408  001612  2A23               	incf	_eusart1RxCount,f,c	;volatile
  3409  001614  0012               	return		;funcret
  3410  001616                     __end_of_EUSART1_RxDataHandler:
  3411                           	opt stack 0
  3412                           tosu	equ	0xFFF
  3413                           tosh	equ	0xFFE
  3414                           tosl	equ	0xFFD
  3415                           pclatu	equ	0xFFB
  3416                           pclath	equ	0xFFA
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           prodh	equ	0xFF4
  3422                           prodl	equ	0xFF3
  3423                           intcon	equ	0xFF2
  3424                           intcon2	equ	0xFF1
  3425                           postinc0	equ	0xFEE
  3426                           fsr0h	equ	0xFEA
  3427                           fsr0l	equ	0xFE9
  3428                           wreg	equ	0xFE8
  3429                           postdec1	equ	0xFE5
  3430                           fsr1h	equ	0xFE2
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           tosu	equ	0xFFF
  3437                           tosh	equ	0xFFE
  3438                           tosl	equ	0xFFD
  3439                           pclatu	equ	0xFFB
  3440                           pclath	equ	0xFFA
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           intcon	equ	0xFF2
  3448                           intcon2	equ	0xFF1
  3449                           postinc0	equ	0xFEE
  3450                           fsr0h	equ	0xFEA
  3451                           fsr0l	equ	0xFE9
  3452                           wreg	equ	0xFE8
  3453                           postdec1	equ	0xFE5
  3454                           fsr1h	equ	0xFE2
  3455                           fsr1l	equ	0xFE1
  3456                           indf2	equ	0xFDF
  3457                           fsr2h	equ	0xFDA
  3458                           fsr2l	equ	0xFD9
  3459                           status	equ	0xFD8
  3460                           
  3461                           	psect	text29
  3462  000000                     __ptext29:
  3463                           	opt stack 0
  3464                           tosu	equ	0xFFF
  3465                           tosh	equ	0xFFE
  3466                           tosl	equ	0xFFD
  3467                           pclatu	equ	0xFFB
  3468                           pclath	equ	0xFFA
  3469                           tblptru	equ	0xFF8
  3470                           tblptrh	equ	0xFF7
  3471                           tblptrl	equ	0xFF6
  3472                           tablat	equ	0xFF5
  3473                           prodh	equ	0xFF4
  3474                           prodl	equ	0xFF3
  3475                           intcon	equ	0xFF2
  3476                           intcon2	equ	0xFF1
  3477                           postinc0	equ	0xFEE
  3478                           fsr0h	equ	0xFEA
  3479                           fsr0l	equ	0xFE9
  3480                           wreg	equ	0xFE8
  3481                           postdec1	equ	0xFE5
  3482                           fsr1h	equ	0xFE2
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489                           	psect	rparam
  3490  0000                     tosu	equ	0xFFF
  3491                           tosh	equ	0xFFE
  3492                           tosl	equ	0xFFD
  3493                           pclatu	equ	0xFFB
  3494                           pclath	equ	0xFFA
  3495                           tblptru	equ	0xFF8
  3496                           tblptrh	equ	0xFF7
  3497                           tblptrl	equ	0xFF6
  3498                           tablat	equ	0xFF5
  3499                           prodh	equ	0xFF4
  3500                           prodl	equ	0xFF3
  3501                           intcon	equ	0xFF2
  3502                           intcon2	equ	0xFF1
  3503                           postinc0	equ	0xFEE
  3504                           fsr0h	equ	0xFEA
  3505                           fsr0l	equ	0xFE9
  3506                           wreg	equ	0xFE8
  3507                           postdec1	equ	0xFE5
  3508                           fsr1h	equ	0xFE2
  3509                           fsr1l	equ	0xFE1
  3510                           indf2	equ	0xFDF
  3511                           fsr2h	equ	0xFDA
  3512                           fsr2l	equ	0xFD9
  3513                           status	equ	0xFD8
  3514                           
  3515                           	psect	temp
  3516  00004D                     btemp:
  3517                           	opt stack 0
  3518  00004D                     	ds	1
  3519  0000                     int$flags	set	btemp
  3520  0000                     wtemp6	set	btemp+1
  3521                           tosu	equ	0xFFF
  3522                           tosh	equ	0xFFE
  3523                           tosl	equ	0xFFD
  3524                           pclatu	equ	0xFFB
  3525                           pclath	equ	0xFFA
  3526                           tblptru	equ	0xFF8
  3527                           tblptrh	equ	0xFF7
  3528                           tblptrl	equ	0xFF6
  3529                           tablat	equ	0xFF5
  3530                           prodh	equ	0xFF4
  3531                           prodl	equ	0xFF3
  3532                           intcon	equ	0xFF2
  3533                           intcon2	equ	0xFF1
  3534                           postinc0	equ	0xFEE
  3535                           fsr0h	equ	0xFEA
  3536                           fsr0l	equ	0xFE9
  3537                           wreg	equ	0xFE8
  3538                           postdec1	equ	0xFE5
  3539                           fsr1h	equ	0xFE2
  3540                           fsr1l	equ	0xFE1
  3541                           indf2	equ	0xFDF
  3542                           fsr2h	equ	0xFDA
  3543                           fsr2l	equ	0xFD9
  3544                           status	equ	0xFD8


Data Sizes:
    Strings     2
    Constant    0
    Data        17
    BSS         71
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     25      76
    BANK0           160     11      59
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    atoi@s	PTR const unsigned char  size(3) Largest target is 65535
		 -> ROM(CODE[65535]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultErrorHandler(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMRAM

    _main->_wait_leddata
    _wait_segdata2->_EUSART1_Read
    _wait_segdata2->_EUSART1_Write
    _wait_segdata1->_EUSART1_Read
    _wait_segdata1->_EUSART1_Write
    _wait_leddata->_strcpy
    _atoi->___wmul
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_wait_leddata
    _wait_leddata->_atoi

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1945
                       _EUSART1_Read
                      _EUSART1_Write
                _EUSART1_is_rx_ready
                  _SYSTEM_Initialize
                           _show_seg
                       _wait_leddata
                      _wait_segdata1
                      _wait_segdata2
 ---------------------------------------------------------------------------------
 (1) _wait_segdata2                                        3     3      0      68
                                             19 COMRAM     3     3      0
                       _EUSART1_Read
                      _EUSART1_Write
                _EUSART1_is_rx_ready
 ---------------------------------------------------------------------------------
 (1) _wait_segdata1                                        3     3      0      68
                                             19 COMRAM     3     3      0
                       _EUSART1_Read
                      _EUSART1_Write
                _EUSART1_is_rx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Write                                        1     1      0      44
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _wait_leddata                                         4     4      0    1251
                                             24 COMRAM     1     1      0
                                              8 BANK0      3     3      0
                       _EUSART1_Read
                _EUSART1_is_rx_ready
                               _atoi
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     227
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     5      3     935
                                              0 BANK0      8     5      3
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _EUSART1_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _show_seg                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     490
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     490
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0       0
                                              0 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  0     0      0       0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultErrorHandler                          0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_RxDataHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _EUSART1_Write
   _EUSART1_is_rx_ready
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _show_seg
   _wait_leddata
     _EUSART1_Read
     _EUSART1_is_rx_ready
     _atoi
       ___wmul
       _isdigit
     _strcpy
   _wait_segdata1
     _EUSART1_Read
     _EUSART1_Write
     _EUSART1_is_rx_ready
   _wait_segdata2
     _EUSART1_Read
     _EUSART1_Write
     _EUSART1_is_rx_ready

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _EUSART1_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      B      3B       5       36.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     19      4C       1       80.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      87      12        0.0%
DATA                 0      0      87       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 15 14:43:15 2019

                      _eusart1TxBufferRemaining 004B                                               _D 004C  
                                             _a 0015                                               _d 0011  
                                             _i 0013                                              l91 1466  
                                            l93 14A0                                              u40 1660  
                               ??_wait_segdata1 003B                                 ??_wait_segdata2 003B  
                           ___wmul@multiplicand 003C                                    __CFG_CP0$OFF 000000  
                                  __CFG_CP1$OFF 000000                                    __CFG_CP2$OFF 000000  
                                  __CFG_CP3$OFF 000000                                     __CFG_LVP$ON 000000  
                                           l100 1544                                             l101 1568  
                                           l102 1566                                             l314 113C  
                                           l315 116A                                             l323 14B2  
                                           l316 119A                                             l500 1080  
                                           l325 14D4                                             l502 1104  
                                           l326 14EA                                             l292 12B4  
                                           l289 1270                                             l493 1014  
                                           l494 1006                                             l496 1068  
                                           l674 162C                                             l499 10CA  
                                           l897 157E                                             l898 1576  
                                  __CFG_CPB$OFF 000000                                    __CFG_CPD$OFF 000000  
                                           u805 13A6                                             u775 1452  
                                           _Seg 0080                                             prod 000FF3  
                                           tosl 000FFD                                             wreg 000FE8  
                                    _TXSTA1bits 000FAC                                            l1401 1534  
                                          l1669 10BE                                            STR_1 1001  
                                          u1107 12E2                                            u1117 1134  
                                          u1127 1162                                            u1137 1192  
                                          u1147 11C2                                            _LATA 000F89  
                                          _LATB 000F8A                                            _LATC 000F8B  
                                          _LATD 000F8C                                            u1097 13B6  
                                          _LATE 000F8D                                            _WPUB 000F61  
                                 _EUSART1_Write 1532                                            _atoi 1004  
                                          _main 14AA                                   ?_EUSART1_Read 0028  
                                          fsr0h 000FEA                                            fsr1h 000FE2  
                                          fsr2h 000FDA                                            fsr0l 000FE9  
                                          indf2 000FDF                                            fsr1l 000FE1  
                                          fsr2l 000FD9                                            btemp 004D  
                                 __CFG_BORV$190 000000                                            prodh 000FF4  
                                          prodl 000FF3                                            start 00D4  
                                 __CFG_IESO$OFF 000000                                    ___param_bank 000000  
                __size_of_OSCILLATOR_Initialize 000E                   __end_of_OSCILLATOR_Initialize 1672  
                         _eusart1RxStatusBuffer 0001                                           ?_atoi 0090  
                                         ?_main 0028                                  __CFG_DEBUG$OFF 000000  
                                         i2l114 1266                                           i2l106 15C8  
                                         i2l107 15C4                                           i2l119 1612  
                                         i2l165 006C                                           _TRISA 000F92  
                                         _TRISB 000F93                                           _TRISC 000F94  
                                         _TRISD 000F95                                           _TRISE 000F96  
                                 __CFG_WRT0$OFF 000000                                   __CFG_WRT1$OFF 000000  
                                 __CFG_WRT2$OFF 000000                                   __CFG_WRT3$OFF 000000  
                          _EUSART1_Transmit_ISR 159E                                  __CFG_EBTR0$OFF 000000  
                                __CFG_FCMEN$OFF 000000                                  __CFG_EBTR1$OFF 000000  
                                __CFG_EBTR2$OFF 000000                                  __CFG_EBTR3$OFF 000000  
                                 __CFG_WRTB$OFF 000000                                   __CFG_WRTC$OFF 000000  
                                 __CFG_WRTD$OFF 000000                                  __CFG_EBTRB$OFF 000000  
                               __end_of_isdigit 1634                              __CFG_MCLRE$EXTMCLR 000000  
                                         atoi@a 0096                                           atoi@s 0090  
                                ?_EUSART1_Write 0028                                           pclath 000FFA  
                                         tablat 000FF5                                  ??_EUSART1_Read 003A  
                                         status 000FD8                                           wtemp6 004E  
                                __CFG_HFOFST$ON 000000      __end_of_EUSART1_DefaultFramingErrorHandler 16B6  
   __size_of_EUSART1_DefaultFramingErrorHandler 0002            ??_EUSART1_DefaultFramingErrorHandler 0028  
           ?_EUSART1_DefaultFramingErrorHandler 0028              _EUSART1_DefaultFramingErrorHandler 16B4  
                                __CFG_PBADEN$ON 000000                                 __initialization 13BE  
                                  __end_of_atoi 110E                      __end_of_EUSART1_Initialize 1366  
                                  __end_of_main 14F0                     ?_INTERRUPT_InterruptManager 0028  
                                        ??_atoi 0093                                          ??_main 0041  
                                 __activetblptr 000003                           ?_EUSART1_Transmit_ISR 0028  
                                        _ANSELA 000F38                                          _ANSELB 000F39  
                                        _ANSELC 000F3A                                          _ANSELD 000F3B  
                                        _ANSELE 000F3C                    __size_of_EUSART1_is_rx_ready 000E  
                                __CFG_WDTEN$OFF 000000                                          _RCREG1 000FAE  
                                        _RCSTA1 000FAB                                          _OSCCON 000FD3  
                                        _SPBRG1 000FAF                                          _TXREG1 000FAD  
                                        _TXSTA1 000FAC                                  __CFG_XINST$OFF 000000  
                                        ___wmul 15CC                                          _c_scan 0017  
                                __CFG_STVREN$ON 000000                        ?_EUSART1_SetErrorHandler 003A  
                                        _segg11 001D                                          _segg12 001B  
                                        _segg21 001A                                          _segg22 0018  
                                        clear_0 13F6                                          clear_1 1402  
                                        _rxData 0020                ??_EUSART1_SetOverrunErrorHandler 003C  
               ?_EUSART1_SetOverrunErrorHandler 003A                                          _strcpy 156C  
                                  __pdataCOMRAM 004C                                       ??_isdigit 003A  
                                  __mediumconst 0000                                __end_of_show_seg 11CE  
                                        tblptrh 000FF7                                          tblptrl 000FF6  
                                        tblptru 000FF8                                 ??_EUSART1_Write 003A  
                               _eusart1RxBuffer 0060                   __size_of_INTERRUPT_Initialize 0004  
                               _eusart1TxBuffer 0070                               _SYSTEM_Initialize 1634  
                                    __accesstop 0060                         __end_of__initialization 1408  
                            ?_SYSTEM_Initialize 0028                                   ___rparam_used 000001  
                __size_of_EUSART1_RxDataHandler 0024                   __end_of_EUSART1_RxDataHandler 1616  
                                __pcstackCOMRAM 0028                                    __pidataBANK0 1646  
                           ??_SYSTEM_Initialize 003C                            __end_of_EUSART1_Read 14AA  
                        ??_EUSART1_Transmit_ISR 0028                     __end_of_EUSART1_Receive_ISR 126C  
                     __end_of_SYSTEM_Initialize 1646                                   _eusart1RxHead 0025  
                                 _eusart1TxHead 0027                                   _eusart1RxTail 0024  
                                    __pbssBANK0 0060                                   _eusart1TxTail 0026  
             _EUSART1_TxDefaultInterruptHandler 0049                 ??_EUSART1_SetRxInterruptHandler 003C  
                               __CFG_PLLCFG$OFF 000000                                      __pnvCOMRAM 0041  
               __end_of_EUSART1_SetErrorHandler 16A4                              __CFG_CCP2MX$PORTC1 000000  
                                       ?___wmul 003A                              __CFG_CCP3MX$PORTB5 000000  
                         __end_of_wait_segdata1 1462                           __end_of_wait_segdata2 13BE  
                                       ?_strcpy 003A          __end_of_EUSART1_SetFramingErrorHandler 169A  
       __size_of_EUSART1_SetFramingErrorHandler 000A                  _EUSART1_SetFramingErrorHandler 1690  
                  ?_EUSART1_DefaultErrorHandler 0028                                         _OSCCON2 000FD2  
                                       _OSCTUNE 000F9B                                         i2u71_48 1254  
                                       _SPBRGH1 000FB0                                         i2u67_48 11FC  
                                       i2u91_48 0076                                         i2u67_49 120E  
                                       i2u91_49 0088                                         i2u69_48 1228  
                                       i2u69_49 123A                                         i2u88_48 0060  
                               __CFG_PWRTEN$OFF 000000                                         __Hparam 0000  
                                       __Lparam 0000                                       ?_show_seg 0028  
                               __size_of___wmul 0026                                    __psmallconst 1000  
                           _EUSART1_is_rx_ready 1656                                         __pcinit 13BE  
                                       __ramtop 1000                                         __ptext0 14AA  
                                       __ptext1 1366                                         __ptext2 1412  
                                       __ptext3 1532                                         __ptext4 126C  
                                       __ptext5 156C                                         __ptext6 1004  
                                       __ptext7 1616                                         __ptext8 15CC  
                                       __ptext9 1656                                 __size_of_strcpy 0032  
                                       _segg122 001C                                         _segg222 0019  
                         _OSCILLATOR_Initialize 1664                                         _isdigit 1616  
                            _EUSART1_Initialize 12F2                        ??_PIN_MANAGER_Initialize 003A  
                 ??_EUSART1_DefaultErrorHandler 0028                                   ?_wait_leddata 0028  
                    __size_of_SYSTEM_Initialize 0012                                      _seg_value1 001F  
                                    _seg_value2 001E                            end_of_initialization 1408  
                          ?_EUSART1_is_rx_ready 0028                             ?_EUSART1_Initialize 0028  
                   _EUSART1_OverrunErrorHandler 0043           __end_of_EUSART1_SetRxInterruptHandler 1686  
        __size_of_EUSART1_SetRxInterruptHandler 000A                   _EUSART1_SetRxInterruptHandler 167C  
                                       postdec1 000FE5                                      ??_show_seg 003A  
                                       postinc0 000FEE                           __size_of_EUSART1_Read 0048  
                          ??_EUSART1_Initialize 003C                                  ??_wait_leddata 0098  
              __size_of_EUSART1_SetErrorHandler 000A                             EUSART1_Write@txData 003A  
                         ??_EUSART1_is_rx_ready 003A                                    _EUSART1_Read 1462  
          __size_of_EUSART1_DefaultErrorHandler 0006                    __end_of_INTERRUPT_Initialize 16B4  
                                __end_of___wmul 15F2                                   __pidataCOMRAM 16B6  
                        ?_OSCILLATOR_Initialize 0028                                  __end_of_strcpy 159E  
                           start_initialization 13BE                 __size_of_PIN_MANAGER_Initialize 0042  
 EUSART1_SetRxInterruptHandler@interruptHandler 003A   EUSART1_SetTxInterruptHandler@interruptHandler 003A  
                         __end_of_EUSART1_Write 156C                                        ??___wmul 003E  
                         _EUSART1_RxDataHandler 15F2                  ?_EUSART1_SetRxInterruptHandler 003A  
                                   __pdataBANK0 0080                                        ??_strcpy 003E  
                                _eusart1RxCount 0023                                     __pbssCOMRAM 0001  
             _EUSART1_RxDefaultInterruptHandler 0047                   __size_of_EUSART1_Transmit_ISR 002E  
                                 __pcstackBANK0 0090                            wait_leddata@led_char 0040  
               ??_EUSART1_SetTxInterruptHandler 003C                ??_EUSART1_SetFramingErrorHandler 003C  
               ?_EUSART1_SetFramingErrorHandler 003A                    __size_of_EUSART1_Receive_ISR 009E  
                        _PIN_MANAGER_Initialize 14F0                            __end_of_wait_leddata 12F2  
                                     __pintcode 0008                               __size_of_show_seg 00C0  
                  ??_INTERRUPT_InterruptManager 0028                                __CFG_PRICLKEN$ON 000000  
                                     _led_value 0021                                     __smallconst 1000  
                                      _BAUDCON1 000FB8      __end_of_EUSART1_DefaultOverrunErrorHandler 16AA  
   __size_of_EUSART1_DefaultOverrunErrorHandler 0006            ??_EUSART1_DefaultOverrunErrorHandler 0028  
           ?_EUSART1_DefaultOverrunErrorHandler 0028              _EUSART1_DefaultOverrunErrorHandler 16A4  
                                      ?_isdigit 0028                            _EUSART1_ErrorHandler 0041  
                       _EUSART1_SetErrorHandler 169A                            _INTERRUPT_Initialize 16B0  
                                ___wmul@product 003E         EUSART1_SetErrorHandler@interruptHandler 003A  
                                      _PIE1bits 000F9D                          __size_of_wait_segdata1 0050  
                        __size_of_wait_segdata2 0058             __size_of_INTERRUPT_InterruptManager 00CC  
                                      _PIR1bits 000F9E                          ?_EUSART1_RxDataHandler 0028  
                                      _RCONbits 000FD0                                __CFG_WDTPS$32768 000000  
                             ___wmul@multiplier 003A                                     _INTCON2bits 000FF1  
                                     copy_data0 13D2                           ?_INTERRUPT_Initialize 0028  
                         EUSART1_Read@readValue 003A           __end_of_EUSART1_SetTxInterruptHandler 167C  
        __size_of_EUSART1_SetTxInterruptHandler 000A                   _EUSART1_SetTxInterruptHandler 1672  
                                      __Hrparam 0000                                        __Lrparam 0000  
                            __CFG_BOREN$SBORDIS 000000                               __CFG_P2BMX$PORTD2 000000  
                       ??_OSCILLATOR_Initialize 003A                     __size_of_EUSART1_Initialize 0074  
                                   _isdigit$946 003B                       ??_EUSART1_SetErrorHandler 003C  
                                 _wait_segdata1 1412                                   _wait_segdata2 1366  
           __end_of_EUSART1_DefaultErrorHandler 16B0                     _EUSART1_DefaultErrorHandler 16AA  
                   __end_of_EUSART1_is_rx_ready 1664                                __size_of_isdigit 001E  
                                      __ptext10 1462                                        __ptext11 110E  
                                      __ptext20 1690                                        __ptext12 1634  
                                      __ptext21 169A                                        __ptext13 14F0  
                                      __ptext14 1664                                        __ptext23 159E  
                                      __ptext15 16B0                                        __ptext24 11CE  
                                      __ptext16 12F2                                        __ptext25 16A4  
                                      __ptext17 1672                                        __ptext26 16B4  
                                      __ptext18 167C                                        __ptext27 16AA  
                                      __ptext19 1686                                        __ptext28 15F2  
                                      __ptext29 0000                                      strcpy@from 003C  
                                 __size_of_atoi 010A                                   __size_of_main 0046  
                         __size_of_wait_leddata 0086  EUSART1_SetOverrunErrorHandler@interruptHandler 003A  
                                      _show_seg 110E                                        int$flags 004D  
                                      atoi@sign 0095              __end_of_INTERRUPT_InterruptManager 00D4  
                    _INTERRUPT_InterruptManager 0008                     _EUSART1_FramingErrorHandler 0045  
                           _EUSART1_Receive_ISR 11CE                                  ?_wait_segdata1 0028  
                                ?_wait_segdata2 0028                                      _INTCONbits 000FF2  
                                      isdigit@c 003C                          ??_INTERRUPT_Initialize 003A  
                                  _wait_leddata 126C                                        intlevel2 0000  
                          ?_EUSART1_Receive_ISR 0028                         ?_PIN_MANAGER_Initialize 0028  
        __end_of_EUSART1_SetOverrunErrorHandler 1690         __size_of_EUSART1_SetOverrunErrorHandler 000A  
                _EUSART1_SetOverrunErrorHandler 1686                                      _RCSTA1bits 000FAB  
                  __end_of_EUSART1_Transmit_ISR 15CC  EUSART1_SetFramingErrorHandler@interruptHandler 003A  
                ?_EUSART1_SetTxInterruptHandler 003A                          __size_of_EUSART1_Write 003A  
                            _eusart1RxLastError 0022                                        strcpy@cp 003E  
                                      strcpy@to 003A                               __CFG_T3CMX$PORTC0 000000  
                         ??_EUSART1_Receive_ISR 0028                  __end_of_PIN_MANAGER_Initialize 1532  
                             __CFG_FOSC$INTIO67 000000                         ??_EUSART1_RxDataHandler 0028  
