

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 01 14:46:27 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F46K22 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  00069E                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _c
    90  00069E  00                 	db	0
    91  00069F  01                 	db	1
    92  0006A0  02                 	db	2
    93  0006A1  03                 	db	3
    94                           
    95                           ;initializer for _a
    96  0006A2  08                 	db	8
    97  0006A3  04                 	db	4
    98  0006A4  02                 	db	2
    99  0006A5  01                 	db	1
   100                           
   101                           	psect	idataBANK0
   102  000658                     __pidataBANK0:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _b
   106  000658  C0                 	db	192
   107  000659  F9                 	db	249
   108  00065A  A4                 	db	164
   109  00065B  B0                 	db	176
   110  00065C  99                 	db	153
   111  00065D  92                 	db	146
   112  00065E  82                 	db	130
   113  00065F  F8                 	db	248
   114  000660  80                 	db	128
   115  000661  90                 	db	144
   116                           
   117                           	psect	nvCOMRAM
   118  000038                     __pnvCOMRAM:
   119                           	opt stack 0
   120  000038                     _EUSART1_ErrorHandler:
   121                           	opt stack 0
   122  000038                     	ds	2
   123  00003A                     _EUSART1_OverrunErrorHandler:
   124                           	opt stack 0
   125  00003A                     	ds	2
   126  00003C                     _EUSART1_FramingErrorHandler:
   127                           	opt stack 0
   128  00003C                     	ds	2
   129  00003E                     _EUSART1_RxDefaultInterruptHandler:
   130                           	opt stack 0
   131  00003E                     	ds	2
   132  000040                     _EUSART1_TxDefaultInterruptHandler:
   133                           	opt stack 0
   134  000040                     	ds	2
   135  000042                     _TMR0_InterruptHandler:
   136                           	opt stack 0
   137  000042                     	ds	2
   138  000044                     _eusart1TxBufferRemaining:
   139                           	opt stack 0
   140  000044                     	ds	1
   141  000045                     _timer0ReloadVal:
   142                           	opt stack 0
   143  000045                     	ds	1
   144  0000                     _ANSELA	set	3896
   145  0000                     _ANSELE	set	3900
   146  0000                     _ANSELB	set	3897
   147  0000                     _ANSELC	set	3898
   148  0000                     _ANSELD	set	3899
   149  0000                     _RCREG1	set	4014
   150  0000                     _RCSTA1bits	set	4011
   151  0000                     _TXREG1	set	4013
   152  0000                     _TXSTA1bits	set	4012
   153  0000                     _SPBRGH1	set	4016
   154  0000                     _SPBRG1	set	4015
   155  0000                     _TXSTA1	set	4012
   156  0000                     _RCSTA1	set	4011
   157  0000                     _BAUDCON1	set	4024
   158  0000                     _INTCON2bits	set	4081
   159  0000                     _WPUB	set	3937
   160  0000                     _TRISD	set	3989
   161  0000                     _TRISC	set	3988
   162  0000                     _TRISB	set	3987
   163  0000                     _TRISA	set	3986
   164  0000                     _TRISE	set	3990
   165  0000                     _LATC	set	3979
   166  0000                     _LATB	set	3978
   167  0000                     _LATA	set	3977
   168  0000                     _LATD	set	3980
   169  0000                     _LATE	set	3981
   170  0000                     _OSCTUNE	set	3995
   171  0000                     _OSCCON2	set	4050
   172  0000                     _OSCCON	set	4051
   173  0000                     _RCONbits	set	4048
   174  0000                     _PIR1bits	set	3998
   175  0000                     _ADCON0bits	set	4034
   176  0000                     _PIE1bits	set	3997
   177  0000                     _ADRESH	set	4036
   178  0000                     _ADRESL	set	4035
   179  0000                     _ADCON2	set	4032
   180  0000                     _ADCON1	set	4033
   181  0000                     _ADCON0	set	4034
   182  0000                     _T0CONbits	set	4053
   183  0000                     _T0CON	set	4053
   184  0000                     _INTCONbits	set	4082
   185  0000                     _TMR0L	set	4054
   186  0000                     _TMR0H	set	4055
   187                           
   188                           ; #config settings
   189  0000                     
   190                           	psect	cinit
   191  000488                     __pcinit:
   192                           	opt stack 0
   193  000488                     start_initialization:
   194                           	opt stack 0
   195  000488                     __initialization:
   196                           	opt stack 0
   197                           
   198                           ; Initialize objects allocated to BANK0 (10 bytes)
   199                           ; load TBLPTR registers with __pidataBANK0
   200  000488  0E58               	movlw	low __pidataBANK0
   201  00048A  6EF6               	movwf	tblptrl,c
   202  00048C  0E06               	movlw	high __pidataBANK0
   203  00048E  6EF7               	movwf	tblptrh,c
   204  000490  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   205  000492  6EF8               	movwf	tblptru,c
   206  000494  EE00  F08F         	lfsr	0,__pdataBANK0
   207  000498  EE10 F00A          	lfsr	1,10
   208  00049C                     copy_data0:
   209  00049C  0009               	tblrd		*+
   210  00049E  CFF5 FFEE          	movff	tablat,postinc0
   211  0004A2  50E5               	movf	postdec1,w,c
   212  0004A4  50E1               	movf	fsr1l,w,c
   213  0004A6  E1FA               	bnz	copy_data0
   214                           
   215                           ; Initialize objects allocated to COMRAM (8 bytes)
   216                           ; load TBLPTR registers with __pidataCOMRAM
   217  0004A8  0E9E               	movlw	low __pidataCOMRAM
   218  0004AA  6EF6               	movwf	tblptrl,c
   219  0004AC  0E06               	movlw	high __pidataCOMRAM
   220  0004AE  6EF7               	movwf	tblptrh,c
   221  0004B0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   222  0004B2  6EF8               	movwf	tblptru,c
   223  0004B4  EE00  F046         	lfsr	0,__pdataCOMRAM
   224  0004B8  EE10 F008          	lfsr	1,8
   225  0004BC                     copy_data1:
   226  0004BC  0009               	tblrd		*+
   227  0004BE  CFF5 FFEE          	movff	tablat,postinc0
   228  0004C2  50E5               	movf	postdec1,w,c
   229  0004C4  50E1               	movf	fsr1l,w,c
   230  0004C6  E1FA               	bnz	copy_data1
   231                           
   232                           ; Clear objects allocated to BANK0 (32 bytes)
   233  0004C8  EE00  F060         	lfsr	0,__pbssBANK0
   234  0004CC  0E20               	movlw	32
   235  0004CE                     clear_0:
   236  0004CE  6AEE               	clrf	postinc0,c
   237  0004D0  06E8               	decf	wreg,f,c
   238  0004D2  E1FD               	bnz	clear_0
   239                           
   240                           ; Clear objects allocated to COMRAM (37 bytes)
   241  0004D4  EE00  F001         	lfsr	0,__pbssCOMRAM
   242  0004D8  0E25               	movlw	37
   243  0004DA                     clear_1:
   244  0004DA  6AEE               	clrf	postinc0,c
   245  0004DC  06E8               	decf	wreg,f,c
   246  0004DE  E1FD               	bnz	clear_1
   247  0004E0                     end_of_initialization:
   248                           	opt stack 0
   249  0004E0                     __end_of__initialization:
   250                           	opt stack 0
   251  0004E0  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   252  0004E2  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   253  0004E4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   254  0004E6  6EF8               	movwf	tblptru,c
   255  0004E8  0100               	movlb	0
   256  0004EA  EF79  F000         	goto	_main	;jump to C main() function
   257                           tblptru	equ	0xFF8
   258                           tblptrh	equ	0xFF7
   259                           tblptrl	equ	0xFF6
   260                           tablat	equ	0xFF5
   261                           postinc0	equ	0xFEE
   262                           wreg	equ	0xFE8
   263                           postdec1	equ	0xFE5
   264                           fsr1l	equ	0xFE1
   265                           
   266                           	psect	bssCOMRAM
   267  000001                     __pbssCOMRAM:
   268                           	opt stack 0
   269  000001                     _eusart1RxStatusBuffer:
   270                           	opt stack 0
   271  000001                     	ds	16
   272  000011                     _convertedValue:
   273                           	opt stack 0
   274  000011                     	ds	2
   275  000013                     _z:
   276                           	opt stack 0
   277  000013                     	ds	2
   278  000015                     _y:
   279                           	opt stack 0
   280  000015                     	ds	2
   281  000017                     _x:
   282                           	opt stack 0
   283  000017                     	ds	2
   284  000019                     _d:
   285                           	opt stack 0
   286  000019                     	ds	2
   287  00001B                     _j:
   288                           	opt stack 0
   289  00001B                     	ds	2
   290  00001D                     _i:
   291                           	opt stack 0
   292  00001D                     	ds	2
   293  00001F                     _eusart1RxLastError:
   294                           	opt stack 0
   295  00001F                     	ds	1
   296  000020                     _eusart1RxCount:
   297                           	opt stack 0
   298  000020                     	ds	1
   299  000021                     _eusart1RxTail:
   300                           	opt stack 0
   301  000021                     	ds	1
   302  000022                     _eusart1RxHead:
   303                           	opt stack 0
   304  000022                     	ds	1
   305  000023                     _eusart1TxTail:
   306                           	opt stack 0
   307  000023                     	ds	1
   308  000024                     _eusart1TxHead:
   309                           	opt stack 0
   310  000024                     	ds	1
   311  000025                     _cnt:
   312                           	opt stack 0
   313  000025                     	ds	1
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           postdec1	equ	0xFE5
   321                           fsr1l	equ	0xFE1
   322                           
   323                           	psect	dataCOMRAM
   324  000046                     __pdataCOMRAM:
   325                           	opt stack 0
   326  000046                     _c:
   327                           	opt stack 0
   328  000046                     	ds	4
   329  00004A                     _a:
   330                           	opt stack 0
   331  00004A                     	ds	4
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           postdec1	equ	0xFE5
   339                           fsr1l	equ	0xFE1
   340                           
   341                           	psect	bssBANK0
   342  000060                     __pbssBANK0:
   343                           	opt stack 0
   344  000060                     _eusart1RxBuffer:
   345                           	opt stack 0
   346  000060                     	ds	16
   347  000070                     _eusart1TxBuffer:
   348                           	opt stack 0
   349  000070                     	ds	16
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1l	equ	0xFE1
   358                           
   359                           	psect	dataBANK0
   360  00008F                     __pdataBANK0:
   361                           	opt stack 0
   362  00008F                     _b:
   363                           	opt stack 0
   364  00008F                     	ds	10
   365                           tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           postdec1	equ	0xFE5
   372                           fsr1l	equ	0xFE1
   373                           
   374                           	psect	cstackBANK0
   375  000080                     __pcstackBANK0:
   376                           	opt stack 0
   377  000080                     ?_ADC_StartConversion:
   378                           	opt stack 0
   379  000080                     ?_ADC_GetConversionResult:
   380                           	opt stack 0
   381  000080                     ?___wmul:
   382                           	opt stack 0
   383  000080                     ?___awmod:
   384                           	opt stack 0
   385  000080                     TMR0_SetInterruptHandler@InterruptHandler:
   386                           	opt stack 0
   387  000080                     EUSART1_SetFramingErrorHandler@interruptHandler:
   388                           	opt stack 0
   389  000080                     EUSART1_SetOverrunErrorHandler@interruptHandler:
   390                           	opt stack 0
   391  000080                     EUSART1_SetErrorHandler@interruptHandler:
   392                           	opt stack 0
   393  000080                     EUSART1_SetTxInterruptHandler@interruptHandler:
   394                           	opt stack 0
   395  000080                     EUSART1_SetRxInterruptHandler@interruptHandler:
   396                           	opt stack 0
   397  000080                     ___wmul@multiplier:
   398                           	opt stack 0
   399  000080                     ___awmod@dividend:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x0
   403  000080                     	ds	2
   404  000082                     ??_ADC_GetConversionResult:
   405  000082                     ___wmul@multiplicand:
   406                           	opt stack 0
   407  000082                     ___awmod@divisor:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x2
   411  000082                     	ds	2
   412  000084                     ___awmod@counter:
   413                           	opt stack 0
   414  000084                     ___wmul@product:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x4
   418  000084                     	ds	1
   419  000085                     ___awmod@sign:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x5
   423  000085                     	ds	1
   424  000086                     ?___awdiv:
   425                           	opt stack 0
   426  000086                     ___awdiv@dividend:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x6
   430  000086                     	ds	2
   431  000088                     ___awdiv@divisor:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x8
   435  000088                     	ds	2
   436  00008A                     ___awdiv@counter:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0xA
   440  00008A                     	ds	1
   441  00008B                     ___awdiv@sign:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0xB
   445  00008B                     	ds	1
   446  00008C                     ___awdiv@quotient:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0xC
   450  00008C                     	ds	2
   451  00008E                     ??_main:
   452                           
   453                           ; 1 bytes @ 0xE
   454  00008E                     	ds	1
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	cstackCOMRAM
   465  000026                     __pcstackCOMRAM:
   466                           	opt stack 0
   467  000026                     ??_INTERRUPT_InterruptManager:
   468  000026                     
   469                           ; 1 bytes @ 0x0
   470  000026                     	ds	18
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           
   480 ;;
   481 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   482 ;;
   483 ;; *************** function _main *****************
   484 ;; Defined at:
   485 ;;		line 18 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;Total ram usage:        1 bytes
   504 ;; Hardware stack levels required when called:    7
   505 ;; This function calls:
   506 ;;		_ADC_GetConversionResult
   507 ;;		_ADC_IsConversionDone
   508 ;;		_ADC_StartConversion
   509 ;;		_SYSTEM_Initialize
   510 ;;		___awdiv
   511 ;;		___awmod
   512 ;;		___wmul
   513 ;; This function is called by:
   514 ;;		Startup code after reset
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text0
   519  0000F2                     __ptext0:
   520                           	opt stack 0
   521  0000F2                     _main:
   522                           	opt stack 24
   523                           
   524                           ;main.c: 21: SYSTEM_Initialize();
   525                           
   526                           ;incstack = 0
   527  0000F2  ECFB  F002         	call	_SYSTEM_Initialize	;wreg free
   528                           
   529                           ;main.c: 28: (INTCONbits.GIE = 1);
   530  0000F6  8EF2               	bsf	intcon,7,c	;volatile
   531                           
   532                           ;main.c: 34: (INTCONbits.PEIE = 1);
   533  0000F8  8CF2               	bsf	intcon,6,c	;volatile
   534  0000FA                     
   535                           ;main.c: 40: {
   536                           ;main.c: 41: if(cnt>2)
   537  0000FA  0E02               	movlw	2
   538  0000FC  6425               	cpfsgt	_cnt,c	;volatile
   539  0000FE  D7FD               	goto	l234
   540                           
   541                           ;main.c: 42: {
   542                           ;main.c: 43: cnt=0;
   543  000100  0E00               	movlw	0
   544  000102  6E25               	movwf	_cnt,c	;volatile
   545                           
   546                           ;main.c: 44: ADC_StartConversion(channel_AN0);
   547  000104  0E00               	movlw	0
   548  000106  0100               	movlb	0	; () banked
   549  000108  6F81               	movwf	(?_ADC_StartConversion+1)& (0+255),b
   550  00010A  0E00               	movlw	0
   551  00010C  6F80               	movwf	?_ADC_StartConversion& (0+255),b
   552  00010E  EC5B  F003         	call	_ADC_StartConversion	;wreg free
   553  000112  EC26  F003         	call	_ADC_IsConversionDone	;wreg free
   554  000116  0900               	iorlw	0
   555  000118  B4D8               	btfsc	status,2,c
   556  00011A  D7FB               	goto	l237
   557                           
   558                           ;main.c: 46: {
   559                           ;main.c: 47: convertedValue = ADC_GetConversionResult();
   560  00011C  EC14  F003         	call	_ADC_GetConversionResult	;wreg free
   561  000120  C080  F011         	movff	?_ADC_GetConversionResult,_convertedValue
   562  000124  C081  F012         	movff	?_ADC_GetConversionResult+1,_convertedValue+1
   563                           
   564                           ;main.c: 48: }
   565                           ;main.c: 49: d=convertedValue;
   566  000128  C011  F019         	movff	_convertedValue,_d
   567  00012C  C012  F01A         	movff	_convertedValue+1,_d+1
   568                           
   569                           ;main.c: 50: c[0]=d/1000;
   570  000130  C019  F086         	movff	_d,___awdiv@dividend
   571  000134  C01A  F087         	movff	_d+1,___awdiv@dividend+1
   572  000138  0E03               	movlw	3
   573  00013A  0100               	movlb	0	; () banked
   574  00013C  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
   575  00013E  0EE8               	movlw	232
   576  000140  6F88               	movwf	___awdiv@divisor& (0+255),b
   577  000142  EC89  F001         	call	___awdiv	;wreg free
   578  000146  0100               	movlb	0	; () banked
   579  000148  5186               	movf	?___awdiv& (0+255),w,b
   580  00014A  6E46               	movwf	_c,c
   581                           
   582                           ; BSR set to: 0
   583                           ;main.c: 51: c[1]=(d-c[0]*1000)/100;
   584  00014C  C046  F080         	movff	_c,___wmul@multiplier
   585  000150  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
   586  000152  0E03               	movlw	3
   587  000154  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   588  000156  0EE8               	movlw	232
   589  000158  6F82               	movwf	___wmul@multiplicand& (0+255),b
   590  00015A  ECC3  F002         	call	___wmul	;wreg free
   591  00015E  0100               	movlb	0	; () banked
   592  000160  1F80               	comf	?___wmul& (0+255),f,b
   593  000162  1F81               	comf	(?___wmul+1)& (0+255),f,b
   594  000164  4B80               	infsnz	?___wmul& (0+255),f,b
   595  000166  2B81               	incf	(?___wmul+1)& (0+255),f,b
   596  000168  5019               	movf	_d,w,c
   597  00016A  2580               	addwf	?___wmul& (0+255),w,b
   598  00016C  6F86               	movwf	___awdiv@dividend& (0+255),b
   599  00016E  501A               	movf	_d+1,w,c
   600  000170  2181               	addwfc	(?___wmul+1)& (0+255),w,b
   601  000172  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
   602  000174  0E00               	movlw	0
   603  000176  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
   604  000178  0E64               	movlw	100
   605  00017A  6F88               	movwf	___awdiv@divisor& (0+255),b
   606  00017C  EC89  F001         	call	___awdiv	;wreg free
   607  000180  0100               	movlb	0	; () banked
   608  000182  5186               	movf	?___awdiv& (0+255),w,b
   609  000184  6E47               	movwf	_c+1,c
   610                           
   611                           ; BSR set to: 0
   612                           ;main.c: 52: c[2]=(d-c[0]*1000-c[1]*100)/10;
   613  000186  C046  F080         	movff	_c,___wmul@multiplier
   614  00018A  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
   615  00018C  0E03               	movlw	3
   616  00018E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   617  000190  0EE8               	movlw	232
   618  000192  6F82               	movwf	___wmul@multiplicand& (0+255),b
   619  000194  ECC3  F002         	call	___wmul	;wreg free
   620  000198  5047               	movf	_c+1,w,c
   621  00019A  0D64               	mullw	100
   622  00019C  50F3               	movf	prodl,w,c
   623  00019E  0100               	movlb	0	; () banked
   624  0001A0  2780               	addwf	?___wmul& (0+255),f,b
   625  0001A2  50F4               	movf	prodh,w,c
   626  0001A4  2381               	addwfc	(?___wmul+1)& (0+255),f,b
   627  0001A6  1F80               	comf	?___wmul& (0+255),f,b
   628  0001A8  1F81               	comf	(?___wmul+1)& (0+255),f,b
   629  0001AA  4B80               	infsnz	?___wmul& (0+255),f,b
   630  0001AC  2B81               	incf	(?___wmul+1)& (0+255),f,b
   631  0001AE  5019               	movf	_d,w,c
   632  0001B0  2580               	addwf	?___wmul& (0+255),w,b
   633  0001B2  6F86               	movwf	___awdiv@dividend& (0+255),b
   634  0001B4  501A               	movf	_d+1,w,c
   635  0001B6  2181               	addwfc	(?___wmul+1)& (0+255),w,b
   636  0001B8  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
   637  0001BA  0E00               	movlw	0
   638  0001BC  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
   639  0001BE  0E0A               	movlw	10
   640  0001C0  6F88               	movwf	___awdiv@divisor& (0+255),b
   641  0001C2  EC89  F001         	call	___awdiv	;wreg free
   642  0001C6  0100               	movlb	0	; () banked
   643  0001C8  5186               	movf	?___awdiv& (0+255),w,b
   644  0001CA  6E48               	movwf	_c+2,c
   645                           
   646                           ;main.c: 53: c[3]=d %10;
   647  0001CC  C019  F080         	movff	_d,___awmod@dividend
   648  0001D0  C01A  F081         	movff	_d+1,___awmod@dividend+1
   649  0001D4  0E00               	movlw	0
   650  0001D6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
   651  0001D8  0E0A               	movlw	10
   652  0001DA  6F82               	movwf	___awmod@divisor& (0+255),b
   653  0001DC  EC0B  F002         	call	___awmod	;wreg free
   654  0001E0  0100               	movlb	0	; () banked
   655  0001E2  5180               	movf	?___awmod& (0+255),w,b
   656  0001E4  6E49               	movwf	_c+3,c
   657                           
   658                           ; BSR set to: 0
   659                           ;main.c: 55: for (i=0;i<=60;i++)
   660  0001E6  0E00               	movlw	0
   661  0001E8  6E1E               	movwf	_i+1,c
   662  0001EA  0E00               	movlw	0
   663  0001EC  6E1D               	movwf	_i,c
   664                           
   665                           ; BSR set to: 0
   666  0001EE  BE1E               	btfsc	_i+1,7,c
   667  0001F0  D006               	goto	l239
   668  0001F2  501E               	movf	_i+1,w,c
   669  0001F4  E182               	bnz	l234
   670  0001F6  0E3D               	movlw	61
   671  0001F8  5C1D               	subwf	_i,w,c
   672  0001FA  B0D8               	btfsc	status,0,c
   673  0001FC  D77E               	goto	l234
   674  0001FE                     l239:
   675                           
   676                           ;main.c: 56: {
   677                           ;main.c: 57: for (j=0;j<=3;j++)
   678                           
   679                           ; BSR set to: 0
   680  0001FE  0E00               	movlw	0
   681  000200  6E1C               	movwf	_j+1,c
   682  000202  0E00               	movlw	0
   683  000204  6E1B               	movwf	_j,c
   684  000206                     l1956:
   685  000206  BE1C               	btfsc	_j+1,7,c
   686  000208  D006               	goto	l241
   687  00020A  501C               	movf	_j+1,w,c
   688  00020C  E128               	bnz	l1972
   689  00020E  0E04               	movlw	4
   690  000210  5C1B               	subwf	_j,w,c
   691  000212  B0D8               	btfsc	status,0,c
   692  000214  D024               	goto	u1190
   693  000216                     l241:
   694                           
   695                           ;main.c: 58: {
   696                           ;main.c: 59: LATB=a[j];
   697  000216  0E4A               	movlw	low _a
   698  000218  241B               	addwf	_j,w,c
   699  00021A  6ED9               	movwf	fsr2l,c
   700  00021C  0E00               	movlw	high _a
   701  00021E  201C               	addwfc	_j+1,w,c
   702  000220  6EDA               	movwf	fsr2h,c
   703  000222  50DF               	movf	indf2,w,c
   704  000224  6E8A               	movwf	3978,c	;volatile
   705                           
   706                           ;main.c: 60: while(cnt<2)
   707  000226  D013               	goto	l243
   708  000228                     
   709                           ;main.c: 61: {
   710                           ;main.c: 62: LATC=b[c[j]];
   711  000228  0E46               	movlw	low _c
   712  00022A  241B               	addwf	_j,w,c
   713  00022C  6ED9               	movwf	fsr2l,c
   714  00022E  0E00               	movlw	high _c
   715  000230  201C               	addwfc	_j+1,w,c
   716  000232  6EDA               	movwf	fsr2h,c
   717  000234  50DF               	movf	indf2,w,c
   718  000236  0100               	movlb	0	; () banked
   719  000238  6F8E               	movwf	??_main& (0+255),b
   720  00023A  518E               	movf	??_main& (0+255),w,b
   721  00023C  0D01               	mullw	1
   722  00023E  0E8F               	movlw	low _b
   723  000240  24F3               	addwf	prodl,w,c
   724  000242  6ED9               	movwf	fsr2l,c
   725  000244  0E00               	movlw	high _b
   726  000246  20F4               	addwfc	prodh,w,c
   727  000248  6EDA               	movwf	fsr2h,c
   728  00024A  50DF               	movf	indf2,w,c
   729  00024C  6E8B               	movwf	3979,c	;volatile
   730  00024E                     l243:
   731                           
   732                           ; BSR set to: 0
   733  00024E  0E01               	movlw	1
   734  000250  6425               	cpfsgt	_cnt,c	;volatile
   735  000252  D7EA               	goto	l244
   736                           
   737                           ;main.c: 63: }
   738                           ;main.c: 64: cnt=1;
   739  000254  0E01               	movlw	1
   740  000256  6E25               	movwf	_cnt,c	;volatile
   741  000258  4A1B               	infsnz	_j,f,c
   742  00025A  2A1C               	incf	_j+1,f,c
   743  00025C  D7D4               	goto	l1956
   744  00025E                     u1190:
   745  00025E                     l1972:
   746  00025E  4A1D               	infsnz	_i,f,c
   747  000260  2A1E               	incf	_i+1,f,c
   748  000262  BE1E               	btfsc	_i+1,7,c
   749  000264  D7CC               	goto	l239
   750  000266  501E               	movf	_i+1,w,c
   751  000268  E101               	bnz	u1200
   752  00026A  D7C5               	goto	L1
   753  00026C                     u1200:
   754  00026C  D746               	goto	l234
   755  00026E                     __end_of_main:
   756                           	opt stack 0
   757                           tblptru	equ	0xFF8
   758                           tblptrh	equ	0xFF7
   759                           tblptrl	equ	0xFF6
   760                           tablat	equ	0xFF5
   761                           prodh	equ	0xFF4
   762                           prodl	equ	0xFF3
   763                           intcon	equ	0xFF2
   764                           postinc0	equ	0xFEE
   765                           wreg	equ	0xFE8
   766                           postdec1	equ	0xFE5
   767                           fsr1l	equ	0xFE1
   768                           indf2	equ	0xFDF
   769                           fsr2h	equ	0xFDA
   770                           fsr2l	equ	0xFD9
   771                           status	equ	0xFD8
   772                           
   773 ;; *************** function ___wmul *****************
   774 ;; Defined at:
   775 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;  multiplier      2    0[BANK0 ] unsigned int 
   778 ;;  multiplicand    2    2[BANK0 ] unsigned int 
   779 ;; Auto vars:     Size  Location     Type
   780 ;;  product         2    4[BANK0 ] unsigned int 
   781 ;; Return value:  Size  Location     Type
   782 ;;                  2    0[BANK0 ] unsigned int 
   783 ;; Registers used:
   784 ;;		wreg, status,2, status,0, prodl, prodh
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 0/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   790 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   793 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   794 ;;Total ram usage:        6 bytes
   795 ;; Hardware stack levels used:    1
   796 ;; Hardware stack levels required when called:    4
   797 ;; This function calls:
   798 ;;		Nothing
   799 ;; This function is called by:
   800 ;;		_main
   801 ;;		_transTWOtoTEN
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text1
   806  000586                     __ptext1:
   807                           	opt stack 0
   808  000586                     ___wmul:
   809                           	opt stack 26
   810                           
   811                           ;incstack = 0
   812  000586  0100               	movlb	0	; () banked
   813  000588  5180               	movf	___wmul@multiplier& (0+255),w,b
   814  00058A  0382               	mulwf	___wmul@multiplicand& (0+255),b
   815  00058C  CFF3 F084          	movff	prodl,___wmul@product
   816  000590  CFF4 F085          	movff	prodh,___wmul@product+1
   817  000594  5180               	movf	___wmul@multiplier& (0+255),w,b
   818  000596  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
   819  000598  50F3               	movf	prodl,w,c
   820  00059A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
   821  00059C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
   822  00059E  0382               	mulwf	___wmul@multiplicand& (0+255),b
   823  0005A0  50F3               	movf	prodl,w,c
   824  0005A2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
   825                           
   826                           ; BSR set to: 0
   827  0005A4  C084  F080         	movff	___wmul@product,?___wmul
   828  0005A8  C085  F081         	movff	___wmul@product+1,?___wmul+1
   829  0005AC  0012               	return	
   830  0005AE                     __end_of___wmul:
   831                           	opt stack 0
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           prodh	equ	0xFF4
   837                           prodl	equ	0xFF3
   838                           intcon	equ	0xFF2
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           postdec1	equ	0xFE5
   842                           fsr1l	equ	0xFE1
   843                           indf2	equ	0xFDF
   844                           fsr2h	equ	0xFDA
   845                           fsr2l	equ	0xFD9
   846                           status	equ	0xFD8
   847                           
   848 ;; *************** function ___awmod *****************
   849 ;; Defined at:
   850 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  dividend        2    0[BANK0 ] int 
   853 ;;  divisor         2    2[BANK0 ] int 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  sign            1    5[BANK0 ] unsigned char 
   856 ;;  counter         1    4[BANK0 ] unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  2    0[BANK0 ] int 
   859 ;; Registers used:
   860 ;;		wreg, status,2, status,0
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   866 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   867 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   869 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   870 ;;Total ram usage:        6 bytes
   871 ;; Hardware stack levels used:    1
   872 ;; Hardware stack levels required when called:    4
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_main
   877 ;;		_transTWOtoTEN
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text2
   882  000416                     __ptext2:
   883                           	opt stack 0
   884  000416                     ___awmod:
   885                           	opt stack 26
   886                           
   887                           ; BSR set to: 0
   888                           ;incstack = 0
   889  000416  0E00               	movlw	0
   890  000418  0100               	movlb	0	; () banked
   891  00041A  6F85               	movwf	___awmod@sign& (0+255),b
   892                           
   893                           ; BSR set to: 0
   894  00041C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
   895  00041E  D006               	goto	l579
   896                           
   897                           ; BSR set to: 0
   898  000420  6D80               	negf	___awmod@dividend& (0+255),b
   899  000422  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
   900  000424  B0D8               	btfsc	status,0,c
   901  000426  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
   902                           
   903                           ; BSR set to: 0
   904  000428  0E01               	movlw	1
   905  00042A  6F85               	movwf	___awmod@sign& (0+255),b
   906  00042C                     l579:
   907                           
   908                           ; BSR set to: 0
   909                           
   910                           ; BSR set to: 0
   911  00042C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
   912  00042E  D004               	goto	l580
   913                           
   914                           ; BSR set to: 0
   915  000430  6D82               	negf	___awmod@divisor& (0+255),b
   916  000432  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
   917  000434  B0D8               	btfsc	status,0,c
   918  000436  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
   919  000438                     l580:
   920                           
   921                           ; BSR set to: 0
   922                           
   923                           ; BSR set to: 0
   924  000438  5182               	movf	___awmod@divisor& (0+255),w,b
   925  00043A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
   926  00043C  B4D8               	btfsc	status,2,c
   927  00043E  D018               	goto	l587
   928                           
   929                           ; BSR set to: 0
   930  000440  0E01               	movlw	1
   931  000442  6F84               	movwf	___awmod@counter& (0+255),b
   932  000444  D004               	goto	l582
   933  000446                     
   934                           ; BSR set to: 0
   935                           
   936                           ; BSR set to: 0
   937  000446  90D8               	bcf	status,0,c
   938  000448  3782               	rlcf	___awmod@divisor& (0+255),f,b
   939  00044A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
   940  00044C  2B84               	incf	___awmod@counter& (0+255),f,b
   941  00044E                     l582:
   942                           
   943                           ; BSR set to: 0
   944                           
   945                           ; BSR set to: 0
   946  00044E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
   947  000450  D7FA               	goto	l583
   948  000452                     u1110:
   949                           
   950                           ; BSR set to: 0
   951                           
   952                           ; BSR set to: 0
   953                           
   954                           ; BSR set to: 0
   955  000452  5182               	movf	___awmod@divisor& (0+255),w,b
   956  000454  5D80               	subwf	___awmod@dividend& (0+255),w,b
   957  000456  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
   958  000458  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
   959  00045A  A0D8               	btfss	status,0,c
   960  00045C  D004               	goto	l586
   961                           
   962                           ; BSR set to: 0
   963  00045E  5182               	movf	___awmod@divisor& (0+255),w,b
   964  000460  5F80               	subwf	___awmod@dividend& (0+255),f,b
   965  000462  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
   966  000464  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
   967  000466                     l586:
   968                           
   969                           ; BSR set to: 0
   970                           
   971                           ; BSR set to: 0
   972  000466  90D8               	bcf	status,0,c
   973  000468  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
   974  00046A  3382               	rrcf	___awmod@divisor& (0+255),f,b
   975                           
   976                           ; BSR set to: 0
   977  00046C  2F84               	decfsz	___awmod@counter& (0+255),f,b
   978  00046E  D7F1               	goto	u1110
   979  000470                     l587:
   980                           
   981                           ; BSR set to: 0
   982                           
   983                           ; BSR set to: 0
   984                           
   985                           ; BSR set to: 0
   986  000470  5185               	movf	___awmod@sign& (0+255),w,b
   987  000472  B4D8               	btfsc	status,2,c
   988  000474  D004               	goto	l588
   989                           
   990                           ; BSR set to: 0
   991  000476  6D80               	negf	___awmod@dividend& (0+255),b
   992  000478  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
   993  00047A  B0D8               	btfsc	status,0,c
   994  00047C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
   995  00047E                     l588:
   996                           
   997                           ; BSR set to: 0
   998                           
   999                           ; BSR set to: 0
  1000  00047E  C080  F080         	movff	___awmod@dividend,?___awmod
  1001  000482  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  1002  000486  0012               	return	
  1003  000488                     __end_of___awmod:
  1004                           	opt stack 0
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           prodh	equ	0xFF4
  1010                           prodl	equ	0xFF3
  1011                           intcon	equ	0xFF2
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           postdec1	equ	0xFE5
  1015                           fsr1l	equ	0xFE1
  1016                           indf2	equ	0xFDF
  1017                           fsr2h	equ	0xFDA
  1018                           fsr2l	equ	0xFD9
  1019                           status	equ	0xFD8
  1020                           
  1021 ;; *************** function ___awdiv *****************
  1022 ;; Defined at:
  1023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;  dividend        2    6[BANK0 ] int 
  1026 ;;  divisor         2    8[BANK0 ] int 
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  quotient        2   12[BANK0 ] int 
  1029 ;;  sign            1   11[BANK0 ] unsigned char 
  1030 ;;  counter         1   10[BANK0 ] unsigned char 
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  2    6[BANK0 ] int 
  1033 ;; Registers used:
  1034 ;;		wreg, status,2, status,0
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1040 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1041 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1043 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1044 ;;Total ram usage:        8 bytes
  1045 ;; Hardware stack levels used:    1
  1046 ;; Hardware stack levels required when called:    4
  1047 ;; This function calls:
  1048 ;;		Nothing
  1049 ;; This function is called by:
  1050 ;;		_main
  1051 ;;		_transTWOtoTEN
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text3
  1056  000312                     __ptext3:
  1057                           	opt stack 0
  1058  000312                     ___awdiv:
  1059                           	opt stack 26
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;incstack = 0
  1063  000312  0E00               	movlw	0
  1064  000314  0100               	movlb	0	; () banked
  1065  000316  6F8B               	movwf	___awdiv@sign& (0+255),b
  1066                           
  1067                           ; BSR set to: 0
  1068  000318  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1069  00031A  D006               	goto	l566
  1070                           
  1071                           ; BSR set to: 0
  1072  00031C  6D88               	negf	___awdiv@divisor& (0+255),b
  1073  00031E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1074  000320  B0D8               	btfsc	status,0,c
  1075  000322  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1076                           
  1077                           ; BSR set to: 0
  1078  000324  0E01               	movlw	1
  1079  000326  6F8B               	movwf	___awdiv@sign& (0+255),b
  1080  000328                     l566:
  1081                           
  1082                           ; BSR set to: 0
  1083                           
  1084                           ; BSR set to: 0
  1085  000328  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1086  00032A  D006               	goto	l567
  1087                           
  1088                           ; BSR set to: 0
  1089  00032C  6D86               	negf	___awdiv@dividend& (0+255),b
  1090  00032E  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1091  000330  B0D8               	btfsc	status,0,c
  1092  000332  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1093                           
  1094                           ; BSR set to: 0
  1095  000334  0E01               	movlw	1
  1096  000336  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  1097  000338                     l567:
  1098                           
  1099                           ; BSR set to: 0
  1100                           
  1101                           ; BSR set to: 0
  1102  000338  0E00               	movlw	0
  1103  00033A  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  1104  00033C  0E00               	movlw	0
  1105  00033E  6F8C               	movwf	___awdiv@quotient& (0+255),b
  1106                           
  1107                           ; BSR set to: 0
  1108  000340  5188               	movf	___awdiv@divisor& (0+255),w,b
  1109  000342  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1110  000344  B4D8               	btfsc	status,2,c
  1111  000346  D01C               	goto	l574
  1112                           
  1113                           ; BSR set to: 0
  1114  000348  0E01               	movlw	1
  1115  00034A  6F8A               	movwf	___awdiv@counter& (0+255),b
  1116  00034C  D004               	goto	l569
  1117  00034E                     
  1118                           ; BSR set to: 0
  1119                           
  1120                           ; BSR set to: 0
  1121  00034E  90D8               	bcf	status,0,c
  1122  000350  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  1123  000352  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1124  000354  2B8A               	incf	___awdiv@counter& (0+255),f,b
  1125  000356                     l569:
  1126                           
  1127                           ; BSR set to: 0
  1128                           
  1129                           ; BSR set to: 0
  1130  000356  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1131  000358  D7FA               	goto	l570
  1132  00035A                     u1050:
  1133                           
  1134                           ; BSR set to: 0
  1135                           
  1136                           ; BSR set to: 0
  1137                           
  1138                           ; BSR set to: 0
  1139  00035A  90D8               	bcf	status,0,c
  1140  00035C  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  1141  00035E  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1142                           
  1143                           ; BSR set to: 0
  1144  000360  5188               	movf	___awdiv@divisor& (0+255),w,b
  1145  000362  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  1146  000364  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1147  000366  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1148  000368  A0D8               	btfss	status,0,c
  1149  00036A  D005               	goto	l573
  1150                           
  1151                           ; BSR set to: 0
  1152  00036C  5188               	movf	___awdiv@divisor& (0+255),w,b
  1153  00036E  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  1154  000370  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1155  000372  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1156                           
  1157                           ; BSR set to: 0
  1158  000374  818C               	bsf	___awdiv@quotient& (0+255),0,b
  1159  000376                     l573:
  1160                           
  1161                           ; BSR set to: 0
  1162                           
  1163                           ; BSR set to: 0
  1164  000376  90D8               	bcf	status,0,c
  1165  000378  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1166  00037A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  1167                           
  1168                           ; BSR set to: 0
  1169  00037C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  1170  00037E  D7ED               	goto	u1050
  1171  000380                     l574:
  1172                           
  1173                           ; BSR set to: 0
  1174                           
  1175                           ; BSR set to: 0
  1176                           
  1177                           ; BSR set to: 0
  1178  000380  518B               	movf	___awdiv@sign& (0+255),w,b
  1179  000382  B4D8               	btfsc	status,2,c
  1180  000384  D004               	goto	l575
  1181                           
  1182                           ; BSR set to: 0
  1183  000386  6D8C               	negf	___awdiv@quotient& (0+255),b
  1184  000388  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1185  00038A  B0D8               	btfsc	status,0,c
  1186  00038C  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1187  00038E                     l575:
  1188                           
  1189                           ; BSR set to: 0
  1190                           
  1191                           ; BSR set to: 0
  1192  00038E  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  1193  000392  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  1194  000396  0012               	return	
  1195  000398                     __end_of___awdiv:
  1196                           	opt stack 0
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           prodh	equ	0xFF4
  1202                           prodl	equ	0xFF3
  1203                           intcon	equ	0xFF2
  1204                           postinc0	equ	0xFEE
  1205                           wreg	equ	0xFE8
  1206                           postdec1	equ	0xFE5
  1207                           fsr1l	equ	0xFE1
  1208                           indf2	equ	0xFDF
  1209                           fsr2h	equ	0xFDA
  1210                           fsr2l	equ	0xFD9
  1211                           status	equ	0xFD8
  1212                           
  1213 ;; *************** function _SYSTEM_Initialize *****************
  1214 ;; Defined at:
  1215 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;		None
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;		None
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      void 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0, cstack
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;Total ram usage:        0 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    6
  1236 ;; This function calls:
  1237 ;;		_ADC_Initialize
  1238 ;;		_EUSART1_Initialize
  1239 ;;		_INTERRUPT_Initialize
  1240 ;;		_OSCILLATOR_Initialize
  1241 ;;		_PIN_MANAGER_Initialize
  1242 ;;		_TMR0_Initialize
  1243 ;; This function is called by:
  1244 ;;		_main
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text4
  1249  0005F6                     __ptext4:
  1250                           	opt stack 0
  1251  0005F6                     _SYSTEM_Initialize:
  1252                           	opt stack 24
  1253                           
  1254                           ;mcc.c: 53: INTERRUPT_Initialize();
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;incstack = 0
  1258  0005F6  EC59  F003         	call	_INTERRUPT_Initialize	;wreg free
  1259                           
  1260                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  1261  0005FA  EC77  F002         	call	_PIN_MANAGER_Initialize	;wreg free
  1262                           
  1263                           ;mcc.c: 55: OSCILLATOR_Initialize();
  1264  0005FE  EC1F  F003         	call	_OSCILLATOR_Initialize	;wreg free
  1265                           
  1266                           ;mcc.c: 56: ADC_Initialize();
  1267  000602  EC08  F003         	call	_ADC_Initialize	;wreg free
  1268                           
  1269                           ;mcc.c: 57: TMR0_Initialize();
  1270  000606  ECD7  F002         	call	_TMR0_Initialize	;wreg free
  1271                           
  1272                           ;mcc.c: 58: EUSART1_Initialize();
  1273  00060A  ECCC  F001         	call	_EUSART1_Initialize	;wreg free
  1274  00060E  0012               	return		;funcret
  1275  000610                     __end_of_SYSTEM_Initialize:
  1276                           	opt stack 0
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           prodh	equ	0xFF4
  1282                           prodl	equ	0xFF3
  1283                           intcon	equ	0xFF2
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           postdec1	equ	0xFE5
  1287                           fsr1l	equ	0xFE1
  1288                           indf2	equ	0xFDF
  1289                           fsr2h	equ	0xFDA
  1290                           fsr2l	equ	0xFD9
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _TMR0_Initialize *****************
  1294 ;; Defined at:
  1295 ;;		line 67 in file "mcc_generated_files/tmr0.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;		None
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, status,2, status,0, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;Total ram usage:        0 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    5
  1316 ;; This function calls:
  1317 ;;		_TMR0_SetInterruptHandler
  1318 ;; This function is called by:
  1319 ;;		_SYSTEM_Initialize
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text5
  1324  0005AE                     __ptext5:
  1325                           	opt stack 0
  1326  0005AE                     _TMR0_Initialize:
  1327                           	opt stack 24
  1328                           
  1329                           ;tmr0.c: 72: TMR0H = 0x00;
  1330                           
  1331                           ;incstack = 0
  1332  0005AE  0E00               	movlw	0
  1333  0005B0  6ED7               	movwf	4055,c	;volatile
  1334                           
  1335                           ;tmr0.c: 75: TMR0L = 0xFE;
  1336  0005B2  0EFE               	movlw	254
  1337  0005B4  6ED6               	movwf	4054,c	;volatile
  1338                           
  1339                           ;tmr0.c: 79: timer0ReloadVal = 254;
  1340  0005B6  0EFE               	movlw	254
  1341  0005B8  6E45               	movwf	_timer0ReloadVal,c	;volatile
  1342                           
  1343                           ;tmr0.c: 82: INTCONbits.TMR0IF = 0;
  1344  0005BA  94F2               	bcf	intcon,2,c	;volatile
  1345                           
  1346                           ;tmr0.c: 85: INTCONbits.TMR0IE = 1;
  1347  0005BC  8AF2               	bsf	intcon,5,c	;volatile
  1348                           
  1349                           ;tmr0.c: 88: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  1350  0005BE  0EBE               	movlw	low _TMR0_DefaultInterruptHandler
  1351  0005C0  0100               	movlb	0	; () banked
  1352  0005C2  6F80               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1353  0005C4  0E06               	movlw	high _TMR0_DefaultInterruptHandler
  1354  0005C6  6F81               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1355  0005C8  EC31  F003         	call	_TMR0_SetInterruptHandler	;wreg free
  1356                           
  1357                           ;tmr0.c: 91: T0CON = 0xD7;
  1358  0005CC  0ED7               	movlw	215
  1359  0005CE  6ED5               	movwf	4053,c	;volatile
  1360  0005D0  0012               	return		;funcret
  1361  0005D2                     __end_of_TMR0_Initialize:
  1362                           	opt stack 0
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           prodh	equ	0xFF4
  1368                           prodl	equ	0xFF3
  1369                           intcon	equ	0xFF2
  1370                           postinc0	equ	0xFEE
  1371                           wreg	equ	0xFE8
  1372                           postdec1	equ	0xFE5
  1373                           fsr1l	equ	0xFE1
  1374                           indf2	equ	0xFDF
  1375                           fsr2h	equ	0xFDA
  1376                           fsr2l	equ	0xFD9
  1377                           status	equ	0xFD8
  1378                           
  1379 ;; *************** function _TMR0_SetInterruptHandler *****************
  1380 ;; Defined at:
  1381 ;;		line 147 in file "mcc_generated_files/tmr0.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  1384 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;		None
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2, status,0
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1396 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;Total ram usage:        2 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    4
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_TMR0_Initialize
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text6
  1411  000662                     __ptext6:
  1412                           	opt stack 0
  1413  000662                     _TMR0_SetInterruptHandler:
  1414                           	opt stack 24
  1415                           
  1416                           ;tmr0.c: 148: TMR0_InterruptHandler = InterruptHandler;
  1417                           
  1418                           ;incstack = 0
  1419  000662  C080  F042         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  1420  000666  C081  F043         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  1421  00066A  0012               	return		;funcret
  1422  00066C                     __end_of_TMR0_SetInterruptHandler:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           prodh	equ	0xFF4
  1429                           prodl	equ	0xFF3
  1430                           intcon	equ	0xFF2
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postdec1	equ	0xFE5
  1434                           fsr1l	equ	0xFE1
  1435                           indf2	equ	0xFDF
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _PIN_MANAGER_Initialize *****************
  1441 ;; Defined at:
  1442 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;Total ram usage:        0 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_SYSTEM_Initialize
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text7
  1471  0004EE                     __ptext7:
  1472                           	opt stack 0
  1473  0004EE                     _PIN_MANAGER_Initialize:
  1474                           	opt stack 25
  1475                           
  1476                           ;pin_manager.c: 60: LATE = 0x00;
  1477                           
  1478                           ;incstack = 0
  1479  0004EE  0E00               	movlw	0
  1480  0004F0  6E8D               	movwf	3981,c	;volatile
  1481                           
  1482                           ;pin_manager.c: 61: LATD = 0x00;
  1483  0004F2  0E00               	movlw	0
  1484  0004F4  6E8C               	movwf	3980,c	;volatile
  1485                           
  1486                           ;pin_manager.c: 62: LATA = 0x00;
  1487  0004F6  0E00               	movlw	0
  1488  0004F8  6E89               	movwf	3977,c	;volatile
  1489                           
  1490                           ;pin_manager.c: 63: LATB = 0x00;
  1491  0004FA  0E00               	movlw	0
  1492  0004FC  6E8A               	movwf	3978,c	;volatile
  1493                           
  1494                           ;pin_manager.c: 64: LATC = 0x00;
  1495  0004FE  0E00               	movlw	0
  1496  000500  6E8B               	movwf	3979,c	;volatile
  1497                           
  1498                           ;pin_manager.c: 69: TRISE = 0x07;
  1499  000502  0E07               	movlw	7
  1500  000504  6E96               	movwf	3990,c	;volatile
  1501                           
  1502                           ;pin_manager.c: 70: TRISA = 0xFF;
  1503  000506  6892               	setf	3986,c	;volatile
  1504                           
  1505                           ;pin_manager.c: 71: TRISB = 0xF0;
  1506  000508  0EF0               	movlw	240
  1507  00050A  6E93               	movwf	3987,c	;volatile
  1508                           
  1509                           ;pin_manager.c: 72: TRISC = 0x00;
  1510  00050C  0E00               	movlw	0
  1511  00050E  6E94               	movwf	3988,c	;volatile
  1512                           
  1513                           ;pin_manager.c: 73: TRISD = 0xFF;
  1514  000510  6895               	setf	3989,c	;volatile
  1515                           
  1516                           ;pin_manager.c: 78: ANSELD = 0xFF;
  1517  000512  010F               	movlb	15	; () banked
  1518  000514  693B               	setf	59,b	;volatile
  1519                           
  1520                           ;pin_manager.c: 79: ANSELC = 0xFC;
  1521  000516  0EFC               	movlw	252
  1522  000518  6F3A               	movwf	58,b	;volatile
  1523                           
  1524                           ;pin_manager.c: 80: ANSELB = 0x3F;
  1525  00051A  0E3F               	movlw	63
  1526  00051C  6F39               	movwf	57,b	;volatile
  1527                           
  1528                           ;pin_manager.c: 81: ANSELE = 0x07;
  1529  00051E  0E07               	movlw	7
  1530  000520  6F3C               	movwf	60,b	;volatile
  1531                           
  1532                           ;pin_manager.c: 82: ANSELA = 0x2F;
  1533  000522  0E2F               	movlw	47
  1534  000524  6F38               	movwf	56,b	;volatile
  1535                           
  1536                           ;pin_manager.c: 87: WPUB = 0x00;
  1537  000526  0E00               	movlw	0
  1538  000528  6E61               	movwf	3937,c	;volatile
  1539                           
  1540                           ; BSR set to: 15
  1541                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 1;
  1542  00052A  8EF1               	bsf	intcon2,7,c	;volatile
  1543                           
  1544                           ; BSR set to: 15
  1545  00052C  0012               	return		;funcret
  1546  00052E                     __end_of_PIN_MANAGER_Initialize:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           prodh	equ	0xFF4
  1553                           prodl	equ	0xFF3
  1554                           intcon	equ	0xFF2
  1555                           intcon2	equ	0xFF1
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           indf2	equ	0xFDF
  1561                           fsr2h	equ	0xFDA
  1562                           fsr2l	equ	0xFD9
  1563                           status	equ	0xFD8
  1564                           
  1565 ;; *************** function _OSCILLATOR_Initialize *****************
  1566 ;; Defined at:
  1567 ;;		line 61 in file "mcc_generated_files/mcc.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;		None
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;		None
  1572 ;; Return value:  Size  Location     Type
  1573 ;;                  1    wreg      void 
  1574 ;; Registers used:
  1575 ;;		wreg, status,2
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;Total ram usage:        0 bytes
  1586 ;; Hardware stack levels used:    1
  1587 ;; Hardware stack levels required when called:    4
  1588 ;; This function calls:
  1589 ;;		Nothing
  1590 ;; This function is called by:
  1591 ;;		_SYSTEM_Initialize
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           	psect	text8
  1596  00063E                     __ptext8:
  1597                           	opt stack 0
  1598  00063E                     _OSCILLATOR_Initialize:
  1599                           	opt stack 25
  1600                           
  1601                           ;mcc.c: 64: OSCCON = 0x30;
  1602                           
  1603                           ; BSR set to: 15
  1604                           ;incstack = 0
  1605  00063E  0E30               	movlw	48
  1606  000640  6ED3               	movwf	4051,c	;volatile
  1607                           
  1608                           ;mcc.c: 66: OSCCON2 = 0x04;
  1609  000642  0E04               	movlw	4
  1610  000644  6ED2               	movwf	4050,c	;volatile
  1611                           
  1612                           ;mcc.c: 68: OSCTUNE = 0x00;
  1613  000646  0E00               	movlw	0
  1614  000648  6E9B               	movwf	3995,c	;volatile
  1615  00064A  0012               	return		;funcret
  1616  00064C                     __end_of_OSCILLATOR_Initialize:
  1617                           	opt stack 0
  1618                           tblptru	equ	0xFF8
  1619                           tblptrh	equ	0xFF7
  1620                           tblptrl	equ	0xFF6
  1621                           tablat	equ	0xFF5
  1622                           prodh	equ	0xFF4
  1623                           prodl	equ	0xFF3
  1624                           intcon	equ	0xFF2
  1625                           intcon2	equ	0xFF1
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1l	equ	0xFE1
  1630                           indf2	equ	0xFDF
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _INTERRUPT_Initialize *****************
  1636 ;; Defined at:
  1637 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		None
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;Total ram usage:        0 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:    4
  1658 ;; This function calls:
  1659 ;;		Nothing
  1660 ;; This function is called by:
  1661 ;;		_SYSTEM_Initialize
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text9
  1666  0006B2                     __ptext9:
  1667                           	opt stack 0
  1668  0006B2                     _INTERRUPT_Initialize:
  1669                           	opt stack 25
  1670                           
  1671                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  1672                           
  1673                           ;incstack = 0
  1674  0006B2  9ED0               	bcf	4048,7,c	;volatile
  1675  0006B4  0012               	return		;funcret
  1676  0006B6                     __end_of_INTERRUPT_Initialize:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           intcon	equ	0xFF2
  1685                           intcon2	equ	0xFF1
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postdec1	equ	0xFE5
  1689                           fsr1l	equ	0xFE1
  1690                           indf2	equ	0xFDF
  1691                           fsr2h	equ	0xFDA
  1692                           fsr2l	equ	0xFD9
  1693                           status	equ	0xFD8
  1694                           
  1695 ;; *************** function _EUSART1_Initialize *****************
  1696 ;; Defined at:
  1697 ;;		line 88 in file "mcc_generated_files/eusart1.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;		None
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;		None
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1715 ;;Total ram usage:        0 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    5
  1718 ;; This function calls:
  1719 ;;		_EUSART1_SetErrorHandler
  1720 ;;		_EUSART1_SetFramingErrorHandler
  1721 ;;		_EUSART1_SetOverrunErrorHandler
  1722 ;;		_EUSART1_SetRxInterruptHandler
  1723 ;;		_EUSART1_SetTxInterruptHandler
  1724 ;; This function is called by:
  1725 ;;		_SYSTEM_Initialize
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text10
  1730  000398                     __ptext10:
  1731                           	opt stack 0
  1732  000398                     _EUSART1_Initialize:
  1733                           	opt stack 24
  1734                           
  1735                           ;eusart1.c: 91: PIE1bits.RC1IE = 0;
  1736                           
  1737                           ;incstack = 0
  1738  000398  9A9D               	bcf	3997,5,c	;volatile
  1739                           
  1740                           ;eusart1.c: 92: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  1741  00039A  0E6E               	movlw	low _EUSART1_Receive_ISR
  1742  00039C  0100               	movlb	0	; () banked
  1743  00039E  6F80               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler& (0+255),b
  1744  0003A0  0E02               	movlw	high _EUSART1_Receive_ISR
  1745  0003A2  6F81               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  1746  0003A4  EC3B  F003         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  1747                           
  1748                           ;eusart1.c: 93: PIE1bits.TX1IE = 0;
  1749  0003A8  989D               	bcf	3997,4,c	;volatile
  1750                           
  1751                           ;eusart1.c: 94: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  1752  0003AA  0E2E               	movlw	low _EUSART1_Transmit_ISR
  1753  0003AC  0100               	movlb	0	; () banked
  1754  0003AE  6F80               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler& (0+255),b
  1755  0003B0  0E05               	movlw	high _EUSART1_Transmit_ISR
  1756  0003B2  6F81               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  1757  0003B4  EC36  F003         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  1758                           
  1759                           ;eusart1.c: 98: BAUDCON1 = 0x08;
  1760  0003B8  0E08               	movlw	8
  1761  0003BA  6EB8               	movwf	4024,c	;volatile
  1762                           
  1763                           ;eusart1.c: 101: RCSTA1 = 0x80;
  1764  0003BC  0E80               	movlw	128
  1765  0003BE  6EAB               	movwf	4011,c	;volatile
  1766                           
  1767                           ;eusart1.c: 104: TXSTA1 = 0x04;
  1768  0003C0  0E04               	movlw	4
  1769  0003C2  6EAC               	movwf	4012,c	;volatile
  1770                           
  1771                           ;eusart1.c: 107: SPBRG1 = 0x17;
  1772  0003C4  0E17               	movlw	23
  1773  0003C6  6EAF               	movwf	4015,c	;volatile
  1774                           
  1775                           ;eusart1.c: 110: SPBRGH1 = 0x00;
  1776  0003C8  0E00               	movlw	0
  1777  0003CA  6EB0               	movwf	4016,c	;volatile
  1778                           
  1779                           ;eusart1.c: 113: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
  1780  0003CC  0EC0               	movlw	low _EUSART1_DefaultFramingErrorHandler
  1781  0003CE  0100               	movlb	0	; () banked
  1782  0003D0  6F80               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler& (0+255),b
  1783  0003D2  0E06               	movlw	high _EUSART1_DefaultFramingErrorHandler
  1784  0003D4  6F81               	movwf	(EUSART1_SetFramingErrorHandler@interruptHandler+1)& (0+255),b
  1785  0003D6  EC45  F003         	call	_EUSART1_SetFramingErrorHandler	;wreg free
  1786                           
  1787                           ;eusart1.c: 114: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
  1788  0003DA  0EA6               	movlw	low _EUSART1_DefaultOverrunErrorHandler
  1789  0003DC  0100               	movlb	0	; () banked
  1790  0003DE  6F80               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler& (0+255),b
  1791  0003E0  0E06               	movlw	high _EUSART1_DefaultOverrunErrorHandler
  1792  0003E2  6F81               	movwf	(EUSART1_SetOverrunErrorHandler@interruptHandler+1)& (0+255),b
  1793  0003E4  EC40  F003         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
  1794                           
  1795                           ;eusart1.c: 115: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
  1796  0003E8  0EAC               	movlw	low _EUSART1_DefaultErrorHandler
  1797  0003EA  0100               	movlb	0	; () banked
  1798  0003EC  6F80               	movwf	EUSART1_SetErrorHandler@interruptHandler& (0+255),b
  1799  0003EE  0E06               	movlw	high _EUSART1_DefaultErrorHandler
  1800  0003F0  6F81               	movwf	(EUSART1_SetErrorHandler@interruptHandler+1)& (0+255),b
  1801  0003F2  EC4A  F003         	call	_EUSART1_SetErrorHandler	;wreg free
  1802                           
  1803                           ;eusart1.c: 117: eusart1RxLastError.status = 0;
  1804  0003F6  0E00               	movlw	0
  1805  0003F8  6E1F               	movwf	_eusart1RxLastError,c	;volatile
  1806                           
  1807                           ;eusart1.c: 120: eusart1TxHead = 0;
  1808  0003FA  0E00               	movlw	0
  1809  0003FC  6E24               	movwf	_eusart1TxHead,c	;volatile
  1810                           
  1811                           ;eusart1.c: 121: eusart1TxTail = 0;
  1812  0003FE  0E00               	movlw	0
  1813  000400  6E23               	movwf	_eusart1TxTail,c	;volatile
  1814                           
  1815                           ;eusart1.c: 122: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1816  000402  0E10               	movlw	16
  1817  000404  6E44               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1818                           
  1819                           ;eusart1.c: 124: eusart1RxHead = 0;
  1820  000406  0E00               	movlw	0
  1821  000408  6E22               	movwf	_eusart1RxHead,c	;volatile
  1822                           
  1823                           ;eusart1.c: 125: eusart1RxTail = 0;
  1824  00040A  0E00               	movlw	0
  1825  00040C  6E21               	movwf	_eusart1RxTail,c	;volatile
  1826                           
  1827                           ;eusart1.c: 126: eusart1RxCount = 0;
  1828  00040E  0E00               	movlw	0
  1829  000410  6E20               	movwf	_eusart1RxCount,c	;volatile
  1830                           
  1831                           ;eusart1.c: 129: PIE1bits.RC1IE = 1;
  1832  000412  8A9D               	bsf	3997,5,c	;volatile
  1833  000414  0012               	return		;funcret
  1834  000416                     __end_of_EUSART1_Initialize:
  1835                           	opt stack 0
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           prodh	equ	0xFF4
  1841                           prodl	equ	0xFF3
  1842                           intcon	equ	0xFF2
  1843                           intcon2	equ	0xFF1
  1844                           postinc0	equ	0xFEE
  1845                           wreg	equ	0xFE8
  1846                           postdec1	equ	0xFE5
  1847                           fsr1l	equ	0xFE1
  1848                           indf2	equ	0xFDF
  1849                           fsr2h	equ	0xFDA
  1850                           fsr2l	equ	0xFD9
  1851                           status	equ	0xFD8
  1852                           
  1853 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  1854 ;; Defined at:
  1855 ;;		line 276 in file "mcc_generated_files/eusart1.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  1858 ;;		 -> EUSART1_Transmit_ISR(1), 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;		None
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, status,2, status,0
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1870 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;Total ram usage:        2 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:    4
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_EUSART1_Initialize
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text11
  1885  00066C                     __ptext11:
  1886                           	opt stack 0
  1887  00066C                     _EUSART1_SetTxInterruptHandler:
  1888                           	opt stack 24
  1889                           
  1890                           ;eusart1.c: 277: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  1891                           
  1892                           ;incstack = 0
  1893  00066C  C080  F040         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  1894  000670  C081  F041         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  1895  000674  0012               	return		;funcret
  1896  000676                     __end_of_EUSART1_SetTxInterruptHandler:
  1897                           	opt stack 0
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           prodh	equ	0xFF4
  1903                           prodl	equ	0xFF3
  1904                           intcon	equ	0xFF2
  1905                           intcon2	equ	0xFF1
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           fsr1l	equ	0xFE1
  1910                           indf2	equ	0xFDF
  1911                           fsr2h	equ	0xFDA
  1912                           fsr2l	equ	0xFD9
  1913                           status	equ	0xFD8
  1914                           
  1915 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  1916 ;; Defined at:
  1917 ;;		line 280 in file "mcc_generated_files/eusart1.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  1920 ;;		 -> EUSART1_Receive_ISR(1), 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  1    wreg      void 
  1925 ;; Registers used:
  1926 ;;		wreg, status,2, status,0
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;Total ram usage:        2 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    4
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_EUSART1_Initialize
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text12
  1947  000676                     __ptext12:
  1948                           	opt stack 0
  1949  000676                     _EUSART1_SetRxInterruptHandler:
  1950                           	opt stack 24
  1951                           
  1952                           ;eusart1.c: 281: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  1953                           
  1954                           ;incstack = 0
  1955  000676  C080  F03E         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  1956  00067A  C081  F03F         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  1957  00067E  0012               	return		;funcret
  1958  000680                     __end_of_EUSART1_SetRxInterruptHandler:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           intcon	equ	0xFF2
  1967                           intcon2	equ	0xFF1
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postdec1	equ	0xFE5
  1971                           fsr1l	equ	0xFE1
  1972                           indf2	equ	0xFDF
  1973                           fsr2h	equ	0xFDA
  1974                           fsr2l	equ	0xFD9
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
  1978 ;; Defined at:
  1979 ;;		line 268 in file "mcc_generated_files/eusart1.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  1982 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  1    wreg      void 
  1987 ;; Registers used:
  1988 ;;		wreg, status,2, status,0
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1994 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;Total ram usage:        2 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    4
  2001 ;; This function calls:
  2002 ;;		Nothing
  2003 ;; This function is called by:
  2004 ;;		_EUSART1_Initialize
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text13
  2009  000680                     __ptext13:
  2010                           	opt stack 0
  2011  000680                     _EUSART1_SetOverrunErrorHandler:
  2012                           	opt stack 24
  2013                           
  2014                           ;eusart1.c: 269: EUSART1_OverrunErrorHandler = interruptHandler;
  2015                           
  2016                           ;incstack = 0
  2017  000680  C080  F03A         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
  2018  000684  C081  F03B         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
  2019  000688  0012               	return		;funcret
  2020  00068A                     __end_of_EUSART1_SetOverrunErrorHandler:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           tblptrh	equ	0xFF7
  2024                           tblptrl	equ	0xFF6
  2025                           tablat	equ	0xFF5
  2026                           prodh	equ	0xFF4
  2027                           prodl	equ	0xFF3
  2028                           intcon	equ	0xFF2
  2029                           intcon2	equ	0xFF1
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postdec1	equ	0xFE5
  2033                           fsr1l	equ	0xFE1
  2034                           indf2	equ	0xFDF
  2035                           fsr2h	equ	0xFDA
  2036                           fsr2l	equ	0xFD9
  2037                           status	equ	0xFD8
  2038                           
  2039 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
  2040 ;; Defined at:
  2041 ;;		line 264 in file "mcc_generated_files/eusart1.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  2044 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg, status,2, status,0
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2056 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;Total ram usage:        2 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    4
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_EUSART1_Initialize
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text14
  2071  00068A                     __ptext14:
  2072                           	opt stack 0
  2073  00068A                     _EUSART1_SetFramingErrorHandler:
  2074                           	opt stack 24
  2075                           
  2076                           ;eusart1.c: 265: EUSART1_FramingErrorHandler = interruptHandler;
  2077                           
  2078                           ;incstack = 0
  2079  00068A  C080  F03C         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
  2080  00068E  C081  F03D         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
  2081  000692  0012               	return		;funcret
  2082  000694                     __end_of_EUSART1_SetFramingErrorHandler:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           prodh	equ	0xFF4
  2089                           prodl	equ	0xFF3
  2090                           intcon	equ	0xFF2
  2091                           intcon2	equ	0xFF1
  2092                           postinc0	equ	0xFEE
  2093                           wreg	equ	0xFE8
  2094                           postdec1	equ	0xFE5
  2095                           fsr1l	equ	0xFE1
  2096                           indf2	equ	0xFDF
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _EUSART1_SetErrorHandler *****************
  2102 ;; Defined at:
  2103 ;;		line 272 in file "mcc_generated_files/eusart1.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  2106 ;;		 -> EUSART1_DefaultErrorHandler(1), 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2118 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;Total ram usage:        2 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    4
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_EUSART1_Initialize
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text15
  2133  000694                     __ptext15:
  2134                           	opt stack 0
  2135  000694                     _EUSART1_SetErrorHandler:
  2136                           	opt stack 24
  2137                           
  2138                           ;eusart1.c: 273: EUSART1_ErrorHandler = interruptHandler;
  2139                           
  2140                           ;incstack = 0
  2141  000694  C080  F038         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
  2142  000698  C081  F039         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
  2143  00069C  0012               	return		;funcret
  2144  00069E                     __end_of_EUSART1_SetErrorHandler:
  2145                           	opt stack 0
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           prodh	equ	0xFF4
  2151                           prodl	equ	0xFF3
  2152                           intcon	equ	0xFF2
  2153                           intcon2	equ	0xFF1
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           postdec1	equ	0xFE5
  2157                           fsr1l	equ	0xFE1
  2158                           indf2	equ	0xFDF
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8
  2162                           
  2163 ;; *************** function _ADC_Initialize *****************
  2164 ;; Defined at:
  2165 ;;		line 60 in file "mcc_generated_files/adc.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;		None
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;Total ram usage:        0 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    4
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_SYSTEM_Initialize
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           	psect	text16
  2194  000610                     __ptext16:
  2195                           	opt stack 0
  2196  000610                     _ADC_Initialize:
  2197                           	opt stack 25
  2198                           
  2199                           ;adc.c: 65: ADCON0 = 0x01;
  2200                           
  2201                           ;incstack = 0
  2202  000610  0E01               	movlw	1
  2203  000612  6EC2               	movwf	4034,c	;volatile
  2204                           
  2205                           ;adc.c: 68: ADCON1 = 0x00;
  2206  000614  0E00               	movlw	0
  2207  000616  6EC1               	movwf	4033,c	;volatile
  2208                           
  2209                           ;adc.c: 71: ADCON2 = 0x88;
  2210  000618  0E88               	movlw	136
  2211  00061A  6EC0               	movwf	4032,c	;volatile
  2212                           
  2213                           ;adc.c: 74: ADRESL = 0x00;
  2214  00061C  0E00               	movlw	0
  2215  00061E  6EC3               	movwf	4035,c	;volatile
  2216                           
  2217                           ;adc.c: 77: ADRESH = 0x00;
  2218  000620  0E00               	movlw	0
  2219  000622  6EC4               	movwf	4036,c	;volatile
  2220                           
  2221                           ;adc.c: 80: PIE1bits.ADIE = 1;
  2222  000624  8C9D               	bsf	3997,6,c	;volatile
  2223  000626  0012               	return		;funcret
  2224  000628                     __end_of_ADC_Initialize:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           tblptrh	equ	0xFF7
  2228                           tblptrl	equ	0xFF6
  2229                           tablat	equ	0xFF5
  2230                           prodh	equ	0xFF4
  2231                           prodl	equ	0xFF3
  2232                           intcon	equ	0xFF2
  2233                           intcon2	equ	0xFF1
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           postdec1	equ	0xFE5
  2237                           fsr1l	equ	0xFE1
  2238                           indf2	equ	0xFDF
  2239                           fsr2h	equ	0xFDA
  2240                           fsr2l	equ	0xFD9
  2241                           status	equ	0xFD8
  2242                           
  2243 ;; *************** function _ADC_StartConversion *****************
  2244 ;; Defined at:
  2245 ;;		line 91 in file "mcc_generated_files/adc.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;		None
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;		None
  2250 ;; Return value:  Size  Location     Type
  2251 ;;                  1    wreg      void 
  2252 ;; Registers used:
  2253 ;;		None
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2259 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;Total ram usage:        2 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; Hardware stack levels required when called:    4
  2266 ;; This function calls:
  2267 ;;		Nothing
  2268 ;; This function is called by:
  2269 ;;		_main
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text17
  2274  0006B6                     __ptext17:
  2275                           	opt stack 0
  2276  0006B6                     _ADC_StartConversion:
  2277                           	opt stack 26
  2278                           
  2279                           ;adc.c: 94: ADCON0bits.GO_nDONE = 1;
  2280                           
  2281                           ;incstack = 0
  2282  0006B6  82C2               	bsf	4034,1,c	;volatile
  2283  0006B8  0012               	return		;funcret
  2284  0006BA                     __end_of_ADC_StartConversion:
  2285                           	opt stack 0
  2286                           tblptru	equ	0xFF8
  2287                           tblptrh	equ	0xFF7
  2288                           tblptrl	equ	0xFF6
  2289                           tablat	equ	0xFF5
  2290                           prodh	equ	0xFF4
  2291                           prodl	equ	0xFF3
  2292                           intcon	equ	0xFF2
  2293                           intcon2	equ	0xFF1
  2294                           postinc0	equ	0xFEE
  2295                           wreg	equ	0xFE8
  2296                           postdec1	equ	0xFE5
  2297                           fsr1l	equ	0xFE1
  2298                           indf2	equ	0xFDF
  2299                           fsr2h	equ	0xFDA
  2300                           fsr2l	equ	0xFD9
  2301                           status	equ	0xFD8
  2302                           
  2303 ;; *************** function _ADC_IsConversionDone *****************
  2304 ;; Defined at:
  2305 ;;		line 98 in file "mcc_generated_files/adc.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;		None
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;		None
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      unsigned char 
  2312 ;; Registers used:
  2313 ;;		wreg
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;Total ram usage:        0 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    4
  2326 ;; This function calls:
  2327 ;;		Nothing
  2328 ;; This function is called by:
  2329 ;;		_main
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text18
  2334  00064C                     __ptext18:
  2335                           	opt stack 0
  2336  00064C                     _ADC_IsConversionDone:
  2337                           	opt stack 26
  2338                           
  2339                           ;adc.c: 101: return ((bool)(!ADCON0bits.GO_nDONE));
  2340                           
  2341                           ;incstack = 0
  2342  00064C  B2C2               	btfsc	4034,1,c	;volatile
  2343  00064E  D002               	goto	u1000
  2344  000650  0E01               	movlw	1
  2345  000652  0012               	return	
  2346  000654                     u1000:
  2347  000654  0E00               	movlw	0
  2348  000656  0012               	return	
  2349  000658                     __end_of_ADC_IsConversionDone:
  2350                           	opt stack 0
  2351                           tblptru	equ	0xFF8
  2352                           tblptrh	equ	0xFF7
  2353                           tblptrl	equ	0xFF6
  2354                           tablat	equ	0xFF5
  2355                           prodh	equ	0xFF4
  2356                           prodl	equ	0xFF3
  2357                           intcon	equ	0xFF2
  2358                           intcon2	equ	0xFF1
  2359                           postinc0	equ	0xFEE
  2360                           wreg	equ	0xFE8
  2361                           postdec1	equ	0xFE5
  2362                           fsr1l	equ	0xFE1
  2363                           indf2	equ	0xFDF
  2364                           fsr2h	equ	0xFDA
  2365                           fsr2l	equ	0xFD9
  2366                           status	equ	0xFD8
  2367                           
  2368 ;; *************** function _ADC_GetConversionResult *****************
  2369 ;; Defined at:
  2370 ;;		line 104 in file "mcc_generated_files/adc.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;		None
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  2    0[BANK0 ] unsigned int 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2, status,0
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2384 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;Total ram usage:        4 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    4
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text19
  2399  000628                     __ptext19:
  2400                           	opt stack 0
  2401  000628                     _ADC_GetConversionResult:
  2402                           	opt stack 26
  2403                           
  2404                           ;adc.c: 107: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  2405                           
  2406                           ;incstack = 0
  2407  000628  50C4               	movf	4036,w,c	;volatile
  2408  00062A  0100               	movlb	0	; () banked
  2409  00062C  6F83               	movwf	(??_ADC_GetConversionResult+1)& (0+255),b
  2410  00062E  6B82               	clrf	??_ADC_GetConversionResult& (0+255),b
  2411  000630  50C3               	movf	4035,w,c	;volatile
  2412  000632  2582               	addwf	??_ADC_GetConversionResult& (0+255),w,b
  2413  000634  6F80               	movwf	?_ADC_GetConversionResult& (0+255),b
  2414  000636  0E00               	movlw	0
  2415  000638  2183               	addwfc	(??_ADC_GetConversionResult+1)& (0+255),w,b
  2416  00063A  6F81               	movwf	(?_ADC_GetConversionResult+1)& (0+255),b
  2417  00063C  0012               	return	
  2418  00063E                     __end_of_ADC_GetConversionResult:
  2419                           	opt stack 0
  2420                           tblptru	equ	0xFF8
  2421                           tblptrh	equ	0xFF7
  2422                           tblptrl	equ	0xFF6
  2423                           tablat	equ	0xFF5
  2424                           prodh	equ	0xFF4
  2425                           prodl	equ	0xFF3
  2426                           intcon	equ	0xFF2
  2427                           intcon2	equ	0xFF1
  2428                           postinc0	equ	0xFEE
  2429                           wreg	equ	0xFE8
  2430                           postdec1	equ	0xFE5
  2431                           fsr1l	equ	0xFE1
  2432                           indf2	equ	0xFDF
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _INTERRUPT_InterruptManager *****************
  2438 ;; Defined at:
  2439 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;		None
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;Total ram usage:       18 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    3
  2460 ;; This function calls:
  2461 ;;		Absolute function
  2462 ;;		_ADC_ISR
  2463 ;;		_EUSART1_Receive_ISR
  2464 ;;		_EUSART1_Transmit_ISR
  2465 ;;		_TMR0_ISR
  2466 ;; This function is called by:
  2467 ;;		Interrupt level 2
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	intcode
  2472  000008                     __pintcode:
  2473                           	opt stack 0
  2474  000008                     _INTERRUPT_InterruptManager:
  2475                           	opt stack 24
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;incstack = 0
  2479  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2480  00000A  CFFA F026          	movff	pclath,??_INTERRUPT_InterruptManager
  2481  00000E  CFFB F027          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2482  000012  CFE9 F028          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2483  000016  CFEA F029          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2484  00001A  CFE1 F02A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2485  00001E  CFE2 F02B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2486  000022  CFD9 F02C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2487  000026  CFDA F02D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2488  00002A  CFF3 F02E          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2489  00002E  CFF4 F02F          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2490  000032  CFF6 F030          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2491  000036  CFF7 F031          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2492  00003A  CFF8 F032          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2493  00003E  CFF5 F033          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2494  000042  C04E  F034         	movff	btemp,??_INTERRUPT_InterruptManager+14
  2495  000046  C04F  F035         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  2496  00004A  C050  F036         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  2497  00004E  C051  F037         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  2498                           
  2499                           ;interrupt_manager.c: 61: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2500  000052  BAF2               	btfsc	intcon,5,c	;volatile
  2501  000054  A4F2               	btfss	intcon,2,c	;volatile
  2502  000056  D003               	goto	i2l117
  2503                           
  2504                           ;interrupt_manager.c: 62: {
  2505                           ;interrupt_manager.c: 63: TMR0_ISR();
  2506  000058  ECAE  F002         	call	_TMR0_ISR	;wreg free
  2507                           
  2508                           ;interrupt_manager.c: 64: }
  2509  00005C  D022               	goto	i2u86_49
  2510  00005E                     i2l117:
  2511                           
  2512                           ;interrupt_manager.c: 65: else if(INTCONbits.PEIE == 1)
  2513  00005E  ACF2               	btfss	intcon,6,c	;volatile
  2514  000060  D020               	goto	i2u86_49
  2515                           
  2516                           ;interrupt_manager.c: 66: {
  2517                           ;interrupt_manager.c: 67: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  2518  000062  BC9D               	btfsc	3997,6,c	;volatile
  2519  000064  AC9E               	btfss	3998,6,c	;volatile
  2520  000066  D003               	goto	i2l120
  2521                           
  2522                           ;interrupt_manager.c: 68: {
  2523                           ;interrupt_manager.c: 69: ADC_ISR();
  2524  000068  EC5D  F003         	call	_ADC_ISR	;wreg free
  2525                           
  2526                           ;interrupt_manager.c: 70: }
  2527  00006C  D01A               	goto	i2u86_49
  2528  00006E                     i2l120:
  2529                           
  2530                           ;interrupt_manager.c: 71: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  2531  00006E  B89D               	btfsc	3997,4,c	;volatile
  2532  000070  A89E               	btfss	3998,4,c	;volatile
  2533  000072  D008               	goto	i2l122
  2534                           
  2535                           ;interrupt_manager.c: 72: {
  2536                           ;interrupt_manager.c: 73: EUSART1_TxDefaultInterruptHandler();
  2537  000074  D801               	call	i2u83_48
  2538  000076  D015               	goto	i2u86_49
  2539  000078                     i2u83_48:
  2540  000078  0005               	push	
  2541  00007A  6EFA               	movwf	pclath,c
  2542  00007C  5040               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  2543  00007E  6EFD               	movwf	tosl,c
  2544  000080  5041               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  2545  000082  D00A               	goto	L2
  2546  000084                     i2l122:
  2547                           
  2548                           ;interrupt_manager.c: 75: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  2549  000084  BA9D               	btfsc	3997,5,c	;volatile
  2550  000086  AA9E               	btfss	3998,5,c	;volatile
  2551  000088  D00C               	goto	i2u86_49
  2552                           
  2553                           ;interrupt_manager.c: 76: {
  2554                           ;interrupt_manager.c: 77: EUSART1_RxDefaultInterruptHandler();
  2555  00008A  D801               	call	i2u86_48
  2556  00008C  D00A               	goto	i2u86_49
  2557  00008E                     i2u86_48:
  2558  00008E  0005               	push	
  2559  000090  6EFA               	movwf	pclath,c
  2560  000092  503E               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  2561  000094  6EFD               	movwf	tosl,c
  2562  000096  503F               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  2563  000098                     L2:
  2564  000098  6EFE               	movwf	tosh,c
  2565  00009A  50F8               	movf	tblptru,w,c
  2566  00009C  6EFF               	movwf	tosu,c
  2567  00009E  50FA               	movf	pclath,w,c
  2568  0000A0  0012               	return		;indir
  2569  0000A2                     i2u86_49:
  2570                           
  2571                           ;interrupt_manager.c: 84: else
  2572                           ;interrupt_manager.c: 85: {
  2573                           
  2574                           ;interrupt_manager.c: 82: }
  2575                           ;interrupt_manager.c: 83: }
  2576                           
  2577                           ;interrupt_manager.c: 79: else
  2578                           ;interrupt_manager.c: 80: {
  2579                           
  2580                           ;interrupt_manager.c: 78: }
  2581  0000A2  C037  F051         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  2582  0000A6  C036  F050         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  2583  0000AA  C035  F04F         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  2584  0000AE  C034  F04E         	movff	??_INTERRUPT_InterruptManager+14,btemp
  2585  0000B2  C033  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2586  0000B6  C032  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2587  0000BA  C031  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2588  0000BE  C030  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2589  0000C2  C02F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2590  0000C6  C02E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2591  0000CA  C02D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2592  0000CE  C02C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2593  0000D2  C02B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2594  0000D6  C02A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2595  0000DA  C029  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2596  0000DE  C028  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2597  0000E2  C027  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2598  0000E6  C026  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2599  0000EA  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2600  0000EC  0011               	retfie		f
  2601  0000EE                     __end_of_INTERRUPT_InterruptManager:
  2602                           	opt stack 0
  2603                           tosu	equ	0xFFF
  2604                           tosh	equ	0xFFE
  2605                           tosl	equ	0xFFD
  2606                           pclatu	equ	0xFFB
  2607                           pclath	equ	0xFFA
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           prodh	equ	0xFF4
  2613                           prodl	equ	0xFF3
  2614                           intcon	equ	0xFF2
  2615                           intcon2	equ	0xFF1
  2616                           postinc0	equ	0xFEE
  2617                           fsr0h	equ	0xFEA
  2618                           fsr0l	equ	0xFE9
  2619                           wreg	equ	0xFE8
  2620                           postdec1	equ	0xFE5
  2621                           fsr1h	equ	0xFE2
  2622                           fsr1l	equ	0xFE1
  2623                           indf2	equ	0xFDF
  2624                           fsr2h	equ	0xFDA
  2625                           fsr2l	equ	0xFD9
  2626                           status	equ	0xFD8
  2627                           
  2628 ;; *************** function _TMR0_ISR *****************
  2629 ;; Defined at:
  2630 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;		None
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;		None
  2635 ;; Return value:  Size  Location     Type
  2636 ;;                  1    wreg      void 
  2637 ;; Registers used:
  2638 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  2639 ;; Tracked objects:
  2640 ;;		On entry : 0/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;Total ram usage:        0 bytes
  2649 ;; Hardware stack levels used:    1
  2650 ;; Hardware stack levels required when called:    1
  2651 ;; This function calls:
  2652 ;;		Absolute function
  2653 ;;		_TMR0_DefaultInterruptHandler
  2654 ;; This function is called by:
  2655 ;;		_INTERRUPT_InterruptManager
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           	psect	text21
  2660  00055C                     __ptext21:
  2661                           	opt stack 0
  2662  00055C                     _TMR0_ISR:
  2663                           	opt stack 25
  2664                           
  2665                           ;tmr0.c: 133: INTCONbits.TMR0IF = 0;
  2666                           
  2667                           ;incstack = 0
  2668  00055C  94F2               	bcf	intcon,2,c	;volatile
  2669                           
  2670                           ;tmr0.c: 136: TMR0L = timer0ReloadVal;
  2671  00055E  C045  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  2672                           
  2673                           ;tmr0.c: 138: if(TMR0_InterruptHandler)
  2674  000562  5042               	movf	_TMR0_InterruptHandler,w,c
  2675  000564  1043               	iorwf	_TMR0_InterruptHandler+1,w,c
  2676  000566  B4D8               	btfsc	status,2,c
  2677  000568  D00C               	goto	i2u53_49
  2678                           
  2679                           ;tmr0.c: 139: {
  2680                           ;tmr0.c: 140: TMR0_InterruptHandler();
  2681  00056A  D801               	call	i2u53_48
  2682  00056C  D00A               	goto	i2u53_49
  2683  00056E                     i2u53_48:
  2684  00056E  0005               	push	
  2685  000570  6EFA               	movwf	pclath,c
  2686  000572  5042               	movf	_TMR0_InterruptHandler,w,c
  2687  000574  6EFD               	movwf	tosl,c
  2688  000576  5043               	movf	_TMR0_InterruptHandler+1,w,c
  2689  000578  6EFE               	movwf	tosh,c
  2690  00057A  50F8               	movf	tblptru,w,c
  2691  00057C  6EFF               	movwf	tosu,c
  2692  00057E  50FA               	movf	pclath,w,c
  2693  000580  0012               	return		;indir
  2694  000582                     i2u53_49:
  2695                           
  2696                           ;tmr0.c: 141: }
  2697                           ;tmr0.c: 143: cnt++;
  2698  000582  2A25               	incf	_cnt,f,c	;volatile
  2699  000584  0012               	return		;funcret
  2700  000586                     __end_of_TMR0_ISR:
  2701                           	opt stack 0
  2702                           tosu	equ	0xFFF
  2703                           tosh	equ	0xFFE
  2704                           tosl	equ	0xFFD
  2705                           pclatu	equ	0xFFB
  2706                           pclath	equ	0xFFA
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           prodh	equ	0xFF4
  2712                           prodl	equ	0xFF3
  2713                           intcon	equ	0xFF2
  2714                           intcon2	equ	0xFF1
  2715                           postinc0	equ	0xFEE
  2716                           fsr0h	equ	0xFEA
  2717                           fsr0l	equ	0xFE9
  2718                           wreg	equ	0xFE8
  2719                           postdec1	equ	0xFE5
  2720                           fsr1h	equ	0xFE2
  2721                           fsr1l	equ	0xFE1
  2722                           indf2	equ	0xFDF
  2723                           fsr2h	equ	0xFDA
  2724                           fsr2l	equ	0xFD9
  2725                           status	equ	0xFD8
  2726                           
  2727 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  2728 ;; Defined at:
  2729 ;;		line 151 in file "mcc_generated_files/tmr0.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		None
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;Total ram usage:        0 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; This function calls:
  2750 ;;		Nothing
  2751 ;; This function is called by:
  2752 ;;		_TMR0_Initialize
  2753 ;;		_TMR0_ISR
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text22
  2758  0006BE                     __ptext22:
  2759                           	opt stack 0
  2760  0006BE                     _TMR0_DefaultInterruptHandler:
  2761                           	opt stack 25
  2762                           
  2763                           ;incstack = 0
  2764  0006BE  0012               	return		;funcret
  2765  0006C0                     __end_of_TMR0_DefaultInterruptHandler:
  2766                           	opt stack 0
  2767                           tosu	equ	0xFFF
  2768                           tosh	equ	0xFFE
  2769                           tosl	equ	0xFFD
  2770                           pclatu	equ	0xFFB
  2771                           pclath	equ	0xFFA
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           intcon2	equ	0xFF1
  2780                           postinc0	equ	0xFEE
  2781                           fsr0h	equ	0xFEA
  2782                           fsr0l	equ	0xFE9
  2783                           wreg	equ	0xFE8
  2784                           postdec1	equ	0xFE5
  2785                           fsr1h	equ	0xFE2
  2786                           fsr1l	equ	0xFE1
  2787                           indf2	equ	0xFDF
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _EUSART1_Transmit_ISR *****************
  2793 ;; Defined at:
  2794 ;;		line 197 in file "mcc_generated_files/eusart1.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;		None
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;Total ram usage:        0 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; This function calls:
  2815 ;;		Nothing
  2816 ;; This function is called by:
  2817 ;;		_EUSART1_Initialize
  2818 ;;		_INTERRUPT_InterruptManager
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text23
  2823  00052E                     __ptext23:
  2824                           	opt stack 0
  2825  00052E                     _EUSART1_Transmit_ISR:
  2826                           	opt stack 26
  2827                           
  2828                           ;eusart1.c: 201: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  2829                           
  2830                           ;incstack = 0
  2831  00052E  0E10               	movlw	16
  2832  000530  6044               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  2833  000532  D012               	goto	i2l360
  2834                           
  2835                           ;eusart1.c: 202: {
  2836                           ;eusart1.c: 203: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  2837  000534  5023               	movf	_eusart1TxTail,w,c	;volatile
  2838  000536  0D01               	mullw	1
  2839  000538  0E70               	movlw	low _eusart1TxBuffer
  2840  00053A  24F3               	addwf	prodl,w,c
  2841  00053C  6ED9               	movwf	fsr2l,c
  2842  00053E  0E00               	movlw	high _eusart1TxBuffer
  2843  000540  20F4               	addwfc	prodh,w,c
  2844  000542  6EDA               	movwf	fsr2h,c
  2845  000544  50DF               	movf	indf2,w,c
  2846  000546  6EAD               	movwf	4013,c	;volatile
  2847  000548  2A23               	incf	_eusart1TxTail,f,c	;volatile
  2848                           
  2849                           ;eusart1.c: 204: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  2850  00054A  0E0F               	movlw	15
  2851  00054C  6423               	cpfsgt	_eusart1TxTail,c	;volatile
  2852  00054E  D002               	goto	i2l361
  2853                           
  2854                           ;eusart1.c: 205: {
  2855                           ;eusart1.c: 206: eusart1TxTail = 0;
  2856  000550  0E00               	movlw	0
  2857  000552  6E23               	movwf	_eusart1TxTail,c	;volatile
  2858  000554                     i2l361:
  2859                           
  2860                           ;eusart1.c: 207: }
  2861                           ;eusart1.c: 208: eusart1TxBufferRemaining++;
  2862  000554  2A44               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  2863                           
  2864                           ;eusart1.c: 209: }
  2865  000556  0012               	return	
  2866  000558                     i2l360:
  2867                           
  2868                           ;eusart1.c: 210: else
  2869                           ;eusart1.c: 211: {
  2870                           ;eusart1.c: 212: PIE1bits.TX1IE = 0;
  2871  000558  989D               	bcf	3997,4,c	;volatile
  2872  00055A  0012               	return	
  2873  00055C                     __end_of_EUSART1_Transmit_ISR:
  2874                           	opt stack 0
  2875                           tosu	equ	0xFFF
  2876                           tosh	equ	0xFFE
  2877                           tosl	equ	0xFFD
  2878                           pclatu	equ	0xFFB
  2879                           pclath	equ	0xFFA
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           prodh	equ	0xFF4
  2885                           prodl	equ	0xFF3
  2886                           intcon	equ	0xFF2
  2887                           intcon2	equ	0xFF1
  2888                           postinc0	equ	0xFEE
  2889                           fsr0h	equ	0xFEA
  2890                           fsr0l	equ	0xFE9
  2891                           wreg	equ	0xFE8
  2892                           postdec1	equ	0xFE5
  2893                           fsr1h	equ	0xFE2
  2894                           fsr1l	equ	0xFE1
  2895                           indf2	equ	0xFDF
  2896                           fsr2h	equ	0xFDA
  2897                           fsr2l	equ	0xFD9
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _EUSART1_Receive_ISR *****************
  2901 ;; Defined at:
  2902 ;;		line 216 in file "mcc_generated_files/eusart1.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    2
  2923 ;; This function calls:
  2924 ;;		Absolute function
  2925 ;;		_EUSART1_DefaultErrorHandler
  2926 ;;		_EUSART1_DefaultFramingErrorHandler
  2927 ;;		_EUSART1_DefaultOverrunErrorHandler
  2928 ;;		_EUSART1_RxDataHandler
  2929 ;; This function is called by:
  2930 ;;		_EUSART1_Initialize
  2931 ;;		_INTERRUPT_InterruptManager
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text24
  2936  00026E                     __ptext24:
  2937                           	opt stack 0
  2938  00026E                     _EUSART1_Receive_ISR:
  2939                           	opt stack 24
  2940                           
  2941                           ;eusart1.c: 219: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
  2942                           
  2943                           ;incstack = 0
  2944  00026E  5022               	movf	_eusart1RxHead,w,c	;volatile
  2945  000270  0D01               	mullw	1
  2946  000272  0E01               	movlw	low _eusart1RxStatusBuffer
  2947  000274  24F3               	addwf	prodl,w,c
  2948  000276  6ED9               	movwf	fsr2l,c
  2949  000278  0E00               	movlw	high _eusart1RxStatusBuffer
  2950  00027A  20F4               	addwfc	prodh,w,c
  2951  00027C  6EDA               	movwf	fsr2h,c
  2952  00027E  0E00               	movlw	0
  2953  000280  6EDF               	movwf	indf2,c
  2954                           
  2955                           ;eusart1.c: 221: if(RCSTA1bits.FERR){
  2956  000282  A4AB               	btfss	4011,2,c	;volatile
  2957  000284  D015               	goto	i2u59_49
  2958                           
  2959                           ;eusart1.c: 222: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
  2960  000286  5022               	movf	_eusart1RxHead,w,c	;volatile
  2961  000288  0D01               	mullw	1
  2962  00028A  0E01               	movlw	low _eusart1RxStatusBuffer
  2963  00028C  24F3               	addwf	prodl,w,c
  2964  00028E  6ED9               	movwf	fsr2l,c
  2965  000290  0E00               	movlw	high _eusart1RxStatusBuffer
  2966  000292  20F4               	addwfc	prodh,w,c
  2967  000294  6EDA               	movwf	fsr2h,c
  2968  000296  82DF               	bsf	indf2,1,c
  2969                           
  2970                           ;eusart1.c: 223: EUSART1_FramingErrorHandler();
  2971  000298  D801               	call	i2u59_48
  2972  00029A  D00A               	goto	i2u59_49
  2973  00029C                     i2u59_48:
  2974  00029C  0005               	push	
  2975  00029E  6EFA               	movwf	pclath,c
  2976  0002A0  503C               	movf	_EUSART1_FramingErrorHandler,w,c
  2977  0002A2  6EFD               	movwf	tosl,c
  2978  0002A4  503D               	movf	_EUSART1_FramingErrorHandler+1,w,c
  2979  0002A6  6EFE               	movwf	tosh,c
  2980  0002A8  50F8               	movf	tblptru,w,c
  2981  0002AA  6EFF               	movwf	tosu,c
  2982  0002AC  50FA               	movf	pclath,w,c
  2983  0002AE  0012               	return		;indir
  2984  0002B0                     i2u59_49:
  2985                           
  2986                           ;eusart1.c: 224: }
  2987                           ;eusart1.c: 226: if(RCSTA1bits.OERR){
  2988  0002B0  A2AB               	btfss	4011,1,c	;volatile
  2989  0002B2  D015               	goto	i2u61_49
  2990                           
  2991                           ;eusart1.c: 227: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
  2992  0002B4  5022               	movf	_eusart1RxHead,w,c	;volatile
  2993  0002B6  0D01               	mullw	1
  2994  0002B8  0E01               	movlw	low _eusart1RxStatusBuffer
  2995  0002BA  24F3               	addwf	prodl,w,c
  2996  0002BC  6ED9               	movwf	fsr2l,c
  2997  0002BE  0E00               	movlw	high _eusart1RxStatusBuffer
  2998  0002C0  20F4               	addwfc	prodh,w,c
  2999  0002C2  6EDA               	movwf	fsr2h,c
  3000  0002C4  84DF               	bsf	indf2,2,c
  3001                           
  3002                           ;eusart1.c: 228: EUSART1_OverrunErrorHandler();
  3003  0002C6  D801               	call	i2u61_48
  3004  0002C8  D00A               	goto	i2u61_49
  3005  0002CA                     i2u61_48:
  3006  0002CA  0005               	push	
  3007  0002CC  6EFA               	movwf	pclath,c
  3008  0002CE  503A               	movf	_EUSART1_OverrunErrorHandler,w,c
  3009  0002D0  6EFD               	movwf	tosl,c
  3010  0002D2  503B               	movf	_EUSART1_OverrunErrorHandler+1,w,c
  3011  0002D4  6EFE               	movwf	tosh,c
  3012  0002D6  50F8               	movf	tblptru,w,c
  3013  0002D8  6EFF               	movwf	tosu,c
  3014  0002DA  50FA               	movf	pclath,w,c
  3015  0002DC  0012               	return		;indir
  3016  0002DE                     i2u61_49:
  3017                           
  3018                           ;eusart1.c: 229: }
  3019                           ;eusart1.c: 231: if(eusart1RxStatusBuffer[eusart1RxHead].status){
  3020  0002DE  5022               	movf	_eusart1RxHead,w,c	;volatile
  3021  0002E0  0D01               	mullw	1
  3022  0002E2  0E01               	movlw	low _eusart1RxStatusBuffer
  3023  0002E4  24F3               	addwf	prodl,w,c
  3024  0002E6  6ED9               	movwf	fsr2l,c
  3025  0002E8  0E00               	movlw	high _eusart1RxStatusBuffer
  3026  0002EA  20F4               	addwfc	prodh,w,c
  3027  0002EC  6EDA               	movwf	fsr2h,c
  3028  0002EE  50DF               	movf	indf2,w,c
  3029  0002F0  B4D8               	btfsc	status,2,c
  3030  0002F2  D00C               	goto	i2l368
  3031                           
  3032                           ;eusart1.c: 232: EUSART1_ErrorHandler();
  3033  0002F4  D801               	call	i2u63_48
  3034  0002F6  0012               	return	
  3035  0002F8                     i2u63_48:
  3036  0002F8  0005               	push	
  3037  0002FA  6EFA               	movwf	pclath,c
  3038  0002FC  5038               	movf	_EUSART1_ErrorHandler,w,c
  3039  0002FE  6EFD               	movwf	tosl,c
  3040  000300  5039               	movf	_EUSART1_ErrorHandler+1,w,c
  3041  000302  6EFE               	movwf	tosh,c
  3042  000304  50F8               	movf	tblptru,w,c
  3043  000306  6EFF               	movwf	tosu,c
  3044  000308  50FA               	movf	pclath,w,c
  3045  00030A  0012               	return		;indir
  3046  00030C                     i2l368:
  3047                           
  3048                           ;eusart1.c: 234: EUSART1_RxDataHandler();
  3049  00030C  ECE9  F002         	call	_EUSART1_RxDataHandler	;wreg free
  3050  000310  0012               	return	
  3051  000312                     __end_of_EUSART1_Receive_ISR:
  3052                           	opt stack 0
  3053                           tosu	equ	0xFFF
  3054                           tosh	equ	0xFFE
  3055                           tosl	equ	0xFFD
  3056                           pclatu	equ	0xFFB
  3057                           pclath	equ	0xFFA
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           tblptrl	equ	0xFF6
  3061                           tablat	equ	0xFF5
  3062                           prodh	equ	0xFF4
  3063                           prodl	equ	0xFF3
  3064                           intcon	equ	0xFF2
  3065                           intcon2	equ	0xFF1
  3066                           postinc0	equ	0xFEE
  3067                           fsr0h	equ	0xFEA
  3068                           fsr0l	equ	0xFE9
  3069                           wreg	equ	0xFE8
  3070                           postdec1	equ	0xFE5
  3071                           fsr1h	equ	0xFE2
  3072                           fsr1l	equ	0xFE1
  3073                           indf2	equ	0xFDF
  3074                           fsr2h	equ	0xFDA
  3075                           fsr2l	equ	0xFD9
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
  3079 ;; Defined at:
  3080 ;;		line 252 in file "mcc_generated_files/eusart1.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;		None
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		None
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;Total ram usage:        0 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_EUSART1_Initialize
  3104 ;;		_EUSART1_Receive_ISR
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text25
  3109  0006A6                     __ptext25:
  3110                           	opt stack 0
  3111  0006A6                     _EUSART1_DefaultOverrunErrorHandler:
  3112                           	opt stack 25
  3113                           
  3114                           ;eusart1.c: 255: RCSTA1bits.CREN = 0;
  3115                           
  3116                           ;incstack = 0
  3117  0006A6  98AB               	bcf	4011,4,c	;volatile
  3118                           
  3119                           ;eusart1.c: 256: RCSTA1bits.CREN = 1;
  3120  0006A8  88AB               	bsf	4011,4,c	;volatile
  3121  0006AA  0012               	return		;funcret
  3122  0006AC                     __end_of_EUSART1_DefaultOverrunErrorHandler:
  3123                           	opt stack 0
  3124                           tosu	equ	0xFFF
  3125                           tosh	equ	0xFFE
  3126                           tosl	equ	0xFFD
  3127                           pclatu	equ	0xFFB
  3128                           pclath	equ	0xFFA
  3129                           tblptru	equ	0xFF8
  3130                           tblptrh	equ	0xFF7
  3131                           tblptrl	equ	0xFF6
  3132                           tablat	equ	0xFF5
  3133                           prodh	equ	0xFF4
  3134                           prodl	equ	0xFF3
  3135                           intcon	equ	0xFF2
  3136                           intcon2	equ	0xFF1
  3137                           postinc0	equ	0xFEE
  3138                           fsr0h	equ	0xFEA
  3139                           fsr0l	equ	0xFE9
  3140                           wreg	equ	0xFE8
  3141                           postdec1	equ	0xFE5
  3142                           fsr1h	equ	0xFE2
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
  3150 ;; Defined at:
  3151 ;;		line 250 in file "mcc_generated_files/eusart1.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;		None
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		None
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;Total ram usage:        0 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_EUSART1_Initialize
  3175 ;;		_EUSART1_Receive_ISR
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text26
  3180  0006C0                     __ptext26:
  3181                           	opt stack 0
  3182  0006C0                     _EUSART1_DefaultFramingErrorHandler:
  3183                           	opt stack 25
  3184                           
  3185                           ;incstack = 0
  3186  0006C0  0012               	return		;funcret
  3187  0006C2                     __end_of_EUSART1_DefaultFramingErrorHandler:
  3188                           	opt stack 0
  3189                           tosu	equ	0xFFF
  3190                           tosh	equ	0xFFE
  3191                           tosl	equ	0xFFD
  3192                           pclatu	equ	0xFFB
  3193                           pclath	equ	0xFFA
  3194                           tblptru	equ	0xFF8
  3195                           tblptrh	equ	0xFF7
  3196                           tblptrl	equ	0xFF6
  3197                           tablat	equ	0xFF5
  3198                           prodh	equ	0xFF4
  3199                           prodl	equ	0xFF3
  3200                           intcon	equ	0xFF2
  3201                           intcon2	equ	0xFF1
  3202                           postinc0	equ	0xFEE
  3203                           fsr0h	equ	0xFEA
  3204                           fsr0l	equ	0xFE9
  3205                           wreg	equ	0xFE8
  3206                           postdec1	equ	0xFE5
  3207                           fsr1h	equ	0xFE2
  3208                           fsr1l	equ	0xFE1
  3209                           indf2	equ	0xFDF
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _EUSART1_DefaultErrorHandler *****************
  3215 ;; Defined at:
  3216 ;;		line 260 in file "mcc_generated_files/eusart1.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;Total ram usage:        0 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    1
  3237 ;; This function calls:
  3238 ;;		_EUSART1_RxDataHandler
  3239 ;; This function is called by:
  3240 ;;		_EUSART1_Initialize
  3241 ;;		_EUSART1_Receive_ISR
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text27
  3246  0006AC                     __ptext27:
  3247                           	opt stack 0
  3248  0006AC                     _EUSART1_DefaultErrorHandler:
  3249                           	opt stack 24
  3250                           
  3251                           ;eusart1.c: 261: EUSART1_RxDataHandler();
  3252                           
  3253                           ;incstack = 0
  3254  0006AC  ECE9  F002         	call	_EUSART1_RxDataHandler	;wreg free
  3255  0006B0  0012               	return		;funcret
  3256  0006B2                     __end_of_EUSART1_DefaultErrorHandler:
  3257                           	opt stack 0
  3258                           tosu	equ	0xFFF
  3259                           tosh	equ	0xFFE
  3260                           tosl	equ	0xFFD
  3261                           pclatu	equ	0xFFB
  3262                           pclath	equ	0xFFA
  3263                           tblptru	equ	0xFF8
  3264                           tblptrh	equ	0xFF7
  3265                           tblptrl	equ	0xFF6
  3266                           tablat	equ	0xFF5
  3267                           prodh	equ	0xFF4
  3268                           prodl	equ	0xFF3
  3269                           intcon	equ	0xFF2
  3270                           intcon2	equ	0xFF1
  3271                           postinc0	equ	0xFEE
  3272                           fsr0h	equ	0xFEA
  3273                           fsr0l	equ	0xFE9
  3274                           wreg	equ	0xFE8
  3275                           postdec1	equ	0xFE5
  3276                           fsr1h	equ	0xFE2
  3277                           fsr1l	equ	0xFE1
  3278                           indf2	equ	0xFDF
  3279                           fsr2h	equ	0xFDA
  3280                           fsr2l	equ	0xFD9
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function _EUSART1_RxDataHandler *****************
  3284 ;; Defined at:
  3285 ;;		line 240 in file "mcc_generated_files/eusart1.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;		None
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;Total ram usage:        0 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_EUSART1_Receive_ISR
  3309 ;;		_EUSART1_DefaultErrorHandler
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text28
  3314  0005D2                     __ptext28:
  3315                           	opt stack 0
  3316  0005D2                     _EUSART1_RxDataHandler:
  3317                           	opt stack 25
  3318                           
  3319                           ;eusart1.c: 242: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  3320                           
  3321                           ;incstack = 0
  3322  0005D2  5022               	movf	_eusart1RxHead,w,c	;volatile
  3323  0005D4  0D01               	mullw	1
  3324  0005D6  0E60               	movlw	low _eusart1RxBuffer
  3325  0005D8  24F3               	addwf	prodl,w,c
  3326  0005DA  6ED9               	movwf	fsr2l,c
  3327  0005DC  0E00               	movlw	high _eusart1RxBuffer
  3328  0005DE  20F4               	addwfc	prodh,w,c
  3329  0005E0  6EDA               	movwf	fsr2h,c
  3330  0005E2  CFAE FFDF          	movff	4014,indf2	;volatile
  3331  0005E6  2A22               	incf	_eusart1RxHead,f,c	;volatile
  3332                           
  3333                           ;eusart1.c: 243: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  3334  0005E8  0E0F               	movlw	15
  3335  0005EA  6422               	cpfsgt	_eusart1RxHead,c	;volatile
  3336  0005EC  D002               	goto	i2l373
  3337                           
  3338                           ;eusart1.c: 244: {
  3339                           ;eusart1.c: 245: eusart1RxHead = 0;
  3340  0005EE  0E00               	movlw	0
  3341  0005F0  6E22               	movwf	_eusart1RxHead,c	;volatile
  3342  0005F2                     i2l373:
  3343                           
  3344                           ;eusart1.c: 246: }
  3345                           ;eusart1.c: 247: eusart1RxCount++;
  3346  0005F2  2A20               	incf	_eusart1RxCount,f,c	;volatile
  3347  0005F4  0012               	return		;funcret
  3348  0005F6                     __end_of_EUSART1_RxDataHandler:
  3349                           	opt stack 0
  3350                           tosu	equ	0xFFF
  3351                           tosh	equ	0xFFE
  3352                           tosl	equ	0xFFD
  3353                           pclatu	equ	0xFFB
  3354                           pclath	equ	0xFFA
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           intcon	equ	0xFF2
  3362                           intcon2	equ	0xFF1
  3363                           postinc0	equ	0xFEE
  3364                           fsr0h	equ	0xFEA
  3365                           fsr0l	equ	0xFE9
  3366                           wreg	equ	0xFE8
  3367                           postdec1	equ	0xFE5
  3368                           fsr1h	equ	0xFE2
  3369                           fsr1l	equ	0xFE1
  3370                           indf2	equ	0xFDF
  3371                           fsr2h	equ	0xFDA
  3372                           fsr2l	equ	0xFD9
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function _ADC_ISR *****************
  3376 ;; Defined at:
  3377 ;;		line 135 in file "mcc_generated_files/adc.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;		None
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;		None
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      void 
  3384 ;; Registers used:
  3385 ;;		None
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;Total ram usage:        0 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_INTERRUPT_InterruptManager
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text29
  3405  0006BA                     __ptext29:
  3406                           	opt stack 0
  3407  0006BA                     _ADC_ISR:
  3408                           	opt stack 26
  3409                           
  3410                           ;adc.c: 138: PIR1bits.ADIF = 0;
  3411                           
  3412                           ;incstack = 0
  3413  0006BA  9C9E               	bcf	3998,6,c	;volatile
  3414  0006BC  0012               	return		;funcret
  3415  0006BE                     __end_of_ADC_ISR:
  3416                           	opt stack 0
  3417  0000                     tosu	equ	0xFFF
  3418                           tosh	equ	0xFFE
  3419                           tosl	equ	0xFFD
  3420                           pclatu	equ	0xFFB
  3421                           pclath	equ	0xFFA
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           intcon2	equ	0xFF1
  3430                           postinc0	equ	0xFEE
  3431                           fsr0h	equ	0xFEA
  3432                           fsr0l	equ	0xFE9
  3433                           wreg	equ	0xFE8
  3434                           postdec1	equ	0xFE5
  3435                           fsr1h	equ	0xFE2
  3436                           fsr1l	equ	0xFE1
  3437                           indf2	equ	0xFDF
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           tosu	equ	0xFFF
  3442                           tosh	equ	0xFFE
  3443                           tosl	equ	0xFFD
  3444                           pclatu	equ	0xFFB
  3445                           pclath	equ	0xFFA
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           intcon	equ	0xFF2
  3453                           intcon2	equ	0xFF1
  3454                           postinc0	equ	0xFEE
  3455                           fsr0h	equ	0xFEA
  3456                           fsr0l	equ	0xFE9
  3457                           wreg	equ	0xFE8
  3458                           postdec1	equ	0xFE5
  3459                           fsr1h	equ	0xFE2
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466                           	psect	text30
  3467  000000                     __ptext30:
  3468                           	opt stack 0
  3469                           tosu	equ	0xFFF
  3470                           tosh	equ	0xFFE
  3471                           tosl	equ	0xFFD
  3472                           pclatu	equ	0xFFB
  3473                           pclath	equ	0xFFA
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           intcon	equ	0xFF2
  3481                           intcon2	equ	0xFF1
  3482                           postinc0	equ	0xFEE
  3483                           fsr0h	equ	0xFEA
  3484                           fsr0l	equ	0xFE9
  3485                           wreg	equ	0xFE8
  3486                           postdec1	equ	0xFE5
  3487                           fsr1h	equ	0xFE2
  3488                           fsr1l	equ	0xFE1
  3489                           indf2	equ	0xFDF
  3490                           fsr2h	equ	0xFDA
  3491                           fsr2l	equ	0xFD9
  3492                           status	equ	0xFD8
  3493                           
  3494                           	psect	rparam
  3495  0000                     tosu	equ	0xFFF
  3496                           tosh	equ	0xFFE
  3497                           tosl	equ	0xFFD
  3498                           pclatu	equ	0xFFB
  3499                           pclath	equ	0xFFA
  3500                           tblptru	equ	0xFF8
  3501                           tblptrh	equ	0xFF7
  3502                           tblptrl	equ	0xFF6
  3503                           tablat	equ	0xFF5
  3504                           prodh	equ	0xFF4
  3505                           prodl	equ	0xFF3
  3506                           intcon	equ	0xFF2
  3507                           intcon2	equ	0xFF1
  3508                           postinc0	equ	0xFEE
  3509                           fsr0h	equ	0xFEA
  3510                           fsr0l	equ	0xFE9
  3511                           wreg	equ	0xFE8
  3512                           postdec1	equ	0xFE5
  3513                           fsr1h	equ	0xFE2
  3514                           fsr1l	equ	0xFE1
  3515                           indf2	equ	0xFDF
  3516                           fsr2h	equ	0xFDA
  3517                           fsr2l	equ	0xFD9
  3518                           status	equ	0xFD8
  3519                           
  3520                           	psect	temp
  3521  00004E                     btemp:
  3522                           	opt stack 0
  3523  00004E                     	ds	1
  3524  0000                     int$flags	set	btemp
  3525  0000                     wtemp6	set	btemp+1
  3526                           tosu	equ	0xFFF
  3527                           tosh	equ	0xFFE
  3528                           tosl	equ	0xFFD
  3529                           pclatu	equ	0xFFB
  3530                           pclath	equ	0xFFA
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           prodh	equ	0xFF4
  3536                           prodl	equ	0xFF3
  3537                           intcon	equ	0xFF2
  3538                           intcon2	equ	0xFF1
  3539                           postinc0	equ	0xFEE
  3540                           fsr0h	equ	0xFEA
  3541                           fsr0l	equ	0xFE9
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           fsr1h	equ	0xFE2
  3545                           fsr1l	equ	0xFE1
  3546                           indf2	equ	0xFDF
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         69
    Persistent  14
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      77
    BANK0           160     15      57
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), Absolute function(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), Absolute function(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->___awdiv
    ___awdiv->___wmul
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3456
                                             14 BANK0      1     1      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                _ADC_StartConversion
                  _SYSTEM_Initialize
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     772
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     793
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1165
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     726
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     121
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     605
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversionResult                              4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0       0
                                              0 COMRAM    18    18      0
                   Absolute function *
                            _ADC_ISR
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  0     0      0       0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultErrorHandler                          0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_RxDataHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversionResult
   _ADC_IsConversionDone
   _ADC_StartConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   ___awdiv
     ___wmul (ARG)
   ___awmod
   ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_ISR *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _EUSART1_Transmit_ISR *
   _TMR0_ISR *
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F      39       5       35.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      4D       1       81.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      86      12        0.0%
DATA                 0      0      86       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 01 14:46:27 2019

                      _eusart1TxBufferRemaining 0044                                               _a 004A  
                                             _b 008F                                               _c 0046  
                                             _d 0019                                               _i 001D  
                                             _j 001B                                               _x 0017  
                                             _y 0015                                               _z 0013  
                                  ___awdiv@sign 008B                             ___wmul@multiplicand 0082  
                               _timer0ReloadVal 0045                                    __CFG_CP0$OFF 000000  
                                  __CFG_CP1$OFF 000000                                    __CFG_CP2$OFF 000000  
                                  __CFG_CP3$OFF 000000                                     __CFG_LVP$ON 000000  
                                           l241 0216                                             l234 00FA  
                                           l243 024E                                             l244 0228  
                                           l237 0112                                             l239 01FE  
                                           l570 034E                                             l580 0438  
                                           l573 0376                                             l574 0380  
                                           l566 0328                                             l582 044E  
                                           l575 038E                                             l567 0338  
                                           l583 0446                                             l569 0356  
                                           l586 0466                                             l587 0470  
                                           l579 042C                                             l588 047E  
                                  __CFG_CPB$OFF 000000                                    __CFG_CPD$OFF 000000  
                                           _cnt 0025                                 __end_of_ADC_ISR 06BE  
                                  ___awmod@sign 0085                                             prod 000FF3  
                                           tosl 000FFD                                             wreg 000FE8  
                                    _TXSTA1bits 000FAC                                            l1972 025E  
                                          l1956 0206                                            u1000 0654  
                                          u1110 0452                                            u1200 026C  
                                          u1050 035A                                            _LATA 000F89  
                                          u1190 025E                                            _LATB 000F8A  
                                          _LATC 000F8B                                            _LATD 000F8C  
                                          _LATE 000F8D                                            _WPUB 000F61  
                                          _main 00F2                                            fsr0h 000FEA  
                                          fsr1h 000FE2                                            fsr2h 000FDA  
                                          fsr0l 000FE9                                            indf2 000FDF  
                                          fsr1l 000FE1                                            fsr2l 000FD9  
                                          btemp 004E                                   __CFG_BORV$190 000000  
                                          prodh 000FF4                                            prodl 000FF3  
                                          start 00EE                                   __CFG_IESO$OFF 000000  
                                  ___param_bank 000000                         __end_of_TMR0_Initialize 05D2  
                ??_TMR0_DefaultInterruptHandler 0026                  __size_of_OSCILLATOR_Initialize 000E  
                 __end_of_OSCILLATOR_Initialize 064C                           _eusart1RxStatusBuffer 0001  
                                         ?_main 0026                                 __end_of___awdiv 0398  
                               __end_of___awmod 0488                                           _T0CON 000FD5  
                               ___awdiv@divisor 0088                                  __CFG_DEBUG$OFF 000000  
                                         i2l120 006E                                           i2l122 0084  
                                         i2l117 005E                                           i2l360 0558  
                                         i2l361 0554                                           i2l373 05F2  
                                         i2l368 030C                                 ___awdiv@counter 008A  
                                         _TMR0H 000FD7                                           _TMR0L 000FD6  
                                         _TRISA 000F92                                           _TRISB 000F93  
                                         _TRISC 000F94                                           _TRISD 000F95  
                                         _TRISE 000F96                __size_of_ADC_GetConversionResult 0016  
             __size_of_TMR0_SetInterruptHandler 000A                                   __CFG_WRT0$OFF 000000  
                                 __CFG_WRT1$OFF 000000                                   __CFG_WRT2$OFF 000000  
                     ?_TMR0_SetInterruptHandler 0080                                   __CFG_WRT3$OFF 000000  
                          _EUSART1_Transmit_ISR 052E                                  __CFG_EBTR0$OFF 000000  
                                __CFG_FCMEN$OFF 000000                                  __CFG_EBTR1$OFF 000000  
                                __CFG_EBTR2$OFF 000000                                  __CFG_EBTR3$OFF 000000  
                              __end_of_TMR0_ISR 0586                                   __CFG_WRTB$OFF 000000  
                                 __CFG_WRTC$OFF 000000                                   __CFG_WRTD$OFF 000000  
                                __CFG_EBTRB$OFF 000000                              __CFG_MCLRE$EXTMCLR 000000  
                                         pclath 000FFA                                           tablat 000FF5  
                                         status 000FD8                                           wtemp6 004F  
                                __CFG_HFOFST$ON 000000      __end_of_EUSART1_DefaultFramingErrorHandler 06C2  
   __size_of_EUSART1_DefaultFramingErrorHandler 0002            ??_EUSART1_DefaultFramingErrorHandler 0026  
           ?_EUSART1_DefaultFramingErrorHandler 0026              _EUSART1_DefaultFramingErrorHandler 06C0  
                                __CFG_PBADEN$ON 000000                                 __initialization 0488  
                    __end_of_EUSART1_Initialize 0416                                    __end_of_main 026E  
                                     ??_ADC_ISR 0026                     ?_INTERRUPT_InterruptManager 0026  
                                        ??_main 008E                                   __activetblptr 000002  
                         ?_EUSART1_Transmit_ISR 0026                                  _convertedValue 0011  
                 __size_of_ADC_IsConversionDone 000C                                          _ADCON0 000FC2  
                                        _ADCON1 000FC1                                          _ADCON2 000FC0  
                                        _ADRESH 000FC4                                          _ADRESL 000FC3  
                              ___awdiv@dividend 0086                                          _ANSELA 000F38  
                                        _ANSELB 000F39                                          _ANSELC 000F3A  
                                        _ANSELD 000F3B                                          _ANSELE 000F3C  
                                __CFG_WDTEN$OFF 000000                                          _RCREG1 000FAE  
                                        _RCSTA1 000FAB                                          _OSCCON 000FD3  
                                        _SPBRG1 000FAF                                          _TXREG1 000FAD  
                                        _TXSTA1 000FAC                                  __CFG_XINST$OFF 000000  
                                        ___wmul 0586                                       ??___awdiv 008A  
                                __CFG_STVREN$ON 000000                                       ??___awmod 0084  
                      ?_EUSART1_SetErrorHandler 0080                                ?_TMR0_Initialize 0026  
                                        clear_0 04CE                                          clear_1 04DA  
                              ___awdiv@quotient 008C                                 ___awmod@divisor 0082  
                               ___awmod@counter 0084                ??_EUSART1_SetOverrunErrorHandler 0082  
               ?_EUSART1_SetOverrunErrorHandler 0080                                    __pdataCOMRAM 0046  
                                        tblptrh 000FF7                                          tblptrl 000FF6  
                                        tblptru 000FF8        TMR0_SetInterruptHandler@InterruptHandler 0080  
                               _eusart1RxBuffer 0060                   __size_of_INTERRUPT_Initialize 0004  
                               _eusart1TxBuffer 0070                               _SYSTEM_Initialize 05F6  
                                    __accesstop 0060                         __end_of__initialization 04E0  
                            ?_SYSTEM_Initialize 0026                                   ___rparam_used 000001  
                __size_of_EUSART1_RxDataHandler 0024                   __end_of_EUSART1_RxDataHandler 05F6  
                  __size_of_ADC_StartConversion 0004                                  __pcstackCOMRAM 0026  
                                  __pidataBANK0 0658                             ??_SYSTEM_Initialize 0082  
                                     ?_TMR0_ISR 0026                          ??_EUSART1_Transmit_ISR 0026  
                       _ADC_GetConversionResult 0628                     __end_of_EUSART1_Receive_ISR 0312  
                     __end_of_SYSTEM_Initialize 0610                                   _eusart1RxHead 0022  
                                 _eusart1TxHead 0024                                   _eusart1RxTail 0021  
                                    __pbssBANK0 0060                                   _eusart1TxTail 0023  
             _EUSART1_TxDefaultInterruptHandler 0040                 ??_EUSART1_SetRxInterruptHandler 0082  
                               __CFG_PLLCFG$OFF 000000                                      __pnvCOMRAM 0038  
               __end_of_EUSART1_SetErrorHandler 069E                              __CFG_CCP2MX$PORTC1 000000  
              __end_of_TMR0_SetInterruptHandler 066C                                         ?___wmul 0080  
                                    ??_TMR0_ISR 0026                              __CFG_CCP3MX$PORTB5 000000  
                                       _ADC_ISR 06BA                         __size_of_ADC_Initialize 0018  
        __end_of_EUSART1_SetFramingErrorHandler 0694         __size_of_EUSART1_SetFramingErrorHandler 000A  
                _EUSART1_SetFramingErrorHandler 068A                    ?_EUSART1_DefaultErrorHandler 0026  
                                       _OSCCON2 000FD2                                         i2u61_48 02CA  
                                       i2u53_48 056E                                         i2u61_49 02DE  
                                       i2u53_49 0582                                         _OSCTUNE 000F9B  
                                       i2u63_48 02F8                                         _SPBRGH1 000FB0  
                                       i2u59_48 029C                                         i2u83_48 0078  
                                       i2u59_49 02B0                                         i2u86_48 008E  
                                       i2u86_49 00A2                                 __CFG_PWRTEN$OFF 000000  
                                       __Hparam 0000                                         __Lparam 0000  
                                       ___awdiv 0312                                         ___awmod 0416  
                               __size_of___wmul 0028                       ??_ADC_GetConversionResult 0082  
                                       __pcinit 0488                                         __ramtop 1000  
                                       __ptext0 00F2                                         __ptext1 0586  
                                       __ptext2 0416                                         __ptext3 0312  
                                       __ptext4 05F6                                         __ptext5 05AE  
                                       __ptext6 0662                                         __ptext7 04EE  
                                       __ptext8 063E                                         __ptext9 06B2  
                                     _T0CONbits 000FD5                           _OSCILLATOR_Initialize 063E  
                              ___awmod@dividend 0080                              _EUSART1_Initialize 0398  
                      ??_PIN_MANAGER_Initialize 0080                   ??_EUSART1_DefaultErrorHandler 0026  
                    __size_of_SYSTEM_Initialize 001A                            end_of_initialization 04E0  
                           ?_EUSART1_Initialize 0026                                   __Lmediumconst 0000  
                   _EUSART1_OverrunErrorHandler 003A           __end_of_EUSART1_SetRxInterruptHandler 0680  
        __size_of_EUSART1_SetRxInterruptHandler 000A                   _EUSART1_SetRxInterruptHandler 0676  
                  __end_of_ADC_IsConversionDone 0658                                         postdec1 000FE5  
                                       postinc0 000FEE                            ??_EUSART1_Initialize 0082  
                      _TMR0_SetInterruptHandler 0662                             _ADC_StartConversion 06B6  
              __size_of_EUSART1_SetErrorHandler 000A            __size_of_EUSART1_DefaultErrorHandler 0006  
                          ?_ADC_StartConversion 0080                    __end_of_INTERRUPT_Initialize 06B6  
                                __end_of___wmul 05AE                                   __pidataCOMRAM 069E  
                             __size_of_TMR0_ISR 002A                                  _ADC_Initialize 0610  
                        ?_OSCILLATOR_Initialize 0026                             start_initialization 0488  
                      __size_of_TMR0_Initialize 0024                 __size_of_PIN_MANAGER_Initialize 0040  
 EUSART1_SetRxInterruptHandler@interruptHandler 0080   EUSART1_SetTxInterruptHandler@interruptHandler 0080  
                         ??_ADC_StartConversion 0082                                        ??___wmul 0084  
                         _EUSART1_RxDataHandler 05D2                  ?_EUSART1_SetRxInterruptHandler 0080  
                        __end_of_ADC_Initialize 0628                                     __pdataBANK0 008F  
                                      ?_ADC_ISR 0026                                  _eusart1RxCount 0020  
                                   __pbssCOMRAM 0001               _EUSART1_RxDefaultInterruptHandler 003E  
                 __size_of_EUSART1_Transmit_ISR 002E                                   __pcstackBANK0 0080  
                          _ADC_IsConversionDone 064C                 ??_EUSART1_SetTxInterruptHandler 0082  
              ??_EUSART1_SetFramingErrorHandler 0082                 ?_EUSART1_SetFramingErrorHandler 0080  
                  __size_of_EUSART1_Receive_ISR 00A4                           _TMR0_InterruptHandler 0042  
                        _PIN_MANAGER_Initialize 04EE                                       __pintcode 0008  
                                      ?___awdiv 0086                                        ?___awmod 0080  
                               ?_ADC_Initialize 0026                    ??_INTERRUPT_InterruptManager 0026  
                              __CFG_PRICLKEN$ON 000000                                        _BAUDCON1 000FB8  
    __end_of_EUSART1_DefaultOverrunErrorHandler 06AC     __size_of_EUSART1_DefaultOverrunErrorHandler 0006  
          ??_EUSART1_DefaultOverrunErrorHandler 0026             ?_EUSART1_DefaultOverrunErrorHandler 0026  
            _EUSART1_DefaultOverrunErrorHandler 06A6                            _EUSART1_ErrorHandler 0038  
                         ?_ADC_IsConversionDone 0026                         _EUSART1_SetErrorHandler 0694  
                          _INTERRUPT_Initialize 06B2                               ??_TMR0_Initialize 0082  
                                ___wmul@product 0084         EUSART1_SetErrorHandler@interruptHandler 0080  
                                      _PIE1bits 000F9D             __size_of_INTERRUPT_InterruptManager 00E6  
                    ??_TMR0_SetInterruptHandler 0082                                        _PIR1bits 000F9E  
                        ?_EUSART1_RxDataHandler 0026                                        _RCONbits 000FD0  
                              __CFG_WDTPS$32768 000000                                        _TMR0_ISR 055C  
                              __size_of_ADC_ISR 0004                                      _ADCON0bits 000FC2  
                             ___wmul@multiplier 0080                                     _INTCON2bits 000FF1  
                                     copy_data0 049C                                       copy_data1 04BC  
                         ?_INTERRUPT_Initialize 0026           __end_of_EUSART1_SetTxInterruptHandler 0676  
        __size_of_EUSART1_SetTxInterruptHandler 000A                   _EUSART1_SetTxInterruptHandler 066C  
                                      __Hrparam 0000                                        __Lrparam 0000  
                      ?_ADC_GetConversionResult 0080                              __CFG_BOREN$SBORDIS 000000  
                             __CFG_P2BMX$PORTD2 000000                         ??_OSCILLATOR_Initialize 0080  
                              __size_of___awdiv 0086                                __size_of___awmod 0072  
                   __size_of_EUSART1_Initialize 007E                       ??_EUSART1_SetErrorHandler 0082  
                        ??_ADC_IsConversionDone 0080             __end_of_EUSART1_DefaultErrorHandler 06B2  
                   _EUSART1_DefaultErrorHandler 06AC                                        __ptext10 0398  
                                      __ptext11 066C                                        __ptext12 0676  
                                      __ptext21 055C                                        __ptext13 0680  
                                      __ptext30 0000                                        __ptext22 06BE  
                                      __ptext14 068A                                        __ptext23 052E  
                                      __ptext15 0694                                        __ptext24 026E  
                                      __ptext16 0610                                        __ptext25 06A6  
                                      __ptext17 06B6                                        __ptext26 06C0  
                                      __ptext18 064C                                        __ptext27 06AC  
                                      __ptext19 0628                                        __ptext28 05D2  
                                      __ptext29 06BA                                   __size_of_main 017C  
          __end_of_TMR0_DefaultInterruptHandler 06C0           __size_of_TMR0_DefaultInterruptHandler 0002  
                  _TMR0_DefaultInterruptHandler 06BE  EUSART1_SetOverrunErrorHandler@interruptHandler 0080  
                                      int$flags 004E              __end_of_INTERRUPT_InterruptManager 00EE  
                    _INTERRUPT_InterruptManager 0008                     _EUSART1_FramingErrorHandler 003C  
                           _EUSART1_Receive_ISR 026E                                      _INTCONbits 000FF2  
                        ??_INTERRUPT_Initialize 0080                                        intlevel2 0000  
                          ?_EUSART1_Receive_ISR 0026                     __end_of_ADC_StartConversion 06BA  
                       ?_PIN_MANAGER_Initialize 0026                 __end_of_ADC_GetConversionResult 063E  
        __end_of_EUSART1_SetOverrunErrorHandler 068A         __size_of_EUSART1_SetOverrunErrorHandler 000A  
                _EUSART1_SetOverrunErrorHandler 0680                                      _RCSTA1bits 000FAB  
                  __end_of_EUSART1_Transmit_ISR 055C                                ??_ADC_Initialize 0080  
                 ?_TMR0_DefaultInterruptHandler 0026  EUSART1_SetFramingErrorHandler@interruptHandler 0080  
                ?_EUSART1_SetTxInterruptHandler 0080                              _eusart1RxLastError 001F  
                               _TMR0_Initialize 05AE                               __CFG_T3CMX$PORTC0 000000  
                         ??_EUSART1_Receive_ISR 0026                  __end_of_PIN_MANAGER_Initialize 052E  
                             __CFG_FOSC$INTIO67 000000                         ??_EUSART1_RxDataHandler 0026  
