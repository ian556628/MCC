

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 18 22:15:28 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F46K22 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataBANK0
    78  0005C2                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _Seg
    82  0005C2  C0                 	db	192
    83  0005C3  F9                 	db	249
    84  0005C4  A4                 	db	164
    85  0005C5  B0                 	db	176
    86  0005C6  99                 	db	153
    87  0005C7  92                 	db	146
    88  0005C8  82                 	db	130
    89  0005C9  F8                 	db	248
    90  0005CA  80                 	db	128
    91  0005CB  90                 	db	144
    92  0005CC  88                 	db	136
    93  0005CD  83                 	db	131
    94  0005CE  C6                 	db	198
    95  0005CF  A1                 	db	161
    96  0005D0  86                 	db	134
    97  0005D1  8E                 	db	142
    98                           
    99                           	psect	nvCOMRAM
   100  00004C                     __pnvCOMRAM:
   101                           	opt stack 0
   102  00004C                     _EUSART1_ErrorHandler:
   103                           	opt stack 0
   104  00004C                     	ds	2
   105  00004E                     _EUSART1_OverrunErrorHandler:
   106                           	opt stack 0
   107  00004E                     	ds	2
   108  000050                     _EUSART1_FramingErrorHandler:
   109                           	opt stack 0
   110  000050                     	ds	2
   111  000052                     _EUSART1_RxDefaultInterruptHandler:
   112                           	opt stack 0
   113  000052                     	ds	2
   114  000054                     _EUSART1_TxDefaultInterruptHandler:
   115                           	opt stack 0
   116  000054                     	ds	2
   117  000056                     _eusart1TxBufferRemaining:
   118                           	opt stack 0
   119  000056                     	ds	1
   120  0000                     _ANSELA	set	3896
   121  0000                     _ANSELE	set	3900
   122  0000                     _ANSELB	set	3897
   123  0000                     _ANSELC	set	3898
   124  0000                     _ANSELD	set	3899
   125  0000                     _INTCON2bits	set	4081
   126  0000                     _WPUB	set	3937
   127  0000                     _TRISD	set	3989
   128  0000                     _TRISC	set	3988
   129  0000                     _TRISB	set	3987
   130  0000                     _TRISA	set	3986
   131  0000                     _TRISE	set	3990
   132  0000                     _LATC	set	3979
   133  0000                     _LATB	set	3978
   134  0000                     _LATA	set	3977
   135  0000                     _LATD	set	3980
   136  0000                     _LATE	set	3981
   137  0000                     _OSCTUNE	set	3995
   138  0000                     _OSCCON2	set	4050
   139  0000                     _OSCCON	set	4051
   140  0000                     _PIR1bits	set	3998
   141  0000                     _INTCONbits	set	4082
   142  0000                     _RCONbits	set	4048
   143  0000                     _RCREG1	set	4014
   144  0000                     _RCSTA1bits	set	4011
   145  0000                     _TXREG1	set	4013
   146  0000                     _TXSTA1bits	set	4012
   147  0000                     _SPBRGH1	set	4016
   148  0000                     _SPBRG1	set	4015
   149  0000                     _TXSTA1	set	4012
   150  0000                     _RCSTA1	set	4011
   151  0000                     _BAUDCON1	set	4024
   152  0000                     _PIE1bits	set	3997
   153                           
   154                           ; #config settings
   155  0000                     
   156                           	psect	cinit
   157  00049A                     __pcinit:
   158                           	opt stack 0
   159  00049A                     start_initialization:
   160                           	opt stack 0
   161  00049A                     __initialization:
   162                           	opt stack 0
   163                           
   164                           ; Initialize objects allocated to BANK0 (16 bytes)
   165                           ; load TBLPTR registers with __pidataBANK0
   166  00049A  0EC2               	movlw	low __pidataBANK0
   167  00049C  6EF6               	movwf	tblptrl,c
   168  00049E  0E05               	movlw	high __pidataBANK0
   169  0004A0  6EF7               	movwf	tblptrh,c
   170  0004A2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   171  0004A4  6EF8               	movwf	tblptru,c
   172  0004A6  EE00  F070         	lfsr	0,__pdataBANK0
   173  0004AA  EE10 F010          	lfsr	1,16
   174  0004AE                     copy_data0:
   175  0004AE  0009               	tblrd		*+
   176  0004B0  CFF5 FFEE          	movff	tablat,postinc0
   177  0004B4  50E5               	movf	postdec1,w,c
   178  0004B6  50E1               	movf	fsr1l,w,c
   179  0004B8  E1FA               	bnz	copy_data0
   180                           
   181                           ; Clear objects allocated to BANK0 (16 bytes)
   182  0004BA  EE00  F060         	lfsr	0,__pbssBANK0
   183  0004BE  0E10               	movlw	16
   184  0004C0                     clear_0:
   185  0004C0  6AEE               	clrf	postinc0,c
   186  0004C2  06E8               	decf	wreg,f,c
   187  0004C4  E1FD               	bnz	clear_0
   188                           
   189                           ; Clear objects allocated to COMRAM (57 bytes)
   190  0004C6  EE00  F001         	lfsr	0,__pbssCOMRAM
   191  0004CA  0E39               	movlw	57
   192  0004CC                     clear_1:
   193  0004CC  6AEE               	clrf	postinc0,c
   194  0004CE  06E8               	decf	wreg,f,c
   195  0004D0  E1FD               	bnz	clear_1
   196  0004D2                     end_of_initialization:
   197                           	opt stack 0
   198  0004D2                     __end_of__initialization:
   199                           	opt stack 0
   200  0004D2  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   201  0004D4  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   202  0004D6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   203  0004D8  6EF8               	movwf	tblptru,c
   204  0004DA  0100               	movlb	0
   205  0004DC  EFFE  F001         	goto	_main	;jump to C main() function
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           postdec1	equ	0xFE5
   213                           fsr1l	equ	0xFE1
   214                           
   215                           	psect	bssCOMRAM
   216  000001                     __pbssCOMRAM:
   217                           	opt stack 0
   218  000001                     _eusart1RxStatusBuffer:
   219                           	opt stack 0
   220  000001                     	ds	16
   221  000011                     _eusart1TxBuffer:
   222                           	opt stack 0
   223  000011                     	ds	16
   224  000021                     _cc:
   225                           	opt stack 0
   226  000021                     	ds	2
   227  000023                     _c:
   228                           	opt stack 0
   229  000023                     	ds	2
   230  000025                     _seg:
   231                           	opt stack 0
   232  000025                     	ds	2
   233  000027                     _status:
   234                           	opt stack 0
   235  000027                     	ds	2
   236  000029                     _c_scan:
   237                           	opt stack 0
   238  000029                     	ds	1
   239  00002A                     _segg22:
   240                           	opt stack 0
   241  00002A                     	ds	1
   242  00002B                     _segg222:
   243                           	opt stack 0
   244  00002B                     	ds	1
   245  00002C                     _segg21:
   246                           	opt stack 0
   247  00002C                     	ds	1
   248  00002D                     _segg12:
   249                           	opt stack 0
   250  00002D                     	ds	1
   251  00002E                     _segg122:
   252                           	opt stack 0
   253  00002E                     	ds	1
   254  00002F                     _segg11:
   255                           	opt stack 0
   256  00002F                     	ds	1
   257  000030                     _seg_value2:
   258                           	opt stack 0
   259  000030                     	ds	1
   260  000031                     _seg_value1:
   261                           	opt stack 0
   262  000031                     	ds	1
   263  000032                     _rxData:
   264                           	opt stack 0
   265  000032                     	ds	1
   266  000033                     _led_value:
   267                           	opt stack 0
   268  000033                     	ds	1
   269  000034                     _eusart1RxLastError:
   270                           	opt stack 0
   271  000034                     	ds	1
   272  000035                     _eusart1RxCount:
   273                           	opt stack 0
   274  000035                     	ds	1
   275  000036                     _eusart1RxTail:
   276                           	opt stack 0
   277  000036                     	ds	1
   278  000037                     _eusart1RxHead:
   279                           	opt stack 0
   280  000037                     	ds	1
   281  000038                     _eusart1TxTail:
   282                           	opt stack 0
   283  000038                     	ds	1
   284  000039                     _eusart1TxHead:
   285                           	opt stack 0
   286  000039                     	ds	1
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	bssBANK0
   297  000060                     __pbssBANK0:
   298                           	opt stack 0
   299  000060                     _eusart1RxBuffer:
   300                           	opt stack 0
   301  000060                     	ds	16
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec1	equ	0xFE5
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	dataBANK0
   312  000070                     __pdataBANK0:
   313                           	opt stack 0
   314  000070                     _Seg:
   315                           	opt stack 0
   316  000070                     	ds	16
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	cstackBANK0
   327  000080                     __pcstackBANK0:
   328                           	opt stack 0
   329  000080                     ??_seg_calculate:
   330  000080                     EUSART1_Read@readValue:
   331                           	opt stack 0
   332  000080                     EUSART1_Write@txData:
   333                           	opt stack 0
   334  000080                     EUSART1_SetFramingErrorHandler@interruptHandler:
   335                           	opt stack 0
   336  000080                     EUSART1_SetOverrunErrorHandler@interruptHandler:
   337                           	opt stack 0
   338  000080                     EUSART1_SetErrorHandler@interruptHandler:
   339                           	opt stack 0
   340  000080                     EUSART1_SetTxInterruptHandler@interruptHandler:
   341                           	opt stack 0
   342  000080                     EUSART1_SetRxInterruptHandler@interruptHandler:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x0
   346  000080                     	ds	1
   347  000081                     ??_state:
   348                           
   349                           ; 1 bytes @ 0x1
   350  000081                     	ds	1
   351  000082                     
   352                           ; 1 bytes @ 0x2
   353  000082                     	ds	1
   354  000083                     tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           postdec1	equ	0xFE5
   361                           fsr1l	equ	0xFE1
   362                           
   363                           ; 1 bytes @ 0x3
   364                           
   365                           	psect	cstackCOMRAM
   366  00003A                     __pcstackCOMRAM:
   367                           	opt stack 0
   368  00003A                     ??_INTERRUPT_InterruptManager:
   369  00003A                     
   370                           ; 1 bytes @ 0x0
   371  00003A                     	ds	18
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           postdec1	equ	0xFE5
   379                           fsr1l	equ	0xFE1
   380                           
   381 ;;
   382 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   383 ;;
   384 ;; *************** function _main *****************
   385 ;; Defined at:
   386 ;;		line 132 in file "main.c"
   387 ;; Parameters:    Size  Location     Type
   388 ;;		None
   389 ;; Auto vars:     Size  Location     Type
   390 ;;		None
   391 ;; Return value:  Size  Location     Type
   392 ;;                  1    wreg      void 
   393 ;; Registers used:
   394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   395 ;; Tracked objects:
   396 ;;		On entry : 0/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   404 ;;Total ram usage:        0 bytes
   405 ;; Hardware stack levels required when called:    7
   406 ;; This function calls:
   407 ;;		_EUSART1_Read
   408 ;;		_EUSART1_Write
   409 ;;		_EUSART1_is_rx_ready
   410 ;;		_SYSTEM_Initialize
   411 ;;		_seg_calculate
   412 ;;		_show_seg
   413 ;;		_state
   414 ;; This function is called by:
   415 ;;		Startup code after reset
   416 ;; This function uses a non-reentrant model
   417 ;;
   418                           
   419                           	psect	text0
   420  0003FC                     __ptext0:
   421                           	opt stack 0
   422  0003FC                     _main:
   423                           	opt stack 24
   424                           
   425                           ;main.c: 135: SYSTEM_Initialize();
   426                           
   427                           ;incstack = 0
   428  0003FC  ECD8  F002         	call	_SYSTEM_Initialize	;wreg free
   429                           
   430                           ;main.c: 142: (INTCONbits.GIE = 1);
   431  000400  8EF2               	bsf	intcon,7,c	;volatile
   432                           
   433                           ;main.c: 148: (INTCONbits.PEIE = 1);
   434  000402  8CF2               	bsf	intcon,6,c	;volatile
   435  000404                     
   436                           ;main.c: 155: {
   437                           ;main.c: 156: state();
   438  000404  EC6D  F000         	call	_state	;wreg free
   439                           
   440                           ;main.c: 157: seg_calculate();
   441  000408  ECD0  F001         	call	_seg_calculate	;wreg free
   442                           
   443                           ;main.c: 158: show_seg();
   444  00040C  ECDF  F000         	call	_show_seg	;wreg free
   445                           
   446                           ;main.c: 159: if(EUSART1_is_rx_ready())
   447  000410  ECE9  F002         	call	_EUSART1_is_rx_ready	;wreg free
   448  000414  0900               	iorlw	0
   449  000416  B4D8               	btfsc	status,2,c
   450  000418  D7F5               	goto	l311
   451                           
   452                           ;main.c: 160: {
   453                           ;main.c: 161: rxData = EUSART1_Read();
   454  00041A  EC27  F002         	call	_EUSART1_Read	;wreg free
   455  00041E  6E32               	movwf	_rxData,c	;volatile
   456                           
   457                           ;main.c: 162: if(rxData==0x3F)
   458  000420  0E3F               	movlw	63
   459  000422  1832               	xorwf	_rxData,w,c	;volatile
   460  000424  A4D8               	btfss	status,2,c
   461  000426  D007               	goto	l313
   462                           
   463                           ;main.c: 163: {
   464                           ;main.c: 164: EUSART1_Write(0x4C);
   465  000428  0E4C               	movlw	76
   466  00042A  EC91  F002         	call	_EUSART1_Write
   467                           
   468                           ;main.c: 165: status=1;
   469  00042E  0E00               	movlw	0
   470  000430  6E28               	movwf	_status+1,c
   471  000432  0E01               	movlw	1
   472  000434  6E27               	movwf	_status,c
   473  000436                     l313:
   474                           
   475                           ;main.c: 166: }
   476                           ;main.c: 167: if(rxData==0x3A)
   477  000436  0E3A               	movlw	58
   478  000438  1832               	xorwf	_rxData,w,c	;volatile
   479  00043A  A4D8               	btfss	status,2,c
   480  00043C  D7E3               	goto	l311
   481                           
   482                           ;main.c: 168: {
   483                           ;main.c: 169: EUSART1_Write(0x53);
   484  00043E  0E53               	movlw	83
   485  000440  EC91  F002         	call	_EUSART1_Write
   486                           
   487                           ;main.c: 170: status=2;
   488  000444  0E00               	movlw	0
   489  000446  6E28               	movwf	_status+1,c
   490  000448  0E02               	movlw	2
   491  00044A  6E27               	movwf	_status,c
   492  00044C  D7DB               	goto	l311
   493  00044E                     __end_of_main:
   494                           	opt stack 0
   495                           tblptru	equ	0xFF8
   496                           tblptrh	equ	0xFF7
   497                           tblptrl	equ	0xFF6
   498                           tablat	equ	0xFF5
   499                           intcon	equ	0xFF2
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           status	equ	0xFD8
   505                           
   506 ;; *************** function _state *****************
   507 ;; Defined at:
   508 ;;		line 19 in file "main.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   526 ;;Total ram usage:        2 bytes
   527 ;; Hardware stack levels used:    1
   528 ;; Hardware stack levels required when called:    5
   529 ;; This function calls:
   530 ;;		_EUSART1_Read
   531 ;;		_EUSART1_is_rx_ready
   532 ;; This function is called by:
   533 ;;		_main
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           	psect	text1
   538  0000DA                     __ptext1:
   539                           	opt stack 0
   540  0000DA                     _state:
   541                           	opt stack 25
   542                           
   543                           ;main.c: 21: switch(status)
   544                           
   545                           ;incstack = 0
   546  0000DA  D060               	goto	l285
   547  0000DC                     
   548                           ;main.c: 24: _delay((unsigned long)((20)*(1000000/4000.0)));
   549  0000DC  0E07               	movlw	7
   550  0000DE  0100               	movlb	0	; () banked
   551  0000E0  6F81               	movwf	??_state& (0+255),b
   552  0000E2  0E7D               	movlw	125
   553  0000E4                     u907:
   554  0000E4  2EE8               	decfsz	wreg,f,c
   555  0000E6  D7FE               	bra	u907
   556  0000E8  2F81               	decfsz	??_state& (0+255),f,b
   557  0000EA  D7FC               	bra	u907
   558                           
   559                           ;main.c: 25: if(EUSART1_is_rx_ready())
   560  0000EC  ECE9  F002         	call	_EUSART1_is_rx_ready	;wreg free
   561  0000F0  0900               	iorlw	0
   562  0000F2  B4D8               	btfsc	status,2,c
   563  0000F4  D015               	goto	l287
   564                           
   565                           ;main.c: 26: {
   566                           ;main.c: 27: rxData = EUSART1_Read();
   567  0000F6  EC27  F002         	call	_EUSART1_Read	;wreg free
   568  0000FA  6E32               	movwf	_rxData,c	;volatile
   569                           
   570                           ;main.c: 28: if(rxData!=0x3f)
   571  0000FC  0E3F               	movlw	63
   572  0000FE  1832               	xorwf	_rxData,w,c	;volatile
   573  000100  B4D8               	btfsc	status,2,c
   574  000102  0012               	return	
   575                           
   576                           ;main.c: 29: {
   577                           ;main.c: 30: led_value=rxData;
   578  000104  C032  F033         	movff	_rxData,_led_value	;volatile
   579                           
   580                           ;main.c: 31: LATA=led_value;
   581  000108  C033  FF89         	movff	_led_value,3977	;volatile
   582                           
   583                           ;main.c: 32: LATA=~LATA;
   584  00010C  1E89               	comf	3977,f,c	;volatile
   585                           
   586                           ;main.c: 33: _delay((unsigned long)((1)*(1000000/4000.0)));
   587  00010E  0E53               	movlw	83
   588  000110                     u917:
   589  000110  2EE8               	decfsz	wreg,f,c
   590  000112  D7FE               	bra	u917
   591  000114  F000               	nop	
   592                           
   593                           ;main.c: 34: status=0;
   594  000116  0E00               	movlw	0
   595  000118  6E28               	movwf	_status+1,c
   596  00011A  0E00               	movlw	0
   597  00011C  6E27               	movwf	_status,c
   598                           
   599                           ;main.c: 36: }
   600                           ;main.c: 37: }
   601                           
   602                           ;main.c: 35: break;
   603  00011E  0012               	return	
   604  000120                     l287:
   605                           
   606                           ;main.c: 38: else
   607                           ;main.c: 39: status=1;
   608  000120  0E00               	movlw	0
   609  000122  6E28               	movwf	_status+1,c
   610  000124  0E01               	movlw	1
   611  000126  6E27               	movwf	_status,c
   612                           
   613                           ;main.c: 40: break;
   614  000128  0012               	return	
   615  00012A                     
   616                           ;main.c: 42: _delay((unsigned long)((15)*(1000000/4000.0)));
   617  00012A  0E05               	movlw	5
   618  00012C  0100               	movlb	0	; () banked
   619  00012E  6F81               	movwf	??_state& (0+255),b
   620  000130  0EDD               	movlw	221
   621  000132                     u927:
   622  000132  2EE8               	decfsz	wreg,f,c
   623  000134  D7FE               	bra	u927
   624  000136  2F81               	decfsz	??_state& (0+255),f,b
   625  000138  D7FC               	bra	u927
   626  00013A  D000               	nop2	
   627                           
   628                           ;main.c: 43: if(EUSART1_is_rx_ready())
   629  00013C  ECE9  F002         	call	_EUSART1_is_rx_ready	;wreg free
   630  000140  0900               	iorlw	0
   631  000142  B4D8               	btfsc	status,2,c
   632  000144  0012               	return	
   633                           
   634                           ;main.c: 44: {
   635                           ;main.c: 45: rxData = EUSART1_Read();
   636  000146  EC27  F002         	call	_EUSART1_Read	;wreg free
   637  00014A  6E32               	movwf	_rxData,c	;volatile
   638                           
   639                           ;main.c: 46: if(rxData!=0x3a)
   640  00014C  0E3A               	movlw	58
   641  00014E  1832               	xorwf	_rxData,w,c	;volatile
   642  000150  B4D8               	btfsc	status,2,c
   643  000152  0012               	return	
   644                           
   645                           ;main.c: 47: {
   646                           ;main.c: 48: if(c==1)
   647  000154  0423               	decf	_c,w,c
   648  000156  1024               	iorwf	_c+1,w,c
   649  000158  A4D8               	btfss	status,2,c
   650  00015A  D00F               	goto	l294
   651                           
   652                           ;main.c: 49: {
   653                           ;main.c: 50: seg_value2=rxData;
   654  00015C  C032  F030         	movff	_rxData,_seg_value2	;volatile
   655                           
   656                           ;main.c: 51: _delay((unsigned long)((1)*(1000000/4000.0)));
   657  000160  0E53               	movlw	83
   658  000162                     u937:
   659  000162  2EE8               	decfsz	wreg,f,c
   660  000164  D7FE               	bra	u937
   661  000166  F000               	nop	
   662                           
   663                           ;main.c: 52: c=0;
   664  000168  0E00               	movlw	0
   665  00016A  6E24               	movwf	_c+1,c
   666  00016C  0E00               	movlw	0
   667  00016E  6E23               	movwf	_c,c
   668                           
   669                           ;main.c: 53: status=0;
   670  000170  0E00               	movlw	0
   671  000172  6E28               	movwf	_status+1,c
   672  000174  0E00               	movlw	0
   673  000176  6E27               	movwf	_status,c
   674                           
   675                           ;main.c: 54: break;
   676  000178  0012               	return	
   677  00017A                     l294:
   678                           
   679                           ;main.c: 55: }
   680                           ;main.c: 56: if(c==0)
   681  00017A  5023               	movf	_c,w,c
   682  00017C  1024               	iorwf	_c+1,w,c
   683  00017E  A4D8               	btfss	status,2,c
   684  000180  0012               	return	
   685                           
   686                           ;main.c: 57: {
   687                           ;main.c: 58: seg_value1=rxData;
   688  000182  C032  F031         	movff	_rxData,_seg_value1	;volatile
   689                           
   690                           ;main.c: 59: _delay((unsigned long)((1)*(1000000/4000.0)));
   691  000186  0E53               	movlw	83
   692  000188                     u947:
   693  000188  2EE8               	decfsz	wreg,f,c
   694  00018A  D7FE               	bra	u947
   695  00018C  F000               	nop	
   696                           
   697                           ;main.c: 60: c++;
   698  00018E  4A23               	infsnz	_c,f,c
   699  000190  2A24               	incf	_c+1,f,c
   700                           
   701                           ;main.c: 61: status=0;
   702  000192  0E00               	movlw	0
   703  000194  6E28               	movwf	_status+1,c
   704  000196  0E00               	movlw	0
   705  000198  6E27               	movwf	_status,c
   706                           
   707                           ;main.c: 63: }
   708                           ;main.c: 64: }
   709                           ;main.c: 65: }
   710                           ;main.c: 79: }
   711                           
   712                           ;main.c: 62: break;
   713  00019A  0012               	return	
   714  00019C                     l285:
   715  00019C  C027  F081         	movff	_status,??_state
   716  0001A0  C028  F082         	movff	_status+1,??_state+1
   717                           
   718                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   719                           ; Switch size 1, requested type "space"
   720                           ; Number of cases is 1, Range of values is 0 to 0
   721                           ; switch strategies available:
   722                           ; Name         Instructions Cycles
   723                           ; simple_byte            4     3 (average)
   724                           ;	Chosen strategy is simple_byte
   725  0001A4  0100               	movlb	0	; () banked
   726  0001A6  5182               	movf	(??_state+1)& (0+255),w,b
   727  0001A8  0A00               	xorlw	0	; case 0
   728  0001AA  A4D8               	btfss	status,2,c
   729  0001AC  0012               	return	
   730                           
   731                           ; BSR set to: 0
   732                           ; Switch size 1, requested type "space"
   733                           ; Number of cases is 2, Range of values is 1 to 2
   734                           ; switch strategies available:
   735                           ; Name         Instructions Cycles
   736                           ; simple_byte            7     4 (average)
   737                           ;	Chosen strategy is simple_byte
   738  0001AE  5181               	movf	??_state& (0+255),w,b
   739  0001B0  0A01               	xorlw	1	; case 1
   740  0001B2  B4D8               	btfsc	status,2,c
   741  0001B4  D793               	goto	l286
   742  0001B6  0A03               	xorlw	3	; case 2
   743  0001B8  A4D8               	btfss	status,2,c
   744  0001BA  0012               	return	
   745  0001BC  D7B6               	goto	l291
   746  0001BE                     __end_of_state:
   747                           	opt stack 0
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           intcon	equ	0xFF2
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           postdec1	equ	0xFE5
   756                           fsr1l	equ	0xFE1
   757                           status	equ	0xFD8
   758                           
   759 ;; *************** function _EUSART1_is_rx_ready *****************
   760 ;; Defined at:
   761 ;;		line 137 in file "mcc_generated_files/eusart1.c"
   762 ;; Parameters:    Size  Location     Type
   763 ;;		None
   764 ;; Auto vars:     Size  Location     Type
   765 ;;		None
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      unsigned char 
   768 ;; Registers used:
   769 ;;		wreg, status,2
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   779 ;;Total ram usage:        0 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    4
   782 ;; This function calls:
   783 ;;		Nothing
   784 ;; This function is called by:
   785 ;;		_state
   786 ;;		_main
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text2
   791  0005D2                     __ptext2:
   792                           	opt stack 0
   793  0005D2                     _EUSART1_is_rx_ready:
   794                           	opt stack 25
   795                           
   796                           ;eusart1.c: 139: return (eusart1RxCount ? 1 : 0);
   797                           
   798                           ;incstack = 0
   799  0005D2  5035               	movf	_eusart1RxCount,w,c	;volatile
   800  0005D4  B4D8               	btfsc	status,2,c
   801  0005D6  D002               	goto	u680
   802  0005D8  0E01               	movlw	1
   803  0005DA  0012               	return	
   804  0005DC                     u680:
   805  0005DC  0E00               	movlw	0
   806  0005DE  0012               	return	
   807  0005E0                     __end_of_EUSART1_is_rx_ready:
   808                           	opt stack 0
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           intcon	equ	0xFF2
   814                           postinc0	equ	0xFEE
   815                           wreg	equ	0xFE8
   816                           postdec1	equ	0xFE5
   817                           fsr1l	equ	0xFE1
   818                           status	equ	0xFD8
   819                           
   820 ;; *************** function _EUSART1_Read *****************
   821 ;; Defined at:
   822 ;;		line 151 in file "mcc_generated_files/eusart1.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;  readValue       1    0[BANK0 ] unsigned char 
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      unsigned char 
   829 ;; Registers used:
   830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;Total ram usage:        1 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    4
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_state
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text3
   852  00044E                     __ptext3:
   853                           	opt stack 0
   854  00044E                     _EUSART1_Read:
   855                           	opt stack 25
   856                           
   857                           ;eusart1.c: 153: uint8_t readValue = 0;
   858                           
   859                           ;incstack = 0
   860  00044E  0E00               	movlw	0
   861  000450  0100               	movlb	0	; () banked
   862  000452  6F80               	movwf	EUSART1_Read@readValue& (0+255),b
   863  000454                     
   864                           ; BSR set to: 0
   865                           
   866                           ;eusart1.c: 156: {
   867                           
   868                           ; BSR set to: 0
   869  000454  5035               	movf	_eusart1RxCount,w,c	;volatile
   870  000456  B4D8               	btfsc	status,2,c
   871  000458  D7FD               	goto	l91
   872                           
   873                           ;eusart1.c: 157: }
   874                           ;eusart1.c: 159: eusart1RxLastError = eusart1RxStatusBuffer[eusart1RxTail];
   875  00045A  5036               	movf	_eusart1RxTail,w,c	;volatile
   876  00045C  0D01               	mullw	1
   877  00045E  0E01               	movlw	low _eusart1RxStatusBuffer
   878  000460  24F3               	addwf	prodl,w,c
   879  000462  6ED9               	movwf	fsr2l,c
   880  000464  0E00               	movlw	high _eusart1RxStatusBuffer
   881  000466  20F4               	addwfc	prodh,w,c
   882  000468  6EDA               	movwf	fsr2h,c
   883  00046A  50DF               	movf	indf2,w,c
   884  00046C  6E34               	movwf	_eusart1RxLastError,c	;volatile
   885                           
   886                           ;eusart1.c: 161: readValue = eusart1RxBuffer[eusart1RxTail++];
   887  00046E  5036               	movf	_eusart1RxTail,w,c	;volatile
   888  000470  0D01               	mullw	1
   889  000472  0E60               	movlw	low _eusart1RxBuffer
   890  000474  24F3               	addwf	prodl,w,c
   891  000476  6ED9               	movwf	fsr2l,c
   892  000478  0E00               	movlw	high _eusart1RxBuffer
   893  00047A  20F4               	addwfc	prodh,w,c
   894  00047C  6EDA               	movwf	fsr2h,c
   895  00047E  50DF               	movf	indf2,w,c
   896  000480  0100               	movlb	0	; () banked
   897  000482  6F80               	movwf	EUSART1_Read@readValue& (0+255),b
   898                           
   899                           ; BSR set to: 0
   900  000484  2A36               	incf	_eusart1RxTail,f,c	;volatile
   901                           
   902                           ; BSR set to: 0
   903                           ;eusart1.c: 162: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
   904  000486  0E0F               	movlw	15
   905  000488  6436               	cpfsgt	_eusart1RxTail,c	;volatile
   906  00048A  D002               	goto	l93
   907                           
   908                           ; BSR set to: 0
   909                           ;eusart1.c: 163: {
   910                           ;eusart1.c: 164: eusart1RxTail = 0;
   911  00048C  0E00               	movlw	0
   912  00048E  6E36               	movwf	_eusart1RxTail,c	;volatile
   913  000490                     l93:
   914                           
   915                           ; BSR set to: 0
   916                           ;eusart1.c: 165: }
   917                           ;eusart1.c: 166: PIE1bits.RC1IE = 0;
   918                           
   919                           ; BSR set to: 0
   920  000490  9A9D               	bcf	3997,5,c	;volatile
   921                           
   922                           ; BSR set to: 0
   923                           ;eusart1.c: 167: eusart1RxCount--;
   924  000492  0635               	decf	_eusart1RxCount,f,c	;volatile
   925                           
   926                           ; BSR set to: 0
   927                           ;eusart1.c: 168: PIE1bits.RC1IE = 1;
   928  000494  8A9D               	bsf	3997,5,c	;volatile
   929                           
   930                           ; BSR set to: 0
   931                           ;eusart1.c: 170: return readValue;
   932  000496  5180               	movf	EUSART1_Read@readValue& (0+255),w,b
   933  000498  0012               	return	
   934  00049A                     __end_of_EUSART1_Read:
   935                           	opt stack 0
   936                           tblptru	equ	0xFF8
   937                           tblptrh	equ	0xFF7
   938                           tblptrl	equ	0xFF6
   939                           tablat	equ	0xFF5
   940                           prodh	equ	0xFF4
   941                           prodl	equ	0xFF3
   942                           intcon	equ	0xFF2
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           indf2	equ	0xFDF
   948                           fsr2h	equ	0xFDA
   949                           fsr2l	equ	0xFD9
   950                           status	equ	0xFD8
   951                           
   952 ;; *************** function _show_seg *****************
   953 ;; Defined at:
   954 ;;		line 92 in file "main.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;		None
   957 ;; Auto vars:     Size  Location     Type
   958 ;;		None
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   972 ;;Total ram usage:        0 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    4
   975 ;; This function calls:
   976 ;;		Nothing
   977 ;; This function is called by:
   978 ;;		_main
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text4
   983  0001BE                     __ptext4:
   984                           	opt stack 0
   985  0001BE                     _show_seg:
   986                           	opt stack 26
   987                           
   988                           ;main.c: 94: if (c_scan==0)
   989                           
   990                           ; BSR set to: 0
   991                           ;incstack = 0
   992  0001BE  5029               	movf	_c_scan,w,c	;volatile
   993  0001C0  A4D8               	btfss	status,2,c
   994  0001C2  D014               	goto	l302
   995                           
   996                           ;main.c: 95: {
   997                           ;main.c: 96: LATD=0xff;
   998  0001C4  688C               	setf	3980,c	;volatile
   999                           
  1000                           ;main.c: 97: LATC=0x00;
  1001  0001C6  0E00               	movlw	0
  1002  0001C8  6E8B               	movwf	3979,c	;volatile
  1003                           
  1004                           ;main.c: 98: LATC=0x08;
  1005  0001CA  0E08               	movlw	8
  1006  0001CC  6E8B               	movwf	3979,c	;volatile
  1007                           
  1008                           ;main.c: 99: LATD=Seg[segg11];
  1009  0001CE  502F               	movf	_segg11,w,c
  1010  0001D0  0D01               	mullw	1
  1011  0001D2  0E70               	movlw	low _Seg
  1012  0001D4  24F3               	addwf	prodl,w,c
  1013  0001D6  6ED9               	movwf	fsr2l,c
  1014  0001D8  0E00               	movlw	high _Seg
  1015  0001DA  20F4               	addwfc	prodh,w,c
  1016  0001DC  6EDA               	movwf	fsr2h,c
  1017  0001DE  50DF               	movf	indf2,w,c
  1018  0001E0  6E8C               	movwf	3980,c	;volatile
  1019                           
  1020                           ;main.c: 100: _delay((unsigned long)((2)*(1000000/4000.0)));
  1021  0001E2  0EA6               	movlw	166
  1022  0001E4                     u957:
  1023  0001E4  2EE8               	decfsz	wreg,f,c
  1024  0001E6  D7FE               	bra	u957
  1025  0001E8  D000               	nop2	
  1026                           
  1027                           ;main.c: 101: c_scan++;
  1028  0001EA  2A29               	incf	_c_scan,f,c	;volatile
  1029  0001EC                     l302:
  1030                           
  1031                           ;main.c: 102: }
  1032                           ;main.c: 103: if (c_scan==1)
  1033  0001EC  0429               	decf	_c_scan,w,c	;volatile
  1034  0001EE  A4D8               	btfss	status,2,c
  1035  0001F0  D014               	goto	l303
  1036                           
  1037                           ;main.c: 104: {
  1038                           ;main.c: 105: LATD=0xff;
  1039  0001F2  688C               	setf	3980,c	;volatile
  1040                           
  1041                           ;main.c: 106: LATC=0x00;
  1042  0001F4  0E00               	movlw	0
  1043  0001F6  6E8B               	movwf	3979,c	;volatile
  1044                           
  1045                           ;main.c: 107: LATC=0x04;
  1046  0001F8  0E04               	movlw	4
  1047  0001FA  6E8B               	movwf	3979,c	;volatile
  1048                           
  1049                           ;main.c: 108: LATD=Seg[segg122];
  1050  0001FC  502E               	movf	_segg122,w,c
  1051  0001FE  0D01               	mullw	1
  1052  000200  0E70               	movlw	low _Seg
  1053  000202  24F3               	addwf	prodl,w,c
  1054  000204  6ED9               	movwf	fsr2l,c
  1055  000206  0E00               	movlw	high _Seg
  1056  000208  20F4               	addwfc	prodh,w,c
  1057  00020A  6EDA               	movwf	fsr2h,c
  1058  00020C  50DF               	movf	indf2,w,c
  1059  00020E  6E8C               	movwf	3980,c	;volatile
  1060                           
  1061                           ;main.c: 109: _delay((unsigned long)((2)*(1000000/4000.0)));
  1062  000210  0EA6               	movlw	166
  1063  000212                     u967:
  1064  000212  2EE8               	decfsz	wreg,f,c
  1065  000214  D7FE               	bra	u967
  1066  000216  D000               	nop2	
  1067                           
  1068                           ;main.c: 110: c_scan++;
  1069  000218  2A29               	incf	_c_scan,f,c	;volatile
  1070  00021A                     l303:
  1071                           
  1072                           ;main.c: 111: }
  1073                           ;main.c: 112: if (c_scan==2)
  1074  00021A  0E02               	movlw	2
  1075  00021C  1829               	xorwf	_c_scan,w,c	;volatile
  1076  00021E  A4D8               	btfss	status,2,c
  1077  000220  D014               	goto	l304
  1078                           
  1079                           ;main.c: 113: {
  1080                           ;main.c: 114: LATD=0xff;
  1081  000222  688C               	setf	3980,c	;volatile
  1082                           
  1083                           ;main.c: 115: LATC=0x00;
  1084  000224  0E00               	movlw	0
  1085  000226  6E8B               	movwf	3979,c	;volatile
  1086                           
  1087                           ;main.c: 116: LATC=0x02;
  1088  000228  0E02               	movlw	2
  1089  00022A  6E8B               	movwf	3979,c	;volatile
  1090                           
  1091                           ;main.c: 117: LATD=Seg[segg21];
  1092  00022C  502C               	movf	_segg21,w,c
  1093  00022E  0D01               	mullw	1
  1094  000230  0E70               	movlw	low _Seg
  1095  000232  24F3               	addwf	prodl,w,c
  1096  000234  6ED9               	movwf	fsr2l,c
  1097  000236  0E00               	movlw	high _Seg
  1098  000238  20F4               	addwfc	prodh,w,c
  1099  00023A  6EDA               	movwf	fsr2h,c
  1100  00023C  50DF               	movf	indf2,w,c
  1101  00023E  6E8C               	movwf	3980,c	;volatile
  1102                           
  1103                           ;main.c: 118: _delay((unsigned long)((2)*(1000000/4000.0)));
  1104  000240  0EA6               	movlw	166
  1105  000242                     u977:
  1106  000242  2EE8               	decfsz	wreg,f,c
  1107  000244  D7FE               	bra	u977
  1108  000246  D000               	nop2	
  1109                           
  1110                           ;main.c: 119: c_scan++;
  1111  000248  2A29               	incf	_c_scan,f,c	;volatile
  1112  00024A                     l304:
  1113                           
  1114                           ;main.c: 120: }
  1115                           ;main.c: 121: if (c_scan==3)
  1116  00024A  0E03               	movlw	3
  1117  00024C  1829               	xorwf	_c_scan,w,c	;volatile
  1118  00024E  A4D8               	btfss	status,2,c
  1119  000250  0012               	return	
  1120                           
  1121                           ;main.c: 122: {
  1122                           ;main.c: 123: LATD=0xff;
  1123  000252  688C               	setf	3980,c	;volatile
  1124                           
  1125                           ;main.c: 124: LATC=0x00;
  1126  000254  0E00               	movlw	0
  1127  000256  6E8B               	movwf	3979,c	;volatile
  1128                           
  1129                           ;main.c: 125: LATC=0x01;
  1130  000258  0E01               	movlw	1
  1131  00025A  6E8B               	movwf	3979,c	;volatile
  1132                           
  1133                           ;main.c: 126: LATD=Seg[segg222];
  1134  00025C  502B               	movf	_segg222,w,c
  1135  00025E  0D01               	mullw	1
  1136  000260  0E70               	movlw	low _Seg
  1137  000262  24F3               	addwf	prodl,w,c
  1138  000264  6ED9               	movwf	fsr2l,c
  1139  000266  0E00               	movlw	high _Seg
  1140  000268  20F4               	addwfc	prodh,w,c
  1141  00026A  6EDA               	movwf	fsr2h,c
  1142  00026C  50DF               	movf	indf2,w,c
  1143  00026E  6E8C               	movwf	3980,c	;volatile
  1144                           
  1145                           ;main.c: 127: _delay((unsigned long)((2)*(1000000/4000.0)));
  1146  000270  0EA6               	movlw	166
  1147  000272                     u987:
  1148  000272  2EE8               	decfsz	wreg,f,c
  1149  000274  D7FE               	bra	u987
  1150  000276  D000               	nop2	
  1151                           
  1152                           ;main.c: 128: c_scan=0;
  1153  000278  0E00               	movlw	0
  1154  00027A  6E29               	movwf	_c_scan,c	;volatile
  1155  00027C  0012               	return	
  1156  00027E                     __end_of_show_seg:
  1157                           	opt stack 0
  1158                           tblptru	equ	0xFF8
  1159                           tblptrh	equ	0xFF7
  1160                           tblptrl	equ	0xFF6
  1161                           tablat	equ	0xFF5
  1162                           prodh	equ	0xFF4
  1163                           prodl	equ	0xFF3
  1164                           intcon	equ	0xFF2
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postdec1	equ	0xFE5
  1168                           fsr1l	equ	0xFE1
  1169                           indf2	equ	0xFDF
  1170                           fsr2h	equ	0xFDA
  1171                           fsr2l	equ	0xFD9
  1172                           status	equ	0xFD8
  1173                           
  1174 ;; *************** function _seg_calculate *****************
  1175 ;; Defined at:
  1176 ;;		line 82 in file "main.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;		None
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2, status,0
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1192 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1193 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1194 ;;Total ram usage:        3 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; Hardware stack levels required when called:    4
  1197 ;; This function calls:
  1198 ;;		Nothing
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text5
  1205  0003A0                     __ptext5:
  1206                           	opt stack 0
  1207  0003A0                     _seg_calculate:
  1208                           	opt stack 26
  1209                           
  1210                           ;main.c: 84: segg12=seg_value1<<4;
  1211                           
  1212                           ;incstack = 0
  1213  0003A0  3831               	swapf	_seg_value1,w,c	;volatile
  1214  0003A2  0BF0               	andlw	240
  1215  0003A4  6E2D               	movwf	_segg12,c
  1216                           
  1217                           ;main.c: 85: segg122=segg12>>4;
  1218  0003A6  382D               	swapf	_segg12,w,c
  1219  0003A8  0B0F               	andlw	15
  1220  0003AA  6E2E               	movwf	_segg122,c
  1221                           
  1222                           ;main.c: 86: segg11=(seg_value1|0x0F)>>4;
  1223  0003AC  5031               	movf	_seg_value1,w,c	;volatile
  1224  0003AE  0100               	movlb	0	; () banked
  1225  0003B0  6F80               	movwf	??_seg_calculate& (0+255),b
  1226  0003B2  6B81               	clrf	(??_seg_calculate+1)& (0+255),b
  1227  0003B4  0E0F               	movlw	15
  1228  0003B6  1380               	iorwf	??_seg_calculate& (0+255),f,b
  1229  0003B8  0E00               	movlw	0
  1230  0003BA  1381               	iorwf	(??_seg_calculate+1)& (0+255),f,b
  1231  0003BC  0E04               	movlw	4
  1232  0003BE  6F82               	movwf	(??_seg_calculate+2)& (0+255),b
  1233  0003C0                     u815:
  1234  0003C0  3581               	rlcf	(??_seg_calculate+1)& (0+255),w,b
  1235  0003C2  3381               	rrcf	(??_seg_calculate+1)& (0+255),f,b
  1236  0003C4  3380               	rrcf	??_seg_calculate& (0+255),f,b
  1237  0003C6  2F82               	decfsz	(??_seg_calculate+2)& (0+255),f,b
  1238  0003C8  D7FB               	goto	u815
  1239  0003CA  5180               	movf	??_seg_calculate& (0+255),w,b
  1240  0003CC  6E2F               	movwf	_segg11,c
  1241                           
  1242                           ;main.c: 87: segg22=seg_value2<<4;
  1243  0003CE  3830               	swapf	_seg_value2,w,c	;volatile
  1244  0003D0  0BF0               	andlw	240
  1245  0003D2  6E2A               	movwf	_segg22,c
  1246                           
  1247                           ;main.c: 88: segg222=segg22>>4;
  1248  0003D4  382A               	swapf	_segg22,w,c
  1249  0003D6  0B0F               	andlw	15
  1250  0003D8  6E2B               	movwf	_segg222,c
  1251                           
  1252                           ;main.c: 89: segg21=(seg_value2|0x0F)>>4;
  1253  0003DA  5030               	movf	_seg_value2,w,c	;volatile
  1254  0003DC  6F80               	movwf	??_seg_calculate& (0+255),b
  1255  0003DE  6B81               	clrf	(??_seg_calculate+1)& (0+255),b
  1256  0003E0  0E0F               	movlw	15
  1257  0003E2  1380               	iorwf	??_seg_calculate& (0+255),f,b
  1258  0003E4  0E00               	movlw	0
  1259  0003E6  1381               	iorwf	(??_seg_calculate+1)& (0+255),f,b
  1260  0003E8  0E04               	movlw	4
  1261  0003EA  6F82               	movwf	(??_seg_calculate+2)& (0+255),b
  1262  0003EC                     u825:
  1263  0003EC  3581               	rlcf	(??_seg_calculate+1)& (0+255),w,b
  1264  0003EE  3381               	rrcf	(??_seg_calculate+1)& (0+255),f,b
  1265  0003F0  3380               	rrcf	??_seg_calculate& (0+255),f,b
  1266  0003F2  2F82               	decfsz	(??_seg_calculate+2)& (0+255),f,b
  1267  0003F4  D7FB               	goto	u825
  1268  0003F6  5180               	movf	??_seg_calculate& (0+255),w,b
  1269  0003F8  6E2C               	movwf	_segg21,c
  1270                           
  1271                           ; BSR set to: 0
  1272  0003FA  0012               	return		;funcret
  1273  0003FC                     __end_of_seg_calculate:
  1274                           	opt stack 0
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           prodh	equ	0xFF4
  1280                           prodl	equ	0xFF3
  1281                           intcon	equ	0xFF2
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           postdec1	equ	0xFE5
  1285                           fsr1l	equ	0xFE1
  1286                           indf2	equ	0xFDF
  1287                           fsr2h	equ	0xFDA
  1288                           fsr2l	equ	0xFD9
  1289                           status	equ	0xFD8
  1290                           
  1291 ;; *************** function _SYSTEM_Initialize *****************
  1292 ;; Defined at:
  1293 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;		None
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, status,0, cstack
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;Total ram usage:        0 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    6
  1314 ;; This function calls:
  1315 ;;		_EUSART1_Initialize
  1316 ;;		_INTERRUPT_Initialize
  1317 ;;		_OSCILLATOR_Initialize
  1318 ;;		_PIN_MANAGER_Initialize
  1319 ;; This function is called by:
  1320 ;;		_main
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text6
  1325  0005B0                     __ptext6:
  1326                           	opt stack 0
  1327  0005B0                     _SYSTEM_Initialize:
  1328                           	opt stack 24
  1329                           
  1330                           ;mcc.c: 53: INTERRUPT_Initialize();
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;incstack = 0
  1334  0005B0  EC16  F003         	call	_INTERRUPT_Initialize	;wreg free
  1335                           
  1336                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  1337  0005B4  EC70  F002         	call	_PIN_MANAGER_Initialize	;wreg free
  1338                           
  1339                           ;mcc.c: 55: OSCILLATOR_Initialize();
  1340  0005B8  ECF0  F002         	call	_OSCILLATOR_Initialize	;wreg free
  1341                           
  1342                           ;mcc.c: 56: EUSART1_Initialize();
  1343  0005BC  EC91  F001         	call	_EUSART1_Initialize	;wreg free
  1344  0005C0  0012               	return		;funcret
  1345  0005C2                     __end_of_SYSTEM_Initialize:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           prodh	equ	0xFF4
  1352                           prodl	equ	0xFF3
  1353                           intcon	equ	0xFF2
  1354                           postinc0	equ	0xFEE
  1355                           wreg	equ	0xFE8
  1356                           postdec1	equ	0xFE5
  1357                           fsr1l	equ	0xFE1
  1358                           indf2	equ	0xFDF
  1359                           fsr2h	equ	0xFDA
  1360                           fsr2l	equ	0xFD9
  1361                           status	equ	0xFD8
  1362                           
  1363 ;; *************** function _PIN_MANAGER_Initialize *****************
  1364 ;; Defined at:
  1365 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;		None
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;Total ram usage:        0 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    4
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_SYSTEM_Initialize
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text7
  1394  0004E0                     __ptext7:
  1395                           	opt stack 0
  1396  0004E0                     _PIN_MANAGER_Initialize:
  1397                           	opt stack 25
  1398                           
  1399                           ;pin_manager.c: 60: LATE = 0x00;
  1400                           
  1401                           ;incstack = 0
  1402  0004E0  0E00               	movlw	0
  1403  0004E2  6E8D               	movwf	3981,c	;volatile
  1404                           
  1405                           ;pin_manager.c: 61: LATD = 0x00;
  1406  0004E4  0E00               	movlw	0
  1407  0004E6  6E8C               	movwf	3980,c	;volatile
  1408                           
  1409                           ;pin_manager.c: 62: LATA = 0x00;
  1410  0004E8  0E00               	movlw	0
  1411  0004EA  6E89               	movwf	3977,c	;volatile
  1412                           
  1413                           ;pin_manager.c: 63: LATB = 0x00;
  1414  0004EC  0E00               	movlw	0
  1415  0004EE  6E8A               	movwf	3978,c	;volatile
  1416                           
  1417                           ;pin_manager.c: 64: LATC = 0x00;
  1418  0004F0  0E00               	movlw	0
  1419  0004F2  6E8B               	movwf	3979,c	;volatile
  1420                           
  1421                           ;pin_manager.c: 69: TRISE = 0x07;
  1422  0004F4  0E07               	movlw	7
  1423  0004F6  6E96               	movwf	3990,c	;volatile
  1424                           
  1425                           ;pin_manager.c: 70: TRISA = 0x00;
  1426  0004F8  0E00               	movlw	0
  1427  0004FA  6E92               	movwf	3986,c	;volatile
  1428                           
  1429                           ;pin_manager.c: 71: TRISB = 0xFF;
  1430  0004FC  6893               	setf	3987,c	;volatile
  1431                           
  1432                           ;pin_manager.c: 72: TRISC = 0xB0;
  1433  0004FE  0EB0               	movlw	176
  1434  000500  6E94               	movwf	3988,c	;volatile
  1435                           
  1436                           ;pin_manager.c: 73: TRISD = 0x00;
  1437  000502  0E00               	movlw	0
  1438  000504  6E95               	movwf	3989,c	;volatile
  1439                           
  1440                           ;pin_manager.c: 78: ANSELD = 0xFF;
  1441  000506  010F               	movlb	15	; () banked
  1442  000508  693B               	setf	59,b	;volatile
  1443                           
  1444                           ;pin_manager.c: 79: ANSELC = 0x3C;
  1445  00050A  0E3C               	movlw	60
  1446  00050C  6F3A               	movwf	58,b	;volatile
  1447                           
  1448                           ;pin_manager.c: 80: ANSELB = 0x3F;
  1449  00050E  0E3F               	movlw	63
  1450  000510  6F39               	movwf	57,b	;volatile
  1451                           
  1452                           ;pin_manager.c: 81: ANSELE = 0x07;
  1453  000512  0E07               	movlw	7
  1454  000514  6F3C               	movwf	60,b	;volatile
  1455                           
  1456                           ;pin_manager.c: 82: ANSELA = 0x2F;
  1457  000516  0E2F               	movlw	47
  1458  000518  6F38               	movwf	56,b	;volatile
  1459                           
  1460                           ;pin_manager.c: 87: WPUB = 0x00;
  1461  00051A  0E00               	movlw	0
  1462  00051C  6E61               	movwf	3937,c	;volatile
  1463                           
  1464                           ; BSR set to: 15
  1465                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 1;
  1466  00051E  8EF1               	bsf	intcon2,7,c	;volatile
  1467                           
  1468                           ; BSR set to: 15
  1469  000520  0012               	return		;funcret
  1470  000522                     __end_of_PIN_MANAGER_Initialize:
  1471                           	opt stack 0
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           prodh	equ	0xFF4
  1477                           prodl	equ	0xFF3
  1478                           intcon	equ	0xFF2
  1479                           intcon2	equ	0xFF1
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postdec1	equ	0xFE5
  1483                           fsr1l	equ	0xFE1
  1484                           indf2	equ	0xFDF
  1485                           fsr2h	equ	0xFDA
  1486                           fsr2l	equ	0xFD9
  1487                           status	equ	0xFD8
  1488                           
  1489 ;; *************** function _OSCILLATOR_Initialize *****************
  1490 ;; Defined at:
  1491 ;;		line 59 in file "mcc_generated_files/mcc.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;		None
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;		None
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		wreg, status,2
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;Total ram usage:        0 bytes
  1510 ;; Hardware stack levels used:    1
  1511 ;; Hardware stack levels required when called:    4
  1512 ;; This function calls:
  1513 ;;		Nothing
  1514 ;; This function is called by:
  1515 ;;		_SYSTEM_Initialize
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text8
  1520  0005E0                     __ptext8:
  1521                           	opt stack 0
  1522  0005E0                     _OSCILLATOR_Initialize:
  1523                           	opt stack 25
  1524                           
  1525                           ;mcc.c: 62: OSCCON = 0x30;
  1526                           
  1527                           ; BSR set to: 15
  1528                           ;incstack = 0
  1529  0005E0  0E30               	movlw	48
  1530  0005E2  6ED3               	movwf	4051,c	;volatile
  1531                           
  1532                           ;mcc.c: 64: OSCCON2 = 0x04;
  1533  0005E4  0E04               	movlw	4
  1534  0005E6  6ED2               	movwf	4050,c	;volatile
  1535                           
  1536                           ;mcc.c: 66: OSCTUNE = 0x00;
  1537  0005E8  0E00               	movlw	0
  1538  0005EA  6E9B               	movwf	3995,c	;volatile
  1539  0005EC  0012               	return		;funcret
  1540  0005EE                     __end_of_OSCILLATOR_Initialize:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           prodh	equ	0xFF4
  1547                           prodl	equ	0xFF3
  1548                           intcon	equ	0xFF2
  1549                           intcon2	equ	0xFF1
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           fsr1l	equ	0xFE1
  1554                           indf2	equ	0xFDF
  1555                           fsr2h	equ	0xFDA
  1556                           fsr2l	equ	0xFD9
  1557                           status	equ	0xFD8
  1558                           
  1559 ;; *************** function _INTERRUPT_Initialize *****************
  1560 ;; Defined at:
  1561 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;		None
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;		None
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		None
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;Total ram usage:        0 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    4
  1582 ;; This function calls:
  1583 ;;		Nothing
  1584 ;; This function is called by:
  1585 ;;		_SYSTEM_Initialize
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text9
  1590  00062C                     __ptext9:
  1591                           	opt stack 0
  1592  00062C                     _INTERRUPT_Initialize:
  1593                           	opt stack 25
  1594                           
  1595                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  1596                           
  1597                           ;incstack = 0
  1598  00062C  9ED0               	bcf	4048,7,c	;volatile
  1599  00062E  0012               	return		;funcret
  1600  000630                     __end_of_INTERRUPT_Initialize:
  1601                           	opt stack 0
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           prodh	equ	0xFF4
  1607                           prodl	equ	0xFF3
  1608                           intcon	equ	0xFF2
  1609                           intcon2	equ	0xFF1
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1l	equ	0xFE1
  1614                           indf2	equ	0xFDF
  1615                           fsr2h	equ	0xFDA
  1616                           fsr2l	equ	0xFD9
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _EUSART1_Initialize *****************
  1620 ;; Defined at:
  1621 ;;		line 88 in file "mcc_generated_files/eusart1.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;		None
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;		None
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, status,0, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;Total ram usage:        0 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    5
  1642 ;; This function calls:
  1643 ;;		_EUSART1_SetErrorHandler
  1644 ;;		_EUSART1_SetFramingErrorHandler
  1645 ;;		_EUSART1_SetOverrunErrorHandler
  1646 ;;		_EUSART1_SetRxInterruptHandler
  1647 ;;		_EUSART1_SetTxInterruptHandler
  1648 ;; This function is called by:
  1649 ;;		_SYSTEM_Initialize
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text10
  1654  000322                     __ptext10:
  1655                           	opt stack 0
  1656  000322                     _EUSART1_Initialize:
  1657                           	opt stack 24
  1658                           
  1659                           ;eusart1.c: 91: PIE1bits.RC1IE = 0;
  1660                           
  1661                           ;incstack = 0
  1662  000322  9A9D               	bcf	3997,5,c	;volatile
  1663                           
  1664                           ;eusart1.c: 92: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  1665  000324  0E7E               	movlw	low _EUSART1_Receive_ISR
  1666  000326  0100               	movlb	0	; () banked
  1667  000328  6F80               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler& (0+255),b
  1668  00032A  0E02               	movlw	high _EUSART1_Receive_ISR
  1669  00032C  6F81               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  1670  00032E  ECFC  F002         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  1671                           
  1672                           ;eusart1.c: 93: PIE1bits.TX1IE = 0;
  1673  000332  989D               	bcf	3997,4,c	;volatile
  1674                           
  1675                           ;eusart1.c: 94: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  1676  000334  0E5E               	movlw	low _EUSART1_Transmit_ISR
  1677  000336  0100               	movlb	0	; () banked
  1678  000338  6F80               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler& (0+255),b
  1679  00033A  0E05               	movlw	high _EUSART1_Transmit_ISR
  1680  00033C  6F81               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  1681  00033E  ECF7  F002         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  1682                           
  1683                           ;eusart1.c: 98: BAUDCON1 = 0x08;
  1684  000342  0E08               	movlw	8
  1685  000344  6EB8               	movwf	4024,c	;volatile
  1686                           
  1687                           ;eusart1.c: 101: RCSTA1 = 0x90;
  1688  000346  0E90               	movlw	144
  1689  000348  6EAB               	movwf	4011,c	;volatile
  1690                           
  1691                           ;eusart1.c: 104: TXSTA1 = 0x24;
  1692  00034A  0E24               	movlw	36
  1693  00034C  6EAC               	movwf	4012,c	;volatile
  1694                           
  1695                           ;eusart1.c: 107: SPBRG1 = 0x19;
  1696  00034E  0E19               	movlw	25
  1697  000350  6EAF               	movwf	4015,c	;volatile
  1698                           
  1699                           ;eusart1.c: 110: SPBRGH1 = 0x00;
  1700  000352  0E00               	movlw	0
  1701  000354  6EB0               	movwf	4016,c	;volatile
  1702                           
  1703                           ;eusart1.c: 113: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
  1704  000356  0E30               	movlw	low _EUSART1_DefaultFramingErrorHandler
  1705  000358  0100               	movlb	0	; () banked
  1706  00035A  6F80               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler& (0+255),b
  1707  00035C  0E06               	movlw	high _EUSART1_DefaultFramingErrorHandler
  1708  00035E  6F81               	movwf	(EUSART1_SetFramingErrorHandler@interruptHandler+1)& (0+255),b
  1709  000360  EC06  F003         	call	_EUSART1_SetFramingErrorHandler	;wreg free
  1710                           
  1711                           ;eusart1.c: 114: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
  1712  000364  0E20               	movlw	low _EUSART1_DefaultOverrunErrorHandler
  1713  000366  0100               	movlb	0	; () banked
  1714  000368  6F80               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler& (0+255),b
  1715  00036A  0E06               	movlw	high _EUSART1_DefaultOverrunErrorHandler
  1716  00036C  6F81               	movwf	(EUSART1_SetOverrunErrorHandler@interruptHandler+1)& (0+255),b
  1717  00036E  EC01  F003         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
  1718                           
  1719                           ;eusart1.c: 115: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
  1720  000372  0E26               	movlw	low _EUSART1_DefaultErrorHandler
  1721  000374  0100               	movlb	0	; () banked
  1722  000376  6F80               	movwf	EUSART1_SetErrorHandler@interruptHandler& (0+255),b
  1723  000378  0E06               	movlw	high _EUSART1_DefaultErrorHandler
  1724  00037A  6F81               	movwf	(EUSART1_SetErrorHandler@interruptHandler+1)& (0+255),b
  1725  00037C  EC0B  F003         	call	_EUSART1_SetErrorHandler	;wreg free
  1726                           
  1727                           ;eusart1.c: 117: eusart1RxLastError.status = 0;
  1728  000380  0E00               	movlw	0
  1729  000382  6E34               	movwf	_eusart1RxLastError,c	;volatile
  1730                           
  1731                           ;eusart1.c: 120: eusart1TxHead = 0;
  1732  000384  0E00               	movlw	0
  1733  000386  6E39               	movwf	_eusart1TxHead,c	;volatile
  1734                           
  1735                           ;eusart1.c: 121: eusart1TxTail = 0;
  1736  000388  0E00               	movlw	0
  1737  00038A  6E38               	movwf	_eusart1TxTail,c	;volatile
  1738                           
  1739                           ;eusart1.c: 122: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1740  00038C  0E10               	movlw	16
  1741  00038E  6E56               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1742                           
  1743                           ;eusart1.c: 124: eusart1RxHead = 0;
  1744  000390  0E00               	movlw	0
  1745  000392  6E37               	movwf	_eusart1RxHead,c	;volatile
  1746                           
  1747                           ;eusart1.c: 125: eusart1RxTail = 0;
  1748  000394  0E00               	movlw	0
  1749  000396  6E36               	movwf	_eusart1RxTail,c	;volatile
  1750                           
  1751                           ;eusart1.c: 126: eusart1RxCount = 0;
  1752  000398  0E00               	movlw	0
  1753  00039A  6E35               	movwf	_eusart1RxCount,c	;volatile
  1754                           
  1755                           ;eusart1.c: 129: PIE1bits.RC1IE = 1;
  1756  00039C  8A9D               	bsf	3997,5,c	;volatile
  1757  00039E  0012               	return		;funcret
  1758  0003A0                     __end_of_EUSART1_Initialize:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           prodh	equ	0xFF4
  1765                           prodl	equ	0xFF3
  1766                           intcon	equ	0xFF2
  1767                           intcon2	equ	0xFF1
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           indf2	equ	0xFDF
  1773                           fsr2h	equ	0xFDA
  1774                           fsr2l	equ	0xFD9
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  1778 ;; Defined at:
  1779 ;;		line 276 in file "mcc_generated_files/eusart1.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  1782 ;;		 -> EUSART1_Transmit_ISR(1), 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1794 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;Total ram usage:        2 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    4
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_EUSART1_Initialize
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text11
  1809  0005EE                     __ptext11:
  1810                           	opt stack 0
  1811  0005EE                     _EUSART1_SetTxInterruptHandler:
  1812                           	opt stack 24
  1813                           
  1814                           ;eusart1.c: 277: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  1815                           
  1816                           ;incstack = 0
  1817  0005EE  C080  F054         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  1818  0005F2  C081  F055         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  1819  0005F6  0012               	return		;funcret
  1820  0005F8                     __end_of_EUSART1_SetTxInterruptHandler:
  1821                           	opt stack 0
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           intcon	equ	0xFF2
  1829                           intcon2	equ	0xFF1
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postdec1	equ	0xFE5
  1833                           fsr1l	equ	0xFE1
  1834                           indf2	equ	0xFDF
  1835                           fsr2h	equ	0xFDA
  1836                           fsr2l	equ	0xFD9
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  1840 ;; Defined at:
  1841 ;;		line 280 in file "mcc_generated_files/eusart1.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  1844 ;;		 -> EUSART1_Receive_ISR(1), 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  1    wreg      void 
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1856 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;Total ram usage:        2 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    4
  1863 ;; This function calls:
  1864 ;;		Nothing
  1865 ;; This function is called by:
  1866 ;;		_EUSART1_Initialize
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           	psect	text12
  1871  0005F8                     __ptext12:
  1872                           	opt stack 0
  1873  0005F8                     _EUSART1_SetRxInterruptHandler:
  1874                           	opt stack 24
  1875                           
  1876                           ;eusart1.c: 281: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  1877                           
  1878                           ;incstack = 0
  1879  0005F8  C080  F052         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  1880  0005FC  C081  F053         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  1881  000600  0012               	return		;funcret
  1882  000602                     __end_of_EUSART1_SetRxInterruptHandler:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           prodh	equ	0xFF4
  1889                           prodl	equ	0xFF3
  1890                           intcon	equ	0xFF2
  1891                           intcon2	equ	0xFF1
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           indf2	equ	0xFDF
  1897                           fsr2h	equ	0xFDA
  1898                           fsr2l	equ	0xFD9
  1899                           status	equ	0xFD8
  1900                           
  1901 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
  1902 ;; Defined at:
  1903 ;;		line 268 in file "mcc_generated_files/eusart1.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  1906 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, status,2, status,0
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1918 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;Total ram usage:        2 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    4
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_EUSART1_Initialize
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text13
  1933  000602                     __ptext13:
  1934                           	opt stack 0
  1935  000602                     _EUSART1_SetOverrunErrorHandler:
  1936                           	opt stack 24
  1937                           
  1938                           ;eusart1.c: 269: EUSART1_OverrunErrorHandler = interruptHandler;
  1939                           
  1940                           ;incstack = 0
  1941  000602  C080  F04E         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
  1942  000606  C081  F04F         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
  1943  00060A  0012               	return		;funcret
  1944  00060C                     __end_of_EUSART1_SetOverrunErrorHandler:
  1945                           	opt stack 0
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           intcon	equ	0xFF2
  1953                           intcon2	equ	0xFF1
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           indf2	equ	0xFDF
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
  1964 ;; Defined at:
  1965 ;;		line 264 in file "mcc_generated_files/eusart1.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  1968 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        2 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    4
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_EUSART1_Initialize
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text14
  1995  00060C                     __ptext14:
  1996                           	opt stack 0
  1997  00060C                     _EUSART1_SetFramingErrorHandler:
  1998                           	opt stack 24
  1999                           
  2000                           ;eusart1.c: 265: EUSART1_FramingErrorHandler = interruptHandler;
  2001                           
  2002                           ;incstack = 0
  2003  00060C  C080  F050         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
  2004  000610  C081  F051         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
  2005  000614  0012               	return		;funcret
  2006  000616                     __end_of_EUSART1_SetFramingErrorHandler:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           intcon	equ	0xFF2
  2015                           intcon2	equ	0xFF1
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           postdec1	equ	0xFE5
  2019                           fsr1l	equ	0xFE1
  2020                           indf2	equ	0xFDF
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _EUSART1_SetErrorHandler *****************
  2026 ;; Defined at:
  2027 ;;		line 272 in file "mcc_generated_files/eusart1.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  2030 ;;		 -> EUSART1_DefaultErrorHandler(1), 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2042 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;Total ram usage:        2 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    4
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_EUSART1_Initialize
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text15
  2057  000616                     __ptext15:
  2058                           	opt stack 0
  2059  000616                     _EUSART1_SetErrorHandler:
  2060                           	opt stack 24
  2061                           
  2062                           ;eusart1.c: 273: EUSART1_ErrorHandler = interruptHandler;
  2063                           
  2064                           ;incstack = 0
  2065  000616  C080  F04C         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
  2066  00061A  C081  F04D         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
  2067  00061E  0012               	return		;funcret
  2068  000620                     __end_of_EUSART1_SetErrorHandler:
  2069                           	opt stack 0
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           tblptrl	equ	0xFF6
  2073                           tablat	equ	0xFF5
  2074                           prodh	equ	0xFF4
  2075                           prodl	equ	0xFF3
  2076                           intcon	equ	0xFF2
  2077                           intcon2	equ	0xFF1
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           postdec1	equ	0xFE5
  2081                           fsr1l	equ	0xFE1
  2082                           indf2	equ	0xFDF
  2083                           fsr2h	equ	0xFDA
  2084                           fsr2l	equ	0xFD9
  2085                           status	equ	0xFD8
  2086                           
  2087 ;; *************** function _EUSART1_Write *****************
  2088 ;; Defined at:
  2089 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  txData          1    wreg     unsigned char 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  txData          1    0[BANK0 ] unsigned char 
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;Total ram usage:        1 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    4
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text16
  2118  000522                     __ptext16:
  2119                           	opt stack 0
  2120  000522                     _EUSART1_Write:
  2121                           	opt stack 26
  2122                           
  2123                           ;incstack = 0
  2124                           ;EUSART1_Write@txData stored from wreg
  2125  000522  0100               	movlb	0	; () banked
  2126  000524  6F80               	movwf	EUSART1_Write@txData& (0+255),b
  2127  000526                     
  2128                           ;eusart1.c: 176: {
  2129                           
  2130                           ;eusart1.c: 175: while(0 == eusart1TxBufferRemaining)
  2131  000526  5056               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  2132  000528  B4D8               	btfsc	status,2,c
  2133  00052A  D7FD               	goto	l1583
  2134                           
  2135                           ;eusart1.c: 177: }
  2136                           ;eusart1.c: 179: if(0 == PIE1bits.TX1IE)
  2137  00052C  B89D               	btfsc	3997,4,c	;volatile
  2138  00052E  D003               	goto	l100
  2139                           
  2140                           ;eusart1.c: 180: {
  2141                           ;eusart1.c: 181: TXREG1 = txData;
  2142  000530  C080  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2143                           
  2144                           ;eusart1.c: 182: }
  2145  000534  D012               	goto	l101
  2146  000536                     l100:
  2147                           
  2148                           ;eusart1.c: 183: else
  2149                           ;eusart1.c: 184: {
  2150                           ;eusart1.c: 185: PIE1bits.TX1IE = 0;
  2151  000536  989D               	bcf	3997,4,c	;volatile
  2152                           
  2153                           ;eusart1.c: 186: eusart1TxBuffer[eusart1TxHead++] = txData;
  2154  000538  5039               	movf	_eusart1TxHead,w,c	;volatile
  2155  00053A  0D01               	mullw	1
  2156  00053C  0E11               	movlw	low _eusart1TxBuffer
  2157  00053E  24F3               	addwf	prodl,w,c
  2158  000540  6ED9               	movwf	fsr2l,c
  2159  000542  0E00               	movlw	high _eusart1TxBuffer
  2160  000544  20F4               	addwfc	prodh,w,c
  2161  000546  6EDA               	movwf	fsr2h,c
  2162  000548  C080  FFDF         	movff	EUSART1_Write@txData,indf2
  2163  00054C  2A39               	incf	_eusart1TxHead,f,c	;volatile
  2164                           
  2165                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  2166  00054E  0E0F               	movlw	15
  2167  000550  6439               	cpfsgt	_eusart1TxHead,c	;volatile
  2168  000552  D002               	goto	l102
  2169                           
  2170                           ;eusart1.c: 188: {
  2171                           ;eusart1.c: 189: eusart1TxHead = 0;
  2172  000554  0E00               	movlw	0
  2173  000556  6E39               	movwf	_eusart1TxHead,c	;volatile
  2174  000558                     l102:
  2175                           
  2176                           ;eusart1.c: 190: }
  2177                           ;eusart1.c: 191: eusart1TxBufferRemaining--;
  2178  000558  0656               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  2179  00055A                     l101:
  2180                           
  2181                           ;eusart1.c: 192: }
  2182                           ;eusart1.c: 193: PIE1bits.TX1IE = 1;
  2183  00055A  889D               	bsf	3997,4,c	;volatile
  2184  00055C  0012               	return		;funcret
  2185  00055E                     __end_of_EUSART1_Write:
  2186                           	opt stack 0
  2187                           tblptru	equ	0xFF8
  2188                           tblptrh	equ	0xFF7
  2189                           tblptrl	equ	0xFF6
  2190                           tablat	equ	0xFF5
  2191                           prodh	equ	0xFF4
  2192                           prodl	equ	0xFF3
  2193                           intcon	equ	0xFF2
  2194                           intcon2	equ	0xFF1
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           postdec1	equ	0xFE5
  2198                           fsr1l	equ	0xFE1
  2199                           indf2	equ	0xFDF
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _INTERRUPT_InterruptManager *****************
  2205 ;; Defined at:
  2206 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:       18 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    3
  2227 ;; This function calls:
  2228 ;;		Absolute function
  2229 ;;		_EUSART1_Receive_ISR
  2230 ;;		_EUSART1_Transmit_ISR
  2231 ;; This function is called by:
  2232 ;;		Interrupt level 2
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	intcode
  2237  000008                     __pintcode:
  2238                           	opt stack 0
  2239  000008                     _INTERRUPT_InterruptManager:
  2240                           	opt stack 24
  2241                           
  2242                           ;incstack = 0
  2243  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2244  00000A  CFFA F03A          	movff	pclath,??_INTERRUPT_InterruptManager
  2245  00000E  CFFB F03B          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2246  000012  CFE9 F03C          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2247  000016  CFEA F03D          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2248  00001A  CFE1 F03E          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2249  00001E  CFE2 F03F          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2250  000022  CFD9 F040          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2251  000026  CFDA F041          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2252  00002A  CFF3 F042          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2253  00002E  CFF4 F043          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2254  000032  CFF6 F044          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2255  000036  CFF7 F045          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2256  00003A  CFF8 F046          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2257  00003E  CFF5 F047          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2258  000042  C057  F048         	movff	btemp,??_INTERRUPT_InterruptManager+14
  2259  000046  C058  F049         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  2260  00004A  C059  F04A         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  2261  00004E  C05A  F04B         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  2262                           
  2263                           ;interrupt_manager.c: 61: if(INTCONbits.PEIE == 1)
  2264  000052  ACF2               	btfss	intcon,6,c	;volatile
  2265  000054  D01A               	goto	i2u64_49
  2266                           
  2267                           ;interrupt_manager.c: 62: {
  2268                           ;interrupt_manager.c: 63: if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  2269  000056  B89D               	btfsc	3997,4,c	;volatile
  2270  000058  A89E               	btfss	3998,4,c	;volatile
  2271  00005A  D008               	goto	i2l165
  2272                           
  2273                           ;interrupt_manager.c: 64: {
  2274                           ;interrupt_manager.c: 65: EUSART1_TxDefaultInterruptHandler();
  2275  00005C  D801               	call	i2u61_48
  2276  00005E  D015               	goto	i2u64_49
  2277  000060                     i2u61_48:
  2278  000060  0005               	push	
  2279  000062  6EFA               	movwf	pclath,c
  2280  000064  5054               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  2281  000066  6EFD               	movwf	tosl,c
  2282  000068  5055               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  2283  00006A  D00A               	goto	L1
  2284  00006C                     i2l165:
  2285                           
  2286                           ;interrupt_manager.c: 67: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  2287  00006C  BA9D               	btfsc	3997,5,c	;volatile
  2288  00006E  AA9E               	btfss	3998,5,c	;volatile
  2289  000070  D00C               	goto	i2u64_49
  2290                           
  2291                           ;interrupt_manager.c: 68: {
  2292                           ;interrupt_manager.c: 69: EUSART1_RxDefaultInterruptHandler();
  2293  000072  D801               	call	i2u64_48
  2294  000074  D00A               	goto	i2u64_49
  2295  000076                     i2u64_48:
  2296  000076  0005               	push	
  2297  000078  6EFA               	movwf	pclath,c
  2298  00007A  5052               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  2299  00007C  6EFD               	movwf	tosl,c
  2300  00007E  5053               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  2301  000080                     L1:
  2302  000080  6EFE               	movwf	tosh,c
  2303  000082  50F8               	movf	tblptru,w,c
  2304  000084  6EFF               	movwf	tosu,c
  2305  000086  50FA               	movf	pclath,w,c
  2306  000088  0012               	return		;indir
  2307  00008A                     i2u64_49:
  2308                           
  2309                           ;interrupt_manager.c: 76: else
  2310                           ;interrupt_manager.c: 77: {
  2311                           
  2312                           ;interrupt_manager.c: 74: }
  2313                           ;interrupt_manager.c: 75: }
  2314                           
  2315                           ;interrupt_manager.c: 71: else
  2316                           ;interrupt_manager.c: 72: {
  2317                           
  2318                           ;interrupt_manager.c: 70: }
  2319  00008A  C04B  F05A         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  2320  00008E  C04A  F059         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  2321  000092  C049  F058         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  2322  000096  C048  F057         	movff	??_INTERRUPT_InterruptManager+14,btemp
  2323  00009A  C047  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2324  00009E  C046  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2325  0000A2  C045  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2326  0000A6  C044  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2327  0000AA  C043  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2328  0000AE  C042  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2329  0000B2  C041  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2330  0000B6  C040  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2331  0000BA  C03F  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2332  0000BE  C03E  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2333  0000C2  C03D  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2334  0000C6  C03C  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2335  0000CA  C03B  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2336  0000CE  C03A  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2337  0000D2  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2338  0000D4  0011               	retfie		f
  2339  0000D6                     __end_of_INTERRUPT_InterruptManager:
  2340                           	opt stack 0
  2341                           tosu	equ	0xFFF
  2342                           tosh	equ	0xFFE
  2343                           tosl	equ	0xFFD
  2344                           pclatu	equ	0xFFB
  2345                           pclath	equ	0xFFA
  2346                           tblptru	equ	0xFF8
  2347                           tblptrh	equ	0xFF7
  2348                           tblptrl	equ	0xFF6
  2349                           tablat	equ	0xFF5
  2350                           prodh	equ	0xFF4
  2351                           prodl	equ	0xFF3
  2352                           intcon	equ	0xFF2
  2353                           intcon2	equ	0xFF1
  2354                           postinc0	equ	0xFEE
  2355                           fsr0h	equ	0xFEA
  2356                           fsr0l	equ	0xFE9
  2357                           wreg	equ	0xFE8
  2358                           postdec1	equ	0xFE5
  2359                           fsr1h	equ	0xFE2
  2360                           fsr1l	equ	0xFE1
  2361                           indf2	equ	0xFDF
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _EUSART1_Transmit_ISR *****************
  2367 ;; Defined at:
  2368 ;;		line 197 in file "mcc_generated_files/eusart1.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;Total ram usage:        0 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_EUSART1_Initialize
  2392 ;;		_INTERRUPT_InterruptManager
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text18
  2397  00055E                     __ptext18:
  2398                           	opt stack 0
  2399  00055E                     _EUSART1_Transmit_ISR:
  2400                           	opt stack 26
  2401                           
  2402                           ;eusart1.c: 201: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  2403                           
  2404                           ;incstack = 0
  2405  00055E  0E10               	movlw	16
  2406  000560  6056               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  2407  000562  D012               	goto	i2l106
  2408                           
  2409                           ;eusart1.c: 202: {
  2410                           ;eusart1.c: 203: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  2411  000564  5038               	movf	_eusart1TxTail,w,c	;volatile
  2412  000566  0D01               	mullw	1
  2413  000568  0E11               	movlw	low _eusart1TxBuffer
  2414  00056A  24F3               	addwf	prodl,w,c
  2415  00056C  6ED9               	movwf	fsr2l,c
  2416  00056E  0E00               	movlw	high _eusart1TxBuffer
  2417  000570  20F4               	addwfc	prodh,w,c
  2418  000572  6EDA               	movwf	fsr2h,c
  2419  000574  50DF               	movf	indf2,w,c
  2420  000576  6EAD               	movwf	4013,c	;volatile
  2421  000578  2A38               	incf	_eusart1TxTail,f,c	;volatile
  2422                           
  2423                           ;eusart1.c: 204: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  2424  00057A  0E0F               	movlw	15
  2425  00057C  6438               	cpfsgt	_eusart1TxTail,c	;volatile
  2426  00057E  D002               	goto	i2l107
  2427                           
  2428                           ;eusart1.c: 205: {
  2429                           ;eusart1.c: 206: eusart1TxTail = 0;
  2430  000580  0E00               	movlw	0
  2431  000582  6E38               	movwf	_eusart1TxTail,c	;volatile
  2432  000584                     i2l107:
  2433                           
  2434                           ;eusart1.c: 207: }
  2435                           ;eusart1.c: 208: eusart1TxBufferRemaining++;
  2436  000584  2A56               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  2437                           
  2438                           ;eusart1.c: 209: }
  2439  000586  0012               	return	
  2440  000588                     i2l106:
  2441                           
  2442                           ;eusart1.c: 210: else
  2443                           ;eusart1.c: 211: {
  2444                           ;eusart1.c: 212: PIE1bits.TX1IE = 0;
  2445  000588  989D               	bcf	3997,4,c	;volatile
  2446  00058A  0012               	return	
  2447  00058C                     __end_of_EUSART1_Transmit_ISR:
  2448                           	opt stack 0
  2449                           tosu	equ	0xFFF
  2450                           tosh	equ	0xFFE
  2451                           tosl	equ	0xFFD
  2452                           pclatu	equ	0xFFB
  2453                           pclath	equ	0xFFA
  2454                           tblptru	equ	0xFF8
  2455                           tblptrh	equ	0xFF7
  2456                           tblptrl	equ	0xFF6
  2457                           tablat	equ	0xFF5
  2458                           prodh	equ	0xFF4
  2459                           prodl	equ	0xFF3
  2460                           intcon	equ	0xFF2
  2461                           intcon2	equ	0xFF1
  2462                           postinc0	equ	0xFEE
  2463                           fsr0h	equ	0xFEA
  2464                           fsr0l	equ	0xFE9
  2465                           wreg	equ	0xFE8
  2466                           postdec1	equ	0xFE5
  2467                           fsr1h	equ	0xFE2
  2468                           fsr1l	equ	0xFE1
  2469                           indf2	equ	0xFDF
  2470                           fsr2h	equ	0xFDA
  2471                           fsr2l	equ	0xFD9
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _EUSART1_Receive_ISR *****************
  2475 ;; Defined at:
  2476 ;;		line 216 in file "mcc_generated_files/eusart1.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;Total ram usage:        0 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    2
  2497 ;; This function calls:
  2498 ;;		Absolute function
  2499 ;;		_EUSART1_DefaultErrorHandler
  2500 ;;		_EUSART1_DefaultFramingErrorHandler
  2501 ;;		_EUSART1_DefaultOverrunErrorHandler
  2502 ;;		_EUSART1_RxDataHandler
  2503 ;; This function is called by:
  2504 ;;		_EUSART1_Initialize
  2505 ;;		_INTERRUPT_InterruptManager
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text19
  2510  00027E                     __ptext19:
  2511                           	opt stack 0
  2512  00027E                     _EUSART1_Receive_ISR:
  2513                           	opt stack 24
  2514                           
  2515                           ;eusart1.c: 219: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
  2516                           
  2517                           ;incstack = 0
  2518  00027E  5037               	movf	_eusart1RxHead,w,c	;volatile
  2519  000280  0D01               	mullw	1
  2520  000282  0E01               	movlw	low _eusart1RxStatusBuffer
  2521  000284  24F3               	addwf	prodl,w,c
  2522  000286  6ED9               	movwf	fsr2l,c
  2523  000288  0E00               	movlw	high _eusart1RxStatusBuffer
  2524  00028A  20F4               	addwfc	prodh,w,c
  2525  00028C  6EDA               	movwf	fsr2h,c
  2526  00028E  0E00               	movlw	0
  2527  000290  6EDF               	movwf	indf2,c
  2528                           
  2529                           ;eusart1.c: 221: if(RCSTA1bits.FERR){
  2530  000292  A4AB               	btfss	4011,2,c	;volatile
  2531  000294  D015               	goto	i2u43_49
  2532                           
  2533                           ;eusart1.c: 222: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
  2534  000296  5037               	movf	_eusart1RxHead,w,c	;volatile
  2535  000298  0D01               	mullw	1
  2536  00029A  0E01               	movlw	low _eusart1RxStatusBuffer
  2537  00029C  24F3               	addwf	prodl,w,c
  2538  00029E  6ED9               	movwf	fsr2l,c
  2539  0002A0  0E00               	movlw	high _eusart1RxStatusBuffer
  2540  0002A2  20F4               	addwfc	prodh,w,c
  2541  0002A4  6EDA               	movwf	fsr2h,c
  2542  0002A6  82DF               	bsf	indf2,1,c
  2543                           
  2544                           ;eusart1.c: 223: EUSART1_FramingErrorHandler();
  2545  0002A8  D801               	call	i2u43_48
  2546  0002AA  D00A               	goto	i2u43_49
  2547  0002AC                     i2u43_48:
  2548  0002AC  0005               	push	
  2549  0002AE  6EFA               	movwf	pclath,c
  2550  0002B0  5050               	movf	_EUSART1_FramingErrorHandler,w,c
  2551  0002B2  6EFD               	movwf	tosl,c
  2552  0002B4  5051               	movf	_EUSART1_FramingErrorHandler+1,w,c
  2553  0002B6  6EFE               	movwf	tosh,c
  2554  0002B8  50F8               	movf	tblptru,w,c
  2555  0002BA  6EFF               	movwf	tosu,c
  2556  0002BC  50FA               	movf	pclath,w,c
  2557  0002BE  0012               	return		;indir
  2558  0002C0                     i2u43_49:
  2559                           
  2560                           ;eusart1.c: 224: }
  2561                           ;eusart1.c: 226: if(RCSTA1bits.OERR){
  2562  0002C0  A2AB               	btfss	4011,1,c	;volatile
  2563  0002C2  D015               	goto	i2u45_49
  2564                           
  2565                           ;eusart1.c: 227: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
  2566  0002C4  5037               	movf	_eusart1RxHead,w,c	;volatile
  2567  0002C6  0D01               	mullw	1
  2568  0002C8  0E01               	movlw	low _eusart1RxStatusBuffer
  2569  0002CA  24F3               	addwf	prodl,w,c
  2570  0002CC  6ED9               	movwf	fsr2l,c
  2571  0002CE  0E00               	movlw	high _eusart1RxStatusBuffer
  2572  0002D0  20F4               	addwfc	prodh,w,c
  2573  0002D2  6EDA               	movwf	fsr2h,c
  2574  0002D4  84DF               	bsf	indf2,2,c
  2575                           
  2576                           ;eusart1.c: 228: EUSART1_OverrunErrorHandler();
  2577  0002D6  D801               	call	i2u45_48
  2578  0002D8  D00A               	goto	i2u45_49
  2579  0002DA                     i2u45_48:
  2580  0002DA  0005               	push	
  2581  0002DC  6EFA               	movwf	pclath,c
  2582  0002DE  504E               	movf	_EUSART1_OverrunErrorHandler,w,c
  2583  0002E0  6EFD               	movwf	tosl,c
  2584  0002E2  504F               	movf	_EUSART1_OverrunErrorHandler+1,w,c
  2585  0002E4  6EFE               	movwf	tosh,c
  2586  0002E6  50F8               	movf	tblptru,w,c
  2587  0002E8  6EFF               	movwf	tosu,c
  2588  0002EA  50FA               	movf	pclath,w,c
  2589  0002EC  0012               	return		;indir
  2590  0002EE                     i2u45_49:
  2591                           
  2592                           ;eusart1.c: 229: }
  2593                           ;eusart1.c: 231: if(eusart1RxStatusBuffer[eusart1RxHead].status){
  2594  0002EE  5037               	movf	_eusart1RxHead,w,c	;volatile
  2595  0002F0  0D01               	mullw	1
  2596  0002F2  0E01               	movlw	low _eusart1RxStatusBuffer
  2597  0002F4  24F3               	addwf	prodl,w,c
  2598  0002F6  6ED9               	movwf	fsr2l,c
  2599  0002F8  0E00               	movlw	high _eusart1RxStatusBuffer
  2600  0002FA  20F4               	addwfc	prodh,w,c
  2601  0002FC  6EDA               	movwf	fsr2h,c
  2602  0002FE  50DF               	movf	indf2,w,c
  2603  000300  B4D8               	btfsc	status,2,c
  2604  000302  D00C               	goto	i2l114
  2605                           
  2606                           ;eusart1.c: 232: EUSART1_ErrorHandler();
  2607  000304  D801               	call	i2u47_48
  2608  000306  0012               	return	
  2609  000308                     i2u47_48:
  2610  000308  0005               	push	
  2611  00030A  6EFA               	movwf	pclath,c
  2612  00030C  504C               	movf	_EUSART1_ErrorHandler,w,c
  2613  00030E  6EFD               	movwf	tosl,c
  2614  000310  504D               	movf	_EUSART1_ErrorHandler+1,w,c
  2615  000312  6EFE               	movwf	tosh,c
  2616  000314  50F8               	movf	tblptru,w,c
  2617  000316  6EFF               	movwf	tosu,c
  2618  000318  50FA               	movf	pclath,w,c
  2619  00031A  0012               	return		;indir
  2620  00031C                     i2l114:
  2621                           
  2622                           ;eusart1.c: 234: EUSART1_RxDataHandler();
  2623  00031C  ECC6  F002         	call	_EUSART1_RxDataHandler	;wreg free
  2624  000320  0012               	return	
  2625  000322                     __end_of_EUSART1_Receive_ISR:
  2626                           	opt stack 0
  2627                           tosu	equ	0xFFF
  2628                           tosh	equ	0xFFE
  2629                           tosl	equ	0xFFD
  2630                           pclatu	equ	0xFFB
  2631                           pclath	equ	0xFFA
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           prodh	equ	0xFF4
  2637                           prodl	equ	0xFF3
  2638                           intcon	equ	0xFF2
  2639                           intcon2	equ	0xFF1
  2640                           postinc0	equ	0xFEE
  2641                           fsr0h	equ	0xFEA
  2642                           fsr0l	equ	0xFE9
  2643                           wreg	equ	0xFE8
  2644                           postdec1	equ	0xFE5
  2645                           fsr1h	equ	0xFE2
  2646                           fsr1l	equ	0xFE1
  2647                           indf2	equ	0xFDF
  2648                           fsr2h	equ	0xFDA
  2649                           fsr2l	equ	0xFD9
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
  2653 ;; Defined at:
  2654 ;;		line 252 in file "mcc_generated_files/eusart1.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		None
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_EUSART1_Initialize
  2678 ;;		_EUSART1_Receive_ISR
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text20
  2683  000620                     __ptext20:
  2684                           	opt stack 0
  2685  000620                     _EUSART1_DefaultOverrunErrorHandler:
  2686                           	opt stack 25
  2687                           
  2688                           ;eusart1.c: 255: RCSTA1bits.CREN = 0;
  2689                           
  2690                           ;incstack = 0
  2691  000620  98AB               	bcf	4011,4,c	;volatile
  2692                           
  2693                           ;eusart1.c: 256: RCSTA1bits.CREN = 1;
  2694  000622  88AB               	bsf	4011,4,c	;volatile
  2695  000624  0012               	return		;funcret
  2696  000626                     __end_of_EUSART1_DefaultOverrunErrorHandler:
  2697                           	opt stack 0
  2698                           tosu	equ	0xFFF
  2699                           tosh	equ	0xFFE
  2700                           tosl	equ	0xFFD
  2701                           pclatu	equ	0xFFB
  2702                           pclath	equ	0xFFA
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           prodh	equ	0xFF4
  2708                           prodl	equ	0xFF3
  2709                           intcon	equ	0xFF2
  2710                           intcon2	equ	0xFF1
  2711                           postinc0	equ	0xFEE
  2712                           fsr0h	equ	0xFEA
  2713                           fsr0l	equ	0xFE9
  2714                           wreg	equ	0xFE8
  2715                           postdec1	equ	0xFE5
  2716                           fsr1h	equ	0xFE2
  2717                           fsr1l	equ	0xFE1
  2718                           indf2	equ	0xFDF
  2719                           fsr2h	equ	0xFDA
  2720                           fsr2l	equ	0xFD9
  2721                           status	equ	0xFD8
  2722                           
  2723 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
  2724 ;; Defined at:
  2725 ;;		line 250 in file "mcc_generated_files/eusart1.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;		None
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		None
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;Total ram usage:        0 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_EUSART1_Initialize
  2749 ;;		_EUSART1_Receive_ISR
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text21
  2754  000630                     __ptext21:
  2755                           	opt stack 0
  2756  000630                     _EUSART1_DefaultFramingErrorHandler:
  2757                           	opt stack 25
  2758                           
  2759                           ;incstack = 0
  2760  000630  0012               	return		;funcret
  2761  000632                     __end_of_EUSART1_DefaultFramingErrorHandler:
  2762                           	opt stack 0
  2763                           tosu	equ	0xFFF
  2764                           tosh	equ	0xFFE
  2765                           tosl	equ	0xFFD
  2766                           pclatu	equ	0xFFB
  2767                           pclath	equ	0xFFA
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           intcon2	equ	0xFF1
  2776                           postinc0	equ	0xFEE
  2777                           fsr0h	equ	0xFEA
  2778                           fsr0l	equ	0xFE9
  2779                           wreg	equ	0xFE8
  2780                           postdec1	equ	0xFE5
  2781                           fsr1h	equ	0xFE2
  2782                           fsr1l	equ	0xFE1
  2783                           indf2	equ	0xFDF
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _EUSART1_DefaultErrorHandler *****************
  2789 ;; Defined at:
  2790 ;;		line 260 in file "mcc_generated_files/eusart1.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;		None
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;		None
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;Total ram usage:        0 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    1
  2811 ;; This function calls:
  2812 ;;		_EUSART1_RxDataHandler
  2813 ;; This function is called by:
  2814 ;;		_EUSART1_Initialize
  2815 ;;		_EUSART1_Receive_ISR
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text22
  2820  000626                     __ptext22:
  2821                           	opt stack 0
  2822  000626                     _EUSART1_DefaultErrorHandler:
  2823                           	opt stack 24
  2824                           
  2825                           ;eusart1.c: 261: EUSART1_RxDataHandler();
  2826                           
  2827                           ;incstack = 0
  2828  000626  ECC6  F002         	call	_EUSART1_RxDataHandler	;wreg free
  2829  00062A  0012               	return		;funcret
  2830  00062C                     __end_of_EUSART1_DefaultErrorHandler:
  2831                           	opt stack 0
  2832                           tosu	equ	0xFFF
  2833                           tosh	equ	0xFFE
  2834                           tosl	equ	0xFFD
  2835                           pclatu	equ	0xFFB
  2836                           pclath	equ	0xFFA
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           intcon2	equ	0xFF1
  2845                           postinc0	equ	0xFEE
  2846                           fsr0h	equ	0xFEA
  2847                           fsr0l	equ	0xFE9
  2848                           wreg	equ	0xFE8
  2849                           postdec1	equ	0xFE5
  2850                           fsr1h	equ	0xFE2
  2851                           fsr1l	equ	0xFE1
  2852                           indf2	equ	0xFDF
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _EUSART1_RxDataHandler *****************
  2858 ;; Defined at:
  2859 ;;		line 240 in file "mcc_generated_files/eusart1.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_EUSART1_Receive_ISR
  2883 ;;		_EUSART1_DefaultErrorHandler
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text23
  2888  00058C                     __ptext23:
  2889                           	opt stack 0
  2890  00058C                     _EUSART1_RxDataHandler:
  2891                           	opt stack 25
  2892                           
  2893                           ;eusart1.c: 242: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  2894                           
  2895                           ;incstack = 0
  2896  00058C  5037               	movf	_eusart1RxHead,w,c	;volatile
  2897  00058E  0D01               	mullw	1
  2898  000590  0E60               	movlw	low _eusart1RxBuffer
  2899  000592  24F3               	addwf	prodl,w,c
  2900  000594  6ED9               	movwf	fsr2l,c
  2901  000596  0E00               	movlw	high _eusart1RxBuffer
  2902  000598  20F4               	addwfc	prodh,w,c
  2903  00059A  6EDA               	movwf	fsr2h,c
  2904  00059C  CFAE FFDF          	movff	4014,indf2	;volatile
  2905  0005A0  2A37               	incf	_eusart1RxHead,f,c	;volatile
  2906                           
  2907                           ;eusart1.c: 243: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  2908  0005A2  0E0F               	movlw	15
  2909  0005A4  6437               	cpfsgt	_eusart1RxHead,c	;volatile
  2910  0005A6  D002               	goto	i2l119
  2911                           
  2912                           ;eusart1.c: 244: {
  2913                           ;eusart1.c: 245: eusart1RxHead = 0;
  2914  0005A8  0E00               	movlw	0
  2915  0005AA  6E37               	movwf	_eusart1RxHead,c	;volatile
  2916  0005AC                     i2l119:
  2917                           
  2918                           ;eusart1.c: 246: }
  2919                           ;eusart1.c: 247: eusart1RxCount++;
  2920  0005AC  2A35               	incf	_eusart1RxCount,f,c	;volatile
  2921  0005AE  0012               	return		;funcret
  2922  0005B0                     __end_of_EUSART1_RxDataHandler:
  2923                           	opt stack 0
  2924  0000                     tosu	equ	0xFFF
  2925                           tosh	equ	0xFFE
  2926                           tosl	equ	0xFFD
  2927                           pclatu	equ	0xFFB
  2928                           pclath	equ	0xFFA
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon	equ	0xFF2
  2936                           intcon2	equ	0xFF1
  2937                           postinc0	equ	0xFEE
  2938                           fsr0h	equ	0xFEA
  2939                           fsr0l	equ	0xFE9
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           fsr1h	equ	0xFE2
  2943                           fsr1l	equ	0xFE1
  2944                           indf2	equ	0xFDF
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           tosu	equ	0xFFF
  2949                           tosh	equ	0xFFE
  2950                           tosl	equ	0xFFD
  2951                           pclatu	equ	0xFFB
  2952                           pclath	equ	0xFFA
  2953                           tblptru	equ	0xFF8
  2954                           tblptrh	equ	0xFF7
  2955                           tblptrl	equ	0xFF6
  2956                           tablat	equ	0xFF5
  2957                           prodh	equ	0xFF4
  2958                           prodl	equ	0xFF3
  2959                           intcon	equ	0xFF2
  2960                           intcon2	equ	0xFF1
  2961                           postinc0	equ	0xFEE
  2962                           fsr0h	equ	0xFEA
  2963                           fsr0l	equ	0xFE9
  2964                           wreg	equ	0xFE8
  2965                           postdec1	equ	0xFE5
  2966                           fsr1h	equ	0xFE2
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           fsr2h	equ	0xFDA
  2970                           fsr2l	equ	0xFD9
  2971                           status	equ	0xFD8
  2972                           
  2973                           	psect	text24
  2974  000000                     __ptext24:
  2975                           	opt stack 0
  2976                           tosu	equ	0xFFF
  2977                           tosh	equ	0xFFE
  2978                           tosl	equ	0xFFD
  2979                           pclatu	equ	0xFFB
  2980                           pclath	equ	0xFFA
  2981                           tblptru	equ	0xFF8
  2982                           tblptrh	equ	0xFF7
  2983                           tblptrl	equ	0xFF6
  2984                           tablat	equ	0xFF5
  2985                           prodh	equ	0xFF4
  2986                           prodl	equ	0xFF3
  2987                           intcon	equ	0xFF2
  2988                           intcon2	equ	0xFF1
  2989                           postinc0	equ	0xFEE
  2990                           fsr0h	equ	0xFEA
  2991                           fsr0l	equ	0xFE9
  2992                           wreg	equ	0xFE8
  2993                           postdec1	equ	0xFE5
  2994                           fsr1h	equ	0xFE2
  2995                           fsr1l	equ	0xFE1
  2996                           indf2	equ	0xFDF
  2997                           fsr2h	equ	0xFDA
  2998                           fsr2l	equ	0xFD9
  2999                           status	equ	0xFD8
  3000                           
  3001                           	psect	rparam
  3002  0000                     tosu	equ	0xFFF
  3003                           tosh	equ	0xFFE
  3004                           tosl	equ	0xFFD
  3005                           pclatu	equ	0xFFB
  3006                           pclath	equ	0xFFA
  3007                           tblptru	equ	0xFF8
  3008                           tblptrh	equ	0xFF7
  3009                           tblptrl	equ	0xFF6
  3010                           tablat	equ	0xFF5
  3011                           prodh	equ	0xFF4
  3012                           prodl	equ	0xFF3
  3013                           intcon	equ	0xFF2
  3014                           intcon2	equ	0xFF1
  3015                           postinc0	equ	0xFEE
  3016                           fsr0h	equ	0xFEA
  3017                           fsr0l	equ	0xFE9
  3018                           wreg	equ	0xFE8
  3019                           postdec1	equ	0xFE5
  3020                           fsr1h	equ	0xFE2
  3021                           fsr1l	equ	0xFE1
  3022                           indf2	equ	0xFDF
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027                           	psect	temp
  3028  000057                     btemp:
  3029                           	opt stack 0
  3030  000057                     	ds	1
  3031  0000                     int$flags	set	btemp
  3032  0000                     wtemp6	set	btemp+1
  3033                           tosu	equ	0xFFF
  3034                           tosh	equ	0xFFE
  3035                           tosl	equ	0xFFD
  3036                           pclatu	equ	0xFFB
  3037                           pclath	equ	0xFFA
  3038                           tblptru	equ	0xFF8
  3039                           tblptrh	equ	0xFF7
  3040                           tblptrl	equ	0xFF6
  3041                           tablat	equ	0xFF5
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           intcon	equ	0xFF2
  3045                           intcon2	equ	0xFF1
  3046                           postinc0	equ	0xFEE
  3047                           fsr0h	equ	0xFEA
  3048                           fsr0l	equ	0xFE9
  3049                           wreg	equ	0xFE8
  3050                           postdec1	equ	0xFE5
  3051                           fsr1h	equ	0xFE2
  3052                           fsr1l	equ	0xFE1
  3053                           indf2	equ	0xFDF
  3054                           fsr2h	equ	0xFDA
  3055                           fsr2l	equ	0xFD9
  3056                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         73
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      86
    BANK0           160      3      35
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultErrorHandler(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_seg_calculate
    _main->_state
    _state->_EUSART1_Read
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     723
                       _EUSART1_Read
                      _EUSART1_Write
                _EUSART1_is_rx_ready
                  _SYSTEM_Initialize
                      _seg_calculate
                           _show_seg
                              _state
 ---------------------------------------------------------------------------------
 (1) _state                                                2     2      0      37
                                              1 BANK0      2     2      0
                       _EUSART1_Read
                _EUSART1_is_rx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART1_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _show_seg                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _seg_calculate                                        3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     605
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     605
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0       0
                                              0 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  0     0      0       0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultErrorHandler                          0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_RxDataHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _EUSART1_Write
   _EUSART1_is_rx_ready
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _seg_calculate
   _show_seg
   _state
     _EUSART1_Read
     _EUSART1_is_rx_ready

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _EUSART1_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      3      23       5       21.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      56       1       91.5%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      79      12        0.0%
DATA                 0      0      79       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 18 22:15:28 2019

                      _eusart1TxBufferRemaining 0056                                               _c 0023  
                                            l91 0454                                              l93 0490  
                                            _cc 0021                                    __CFG_CP0$OFF 000000  
                                  __CFG_CP1$OFF 000000                                    __CFG_CP2$OFF 000000  
                                  __CFG_CP3$OFF 000000                                     __CFG_LVP$ON 000000  
                                           l100 0536                                             l101 055A  
                                           l102 0558                                             l302 01EC  
                                           l303 021A                                             l311 0404  
                                           l304 024A                                             l313 0436  
                                           l291 012A                                             l285 019C  
                                           l294 017A                                             l286 00DC  
                                           l287 0120                                    __CFG_CPB$OFF 000000  
                                  __CFG_CPD$OFF 000000                                             u815 03C0  
                                           u680 05DC                                             u825 03EC  
                                           u907 00E4                                             u917 0110  
                                           u927 0132                                             u937 0162  
                                           u947 0188                                             u957 01E4  
                                           u967 0212                                             u977 0242  
                                           u987 0272                                             _Seg 0070  
                                           _seg 0025                                             prod 000FF3  
                                           tosl 000FFD                                             wreg 000FE8  
                                    _TXSTA1bits 000FAC                                            l1583 0526  
                                          _LATA 000F89                                            _LATB 000F8A  
                                          _LATC 000F8B                                            _LATD 000F8C  
                                          _LATE 000F8D                                            _WPUB 000F61  
                                 _EUSART1_Write 0522                                            _main 03FC  
                                 ?_EUSART1_Read 003A                                            fsr0h 000FEA  
                                          fsr1h 000FE2                                            fsr2h 000FDA  
                                          fsr0l 000FE9                                            indf2 000FDF  
                                          fsr1l 000FE1                                            fsr2l 000FD9  
                                          btemp 0057                                   __CFG_BORV$190 000000  
                                          prodh 000FF4                                            prodl 000FF3  
                                          start 00D6                                   __CFG_IESO$OFF 000000  
                                  ___param_bank 000000                  __size_of_OSCILLATOR_Initialize 000E  
                 __end_of_OSCILLATOR_Initialize 05EE                           _eusart1RxStatusBuffer 0001  
                                         ?_main 003A                                  __CFG_DEBUG$OFF 000000  
                                         i2l114 031C                                           i2l106 0588  
                                         i2l107 0584                                           i2l119 05AC  
                                         i2l165 006C                                           _TRISA 000F92  
                                         _TRISB 000F93                                           _TRISC 000F94  
                                         _TRISD 000F95                                           _TRISE 000F96  
                                 __CFG_WRT0$OFF 000000                                   __CFG_WRT1$OFF 000000  
                                 __CFG_WRT2$OFF 000000                                   __CFG_WRT3$OFF 000000  
                          _EUSART1_Transmit_ISR 055E                                  __CFG_EBTR0$OFF 000000  
                                __CFG_FCMEN$OFF 000000                                  __CFG_EBTR1$OFF 000000  
                                __CFG_EBTR2$OFF 000000                                  __CFG_EBTR3$OFF 000000  
                                 __CFG_WRTB$OFF 000000                                   __CFG_WRTC$OFF 000000  
                                 __CFG_WRTD$OFF 000000                                  __CFG_EBTRB$OFF 000000  
                            __CFG_MCLRE$EXTMCLR 000000                                           _state 00DA  
                                ?_EUSART1_Write 003A                                           pclath 000FFA  
                                         tablat 000FF5                                  ??_EUSART1_Read 0080  
                                         status 000FD8                                           wtemp6 0058  
                                __CFG_HFOFST$ON 000000      __end_of_EUSART1_DefaultFramingErrorHandler 0632  
   __size_of_EUSART1_DefaultFramingErrorHandler 0002            ??_EUSART1_DefaultFramingErrorHandler 003A  
           ?_EUSART1_DefaultFramingErrorHandler 003A              _EUSART1_DefaultFramingErrorHandler 0630  
                                __CFG_PBADEN$ON 000000                                 __initialization 049A  
                    __end_of_EUSART1_Initialize 03A0                                    __end_of_main 044E  
                   ?_INTERRUPT_InterruptManager 003A                                          ??_main 0083  
                                 __activetblptr 000002                           ?_EUSART1_Transmit_ISR 003A  
                                        ?_state 003A                                          _ANSELA 000F38  
                                        _ANSELB 000F39                                          _ANSELC 000F3A  
                                        _ANSELD 000F3B                                          _ANSELE 000F3C  
                  __size_of_EUSART1_is_rx_ready 000E                                  __CFG_WDTEN$OFF 000000  
                                        _RCREG1 000FAE                                          _RCSTA1 000FAB  
                                        _OSCCON 000FD3                                          _SPBRG1 000FAF  
                                        _TXREG1 000FAD                                          _TXSTA1 000FAC  
                                __CFG_XINST$OFF 000000                                          _c_scan 0029  
                                __CFG_STVREN$ON 000000                        ?_EUSART1_SetErrorHandler 0080  
                                        _segg11 002F                                          _segg12 002D  
                                        _segg21 002C                                          _segg22 002A  
                                        clear_0 04C0                                          clear_1 04CC  
                                        _rxData 0032                ??_EUSART1_SetOverrunErrorHandler 0082  
               ?_EUSART1_SetOverrunErrorHandler 0080                                          _status 0027  
                              __end_of_show_seg 027E                                          tblptrh 000FF7  
                                        tblptrl 000FF6                                          tblptru 000FF8  
                               ??_EUSART1_Write 0080                                 _eusart1RxBuffer 0060  
                 __size_of_INTERRUPT_Initialize 0004                                 _eusart1TxBuffer 0011  
                             _SYSTEM_Initialize 05B0                                      __accesstop 0060  
                       __end_of__initialization 04D2                              ?_SYSTEM_Initialize 003A  
                                 ___rparam_used 000001                  __size_of_EUSART1_RxDataHandler 0024  
                 __end_of_EUSART1_RxDataHandler 05B0                                  __pcstackCOMRAM 003A  
                                  __pidataBANK0 05C2                             ??_SYSTEM_Initialize 0082  
                                 __end_of_state 01BE                            __end_of_EUSART1_Read 049A  
                        ??_EUSART1_Transmit_ISR 003A                     __end_of_EUSART1_Receive_ISR 0322  
                     __end_of_SYSTEM_Initialize 05C2                                         ??_state 0081  
                                 _eusart1RxHead 0037                                   _eusart1TxHead 0039  
                                 _eusart1RxTail 0036                                      __pbssBANK0 0060  
                                 _eusart1TxTail 0038               _EUSART1_TxDefaultInterruptHandler 0054  
               ??_EUSART1_SetRxInterruptHandler 0082                                 __CFG_PLLCFG$OFF 000000  
                                    __pnvCOMRAM 004C                 __end_of_EUSART1_SetErrorHandler 0620  
                            __CFG_CCP2MX$PORTC1 000000                              __CFG_CCP3MX$PORTB5 000000  
        __end_of_EUSART1_SetFramingErrorHandler 0616         __size_of_EUSART1_SetFramingErrorHandler 000A  
                _EUSART1_SetFramingErrorHandler 060C                    ?_EUSART1_DefaultErrorHandler 003A  
                                       _OSCCON2 000FD2                                         i2u43_48 02AC  
                                       i2u43_49 02C0                                         i2u45_48 02DA  
                                       i2u61_48 0060                                         i2u45_49 02EE  
                                       _OSCTUNE 000F9B                                         i2u47_48 0308  
                                       i2u64_48 0076                                         i2u64_49 008A  
                                       _SPBRGH1 000FB0                          __size_of_seg_calculate 005C  
                               __CFG_PWRTEN$OFF 000000                                         __Hparam 0000  
                                       __Lparam 0000                                       ?_show_seg 003A  
                           _EUSART1_is_rx_ready 05D2                                         __pcinit 049A  
                                       __ramtop 1000                                         __ptext0 03FC  
                                       __ptext1 00DA                                         __ptext2 05D2  
                                       __ptext3 044E                                         __ptext4 01BE  
                                       __ptext5 03A0                                         __ptext6 05B0  
                                       __ptext7 04E0                                         __ptext8 05E0  
                                       __ptext9 062C                                         _segg122 002E  
                                       _segg222 002B                           _OSCILLATOR_Initialize 05E0  
                            _EUSART1_Initialize 0322                        ??_PIN_MANAGER_Initialize 0080  
                 ??_EUSART1_DefaultErrorHandler 003A                      __size_of_SYSTEM_Initialize 0012  
                                    _seg_value1 0031                                      _seg_value2 0030  
                          end_of_initialization 04D2                            ?_EUSART1_is_rx_ready 003A  
                           ?_EUSART1_Initialize 003A                                   __Lmediumconst 0000  
                   _EUSART1_OverrunErrorHandler 004E           __end_of_EUSART1_SetRxInterruptHandler 0602  
        __size_of_EUSART1_SetRxInterruptHandler 000A                   _EUSART1_SetRxInterruptHandler 05F8  
                                 _seg_calculate 03A0                                         postdec1 000FE5  
                                    ??_show_seg 0080                                         postinc0 000FEE  
                         __size_of_EUSART1_Read 004C                            ??_EUSART1_Initialize 0082  
              __size_of_EUSART1_SetErrorHandler 000A                             EUSART1_Write@txData 0080  
                         ??_EUSART1_is_rx_ready 0080                                    _EUSART1_Read 044E  
          __size_of_EUSART1_DefaultErrorHandler 0006                                  ?_seg_calculate 003A  
                  __end_of_INTERRUPT_Initialize 0630                          ?_OSCILLATOR_Initialize 003A  
                           start_initialization 049A                 __size_of_PIN_MANAGER_Initialize 0042  
 EUSART1_SetRxInterruptHandler@interruptHandler 0080   EUSART1_SetTxInterruptHandler@interruptHandler 0080  
                         __end_of_EUSART1_Write 055E                           _EUSART1_RxDataHandler 058C  
                ?_EUSART1_SetRxInterruptHandler 0080                                     __pdataBANK0 0070  
                                _eusart1RxCount 0035                                     __pbssCOMRAM 0001  
             _EUSART1_RxDefaultInterruptHandler 0052                   __size_of_EUSART1_Transmit_ISR 002E  
                                 __pcstackBANK0 0080                 ??_EUSART1_SetTxInterruptHandler 0082  
              ??_EUSART1_SetFramingErrorHandler 0082                 ?_EUSART1_SetFramingErrorHandler 0080  
                  __size_of_EUSART1_Receive_ISR 00A4                                 ??_seg_calculate 0080  
                        _PIN_MANAGER_Initialize 04E0                                       __pintcode 0008  
                             __size_of_show_seg 00C0                    ??_INTERRUPT_InterruptManager 003A  
                              __CFG_PRICLKEN$ON 000000                                       _led_value 0033  
                                      _BAUDCON1 000FB8      __end_of_EUSART1_DefaultOverrunErrorHandler 0626  
   __size_of_EUSART1_DefaultOverrunErrorHandler 0006            ??_EUSART1_DefaultOverrunErrorHandler 003A  
           ?_EUSART1_DefaultOverrunErrorHandler 003A              _EUSART1_DefaultOverrunErrorHandler 0620  
                          _EUSART1_ErrorHandler 004C                         _EUSART1_SetErrorHandler 0616  
                                __size_of_state 00E4                            _INTERRUPT_Initialize 062C  
       EUSART1_SetErrorHandler@interruptHandler 0080                                        _PIE1bits 000F9D  
           __size_of_INTERRUPT_InterruptManager 00CE                                        _PIR1bits 000F9E  
                        ?_EUSART1_RxDataHandler 003A                                        _RCONbits 000FD0  
                              __CFG_WDTPS$32768 000000                                     _INTCON2bits 000FF1  
                                     copy_data0 04AE                           ?_INTERRUPT_Initialize 003A  
                         EUSART1_Read@readValue 0080           __end_of_EUSART1_SetTxInterruptHandler 05F8  
        __size_of_EUSART1_SetTxInterruptHandler 000A                   _EUSART1_SetTxInterruptHandler 05EE  
                                      __Hrparam 0000                                        __Lrparam 0000  
                            __CFG_BOREN$SBORDIS 000000                               __CFG_P2BMX$PORTD2 000000  
                       ??_OSCILLATOR_Initialize 0080                     __size_of_EUSART1_Initialize 007E  
                     ??_EUSART1_SetErrorHandler 0082             __end_of_EUSART1_DefaultErrorHandler 062C  
                   _EUSART1_DefaultErrorHandler 0626                     __end_of_EUSART1_is_rx_ready 05E0  
                                      __ptext10 0322                                        __ptext11 05EE  
                                      __ptext20 0620                                        __ptext12 05F8  
                                      __ptext21 0630                                        __ptext13 0602  
                                      __ptext22 0626                                        __ptext14 060C  
                                      __ptext23 058C                                        __ptext15 0616  
                                      __ptext24 0000                                        __ptext16 0522  
                                      __ptext18 055E                                        __ptext19 027E  
                                 __size_of_main 0052  EUSART1_SetOverrunErrorHandler@interruptHandler 0080  
                                      _show_seg 01BE                                        int$flags 0057  
            __end_of_INTERRUPT_InterruptManager 00D6                      _INTERRUPT_InterruptManager 0008  
                   _EUSART1_FramingErrorHandler 0050                             _EUSART1_Receive_ISR 027E  
                                    _INTCONbits 000FF2                          ??_INTERRUPT_Initialize 0080  
                                      intlevel2 0000                            ?_EUSART1_Receive_ISR 003A  
                       ?_PIN_MANAGER_Initialize 003A          __end_of_EUSART1_SetOverrunErrorHandler 060C  
       __size_of_EUSART1_SetOverrunErrorHandler 000A                  _EUSART1_SetOverrunErrorHandler 0602  
                                    _RCSTA1bits 000FAB                    __end_of_EUSART1_Transmit_ISR 058C  
EUSART1_SetFramingErrorHandler@interruptHandler 0080                  ?_EUSART1_SetTxInterruptHandler 0080  
                        __size_of_EUSART1_Write 003C                              _eusart1RxLastError 0034  
                             __CFG_T3CMX$PORTC0 000000                           ??_EUSART1_Receive_ISR 003A  
                __end_of_PIN_MANAGER_Initialize 0522                               __CFG_FOSC$INTIO67 000000  
                       ??_EUSART1_RxDataHandler 003A                           __end_of_seg_calculate 03FC  
